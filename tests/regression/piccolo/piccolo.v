/*
 * 1364-1995 Verilog generated by Icarus Verilog VLOG95 Code Generator,
 * Version: 11.0 (stable) (v11_0-132-gb2f2414)
 * Converted using TYPICAL delays and without signed support.
 */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 10. */
module wrapper(__ILA_I_inst, __ISSUE__, __VLG_I_EN_hart0_server_reset_request_put, __VLG_I_EN_hart0_server_reset_response_get, __VLG_I_EN_set_verbosity, __VLG_I_dmem_master_arready, __VLG_I_dmem_master_awready, __VLG_I_dmem_master_bid, __VLG_I_dmem_master_bresp, __VLG_I_dmem_master_bvalid, __VLG_I_dmem_master_rdata, __VLG_I_dmem_master_rid, __VLG_I_dmem_master_rlast, __VLG_I_dmem_master_rresp, __VLG_I_dmem_master_rvalid, __VLG_I_dmem_master_wready, __VLG_I_hart0_server_reset_request_put, __VLG_I_imem_master_arready, __VLG_I_imem_master_awready, __VLG_I_imem_master_bid, __VLG_I_imem_master_bresp, __VLG_I_imem_master_bvalid, __VLG_I_imem_master_rdata, __VLG_I_imem_master_rid, __VLG_I_imem_master_rlast, __VLG_I_imem_master_rresp, __VLG_I_imem_master_rvalid, __VLG_I_imem_master_wready, __VLG_I_set_verbosity_logdelay, __VLG_I_set_verbosity_verbosity, ____auxvar10__recorder_init__, ____auxvar11__recorder_init__, ____auxvar12__recorder_init__, ____auxvar13__recorder_init__, ____auxvar14__recorder_init__, ____auxvar15__recorder_init__, ____auxvar16__recorder_init__, ____auxvar17__recorder_init__, ____auxvar18__recorder_init__, ____auxvar19__recorder_init__, ____auxvar1__recorder_init__, ____auxvar20__recorder_init__, ____auxvar21__recorder_init__, ____auxvar22__recorder_init__, ____auxvar23__recorder_init__, ____auxvar24__recorder_init__, ____auxvar25__recorder_init__, ____auxvar26__recorder_init__, ____auxvar27__recorder_init__, ____auxvar28__recorder_init__, ____auxvar29__recorder_init__, ____auxvar2__recorder_init__, ____auxvar30__recorder_init__, ____auxvar31__recorder_init__, ____auxvar32__recorder_init__, ____auxvar33__recorder_init__, ____auxvar34__recorder_init__, ____auxvar35__recorder_init__, ____auxvar36__recorder_init__, ____auxvar37__recorder_init__, ____auxvar38__recorder_init__, ____auxvar3__recorder_init__, ____auxvar4__recorder_init__, ____auxvar5__recorder_init__, ____auxvar6__recorder_init__, ____auxvar7__recorder_init__, ____auxvar8__recorder_init__, ____auxvar9__recorder_init__, clk, dummy_reset, rst, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__csr_regfile__DOT__rg_nmi, RTL__DOT__csr_regfile__DOT__rg_state, RTL__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_10_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_11_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_12_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_13_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_14_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_15_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_16_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_17_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_18_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_19_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_1_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_20_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_21_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_22_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_23_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_24_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_25_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_26_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_27_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_28_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_29_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_2_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_30_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_31_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_3_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_4_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_5_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_6_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_7_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_8_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_9_, RTL__DOT__near_mem$EN_dmem_req, RTL__DOT__near_mem$dmem_exc, RTL__DOT__near_mem$dmem_req_addr, RTL__DOT__near_mem$dmem_req_f3, RTL__DOT__near_mem$dmem_req_op, RTL__DOT__near_mem$dmem_req_store_value, RTL__DOT__near_mem$dmem_word64, RTL__DOT__near_mem$imem_instr, RTL__DOT__near_mem$imem_pc, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__rg_addr, RTL__DOT__near_mem__DOT__dcache__DOT__rg_pa, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__rg_cur_priv, RTL__DOT__rg_retiring$EN, RTL__DOT__rg_run_on_reset, RTL__DOT__rg_state, RTL__DOT__rg_trap_instr, RTL__DOT__s1_to_s2$D_IN, RTL__DOT__s1_to_s2$EN, RTL__DOT__s2_to_s3$D_IN, RTL__DOT__s2_to_s3$EN, RTL__DOT__s3_deq$D_IN, RTL__DOT__s3_deq$EN, RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg, RTL__DOT__stage1_f_reset_reqs__DOT__full_reg, RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage1_f_reset_rsps__DOT__full_reg, RTL__DOT__stage1_rg_full, RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg, RTL__DOT__stage2_f_reset_reqs__DOT__full_reg, RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage2_f_reset_rsps__DOT__full_reg, RTL__DOT__stage2_rg_full, RTL__DOT__stage2_rg_stage2, RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg, RTL__DOT__stage3_f_reset_reqs__DOT__full_reg, RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage3_f_reset_rsps__DOT__full_reg, RTL__DOT__stage3_rg_full, __EDCOND__, __IEND__, __ILA_SO_load_addr, __ILA_SO_load_data, __ILA_SO_load_en, __ILA_SO_load_size, __ILA_SO_pc, __ILA_SO_store_addr, __ILA_SO_store_data, __ILA_SO_store_en, __ILA_SO_store_size, __ILA_SO_x0, __ILA_SO_x1, __ILA_SO_x10, __ILA_SO_x11, __ILA_SO_x12, __ILA_SO_x13, __ILA_SO_x14, __ILA_SO_x15, __ILA_SO_x16, __ILA_SO_x17, __ILA_SO_x18, __ILA_SO_x19, __ILA_SO_x2, __ILA_SO_x20, __ILA_SO_x21, __ILA_SO_x22, __ILA_SO_x23, __ILA_SO_x24, __ILA_SO_x25, __ILA_SO_x26, __ILA_SO_x27, __ILA_SO_x28, __ILA_SO_x29, __ILA_SO_x3, __ILA_SO_x30, __ILA_SO_x31, __ILA_SO_x4, __ILA_SO_x5, __ILA_SO_x6, __ILA_SO_x7, __ILA_SO_x8, __ILA_SO_x9, __VLG_II_m_external_interrupt_req_set_not_clear, __VLG_II_nmi_req_set_not_clear, __VLG_II_s_external_interrupt_req_set_not_clear, __VLG_II_software_interrupt_req_set_not_clear, __VLG_II_timer_interrupt_req_set_not_clear, __VLG_O_RDY_hart0_server_reset_request_put, __VLG_O_RDY_hart0_server_reset_response_get, __VLG_O_RDY_set_verbosity, __VLG_O_dmem_master_araddr, __VLG_O_dmem_master_arburst, __VLG_O_dmem_master_arcache, __VLG_O_dmem_master_arid, __VLG_O_dmem_master_arlen, __VLG_O_dmem_master_arlock, __VLG_O_dmem_master_arprot, __VLG_O_dmem_master_arqos, __VLG_O_dmem_master_arregion, __VLG_O_dmem_master_arsize, __VLG_O_dmem_master_arvalid, __VLG_O_dmem_master_awaddr, __VLG_O_dmem_master_awburst, __VLG_O_dmem_master_awcache, __VLG_O_dmem_master_awid, __VLG_O_dmem_master_awlen, __VLG_O_dmem_master_awlock, __VLG_O_dmem_master_awprot, __VLG_O_dmem_master_awqos, __VLG_O_dmem_master_awregion, __VLG_O_dmem_master_awsize, __VLG_O_dmem_master_awvalid, __VLG_O_dmem_master_bready, __VLG_O_dmem_master_rready, __VLG_O_dmem_master_wdata, __VLG_O_dmem_master_wlast, __VLG_O_dmem_master_wstrb, __VLG_O_dmem_master_wvalid, __VLG_O_hart0_server_reset_response_get, __VLG_O_imem_master_araddr, __VLG_O_imem_master_arburst, __VLG_O_imem_master_arcache, __VLG_O_imem_master_arid, __VLG_O_imem_master_arlen, __VLG_O_imem_master_arlock, __VLG_O_imem_master_arprot, __VLG_O_imem_master_arqos, __VLG_O_imem_master_arregion, __VLG_O_imem_master_arsize, __VLG_O_imem_master_arvalid, __VLG_O_imem_master_awaddr, __VLG_O_imem_master_awburst, __VLG_O_imem_master_awcache, __VLG_O_imem_master_awid, __VLG_O_imem_master_awlen, __VLG_O_imem_master_awlock, __VLG_O_imem_master_awprot, __VLG_O_imem_master_awqos, __VLG_O_imem_master_awregion, __VLG_O_imem_master_awsize, __VLG_O_imem_master_awvalid, __VLG_O_imem_master_bready, __VLG_O_imem_master_rready, __VLG_O_imem_master_wdata, __VLG_O_imem_master_wlast, __VLG_O_imem_master_wstrb, __VLG_O_imem_master_wvalid, __all_assert_wire__, __all_assume_wire__, __auxvar0__delay_d_0, __sanitycheck_wire__, end_of_pipeline, input_map_assume___p0__, invariant_assume__p10__, invariant_assume__p11__, invariant_assume__p12__, invariant_assume__p13__, invariant_assume__p14__, invariant_assume__p15__, invariant_assume__p16__, invariant_assume__p17__, invariant_assume__p18__, invariant_assume__p19__, invariant_assume__p1__, invariant_assume__p20__, invariant_assume__p21__, invariant_assume__p22__, invariant_assume__p23__, invariant_assume__p24__, invariant_assume__p25__, invariant_assume__p26__, invariant_assume__p27__, invariant_assume__p28__, invariant_assume__p29__, invariant_assume__p2__, invariant_assume__p30__, invariant_assume__p31__, invariant_assume__p32__, invariant_assume__p3__, invariant_assume__p4__, invariant_assume__p5__, invariant_assume__p6__, invariant_assume__p7__, invariant_assume__p8__, invariant_assume__p9__, issue_decode__p33__, issue_valid__p34__, mem_req_addr, mem_req_en, mem_req_funct3, mem_req_op, mem_req_rd_data, mem_req_wd_data, monitor_s1, monitor_s1_already_enter_cond, monitor_s1_already_exit_cond, monitor_s2_enter_cond, monitor_s2_exit_cond, monitor_s3_enter_cond, monitor_s3_exit_cond, monitor_s4_enter_cond, monitor_s4_exit_cond, noreset__p35__, post_value_holder__p36__, post_value_holder__p37__, post_value_holder__p38__, post_value_holder__p39__, post_value_holder__p40__, post_value_holder__p41__, post_value_holder__p42__, post_value_holder__p43__, post_value_holder__p44__, post_value_holder__p45__, post_value_holder__p46__, post_value_holder__p47__, post_value_holder__p48__, post_value_holder__p49__, post_value_holder__p50__, post_value_holder__p51__, post_value_holder__p52__, post_value_holder__p53__, post_value_holder__p54__, post_value_holder__p55__, post_value_holder__p56__, post_value_holder__p57__, post_value_holder__p58__, post_value_holder__p59__, post_value_holder__p60__, post_value_holder__p61__, post_value_holder__p62__, post_value_holder__p63__, post_value_holder__p64__, post_value_holder__p65__, post_value_holder__p66__, post_value_holder__p67__, post_value_holder__p68__, post_value_holder__p69__, post_value_holder__p70__, post_value_holder__p71__, post_value_holder__p72__, post_value_holder__p73__, post_value_holder_overly_constrained__p153__, post_value_holder_overly_constrained__p154__, post_value_holder_overly_constrained__p155__, post_value_holder_overly_constrained__p156__, post_value_holder_overly_constrained__p157__, post_value_holder_overly_constrained__p158__, post_value_holder_overly_constrained__p159__, post_value_holder_overly_constrained__p160__, post_value_holder_overly_constrained__p161__, post_value_holder_overly_constrained__p162__, post_value_holder_overly_constrained__p163__, post_value_holder_overly_constrained__p164__, post_value_holder_overly_constrained__p165__, post_value_holder_overly_constrained__p166__, post_value_holder_overly_constrained__p167__, post_value_holder_overly_constrained__p168__, post_value_holder_overly_constrained__p169__, post_value_holder_overly_constrained__p170__, post_value_holder_overly_constrained__p171__, post_value_holder_overly_constrained__p172__, post_value_holder_overly_constrained__p173__, post_value_holder_overly_constrained__p174__, post_value_holder_overly_constrained__p175__, post_value_holder_overly_constrained__p176__, post_value_holder_overly_constrained__p177__, post_value_holder_overly_constrained__p178__, post_value_holder_overly_constrained__p179__, post_value_holder_overly_constrained__p180__, post_value_holder_overly_constrained__p181__, post_value_holder_overly_constrained__p182__, post_value_holder_overly_constrained__p183__, post_value_holder_overly_constrained__p184__, post_value_holder_overly_constrained__p185__, post_value_holder_overly_constrained__p186__, post_value_holder_overly_constrained__p187__, post_value_holder_overly_constrained__p188__, post_value_holder_overly_constrained__p189__, post_value_holder_overly_constrained__p190__, post_value_holder_triggered__p191__, post_value_holder_triggered__p192__, post_value_holder_triggered__p193__, post_value_holder_triggered__p194__, post_value_holder_triggered__p195__, post_value_holder_triggered__p196__, post_value_holder_triggered__p197__, post_value_holder_triggered__p198__, post_value_holder_triggered__p199__, post_value_holder_triggered__p200__, post_value_holder_triggered__p201__, post_value_holder_triggered__p202__, post_value_holder_triggered__p203__, post_value_holder_triggered__p204__, post_value_holder_triggered__p205__, post_value_holder_triggered__p206__, post_value_holder_triggered__p207__, post_value_holder_triggered__p208__, post_value_holder_triggered__p209__, post_value_holder_triggered__p210__, post_value_holder_triggered__p211__, post_value_holder_triggered__p212__, post_value_holder_triggered__p213__, post_value_holder_triggered__p214__, post_value_holder_triggered__p215__, post_value_holder_triggered__p216__, post_value_holder_triggered__p217__, post_value_holder_triggered__p218__, post_value_holder_triggered__p219__, post_value_holder_triggered__p220__, post_value_holder_triggered__p221__, post_value_holder_triggered__p222__, post_value_holder_triggered__p223__, post_value_holder_triggered__p224__, post_value_holder_triggered__p225__, post_value_holder_triggered__p226__, post_value_holder_triggered__p227__, post_value_holder_triggered__p228__, rfassumptions__p74__, rfassumptions__p75__, rfassumptions__p76__, s2_enter, s2_exit, s3_enter, s3_exit, s4_enter, variable_map_assert__p118__, variable_map_assert__p119__, variable_map_assert__p120__, variable_map_assert__p121__, variable_map_assert__p122__, variable_map_assert__p123__, variable_map_assert__p124__, variable_map_assert__p125__, variable_map_assert__p126__, variable_map_assert__p127__, variable_map_assert__p128__, variable_map_assert__p129__, variable_map_assert__p130__, variable_map_assert__p131__, variable_map_assert__p132__, variable_map_assert__p133__, variable_map_assert__p134__, variable_map_assert__p135__, variable_map_assert__p136__, variable_map_assert__p137__, variable_map_assert__p138__, variable_map_assert__p139__, variable_map_assert__p140__, variable_map_assert__p141__, variable_map_assert__p142__, variable_map_assert__p143__, variable_map_assert__p144__, variable_map_assert__p145__, variable_map_assert__p146__, variable_map_assert__p147__, variable_map_assert__p148__, variable_map_assert__p149__, variable_map_assert__p150__, variable_map_assert__p151__, variable_map_assert__p152__, variable_map_assume___p100__, variable_map_assume___p101__, variable_map_assume___p102__, variable_map_assume___p103__, variable_map_assume___p104__, variable_map_assume___p105__, variable_map_assume___p106__, variable_map_assume___p107__, variable_map_assume___p108__, variable_map_assume___p109__, variable_map_assume___p110__, variable_map_assume___p111__, variable_map_assume___p112__, variable_map_assume___p113__, variable_map_assume___p114__, variable_map_assume___p115__, variable_map_assume___p116__, variable_map_assume___p117__, variable_map_assume___p77__, variable_map_assume___p78__, variable_map_assume___p79__, variable_map_assume___p80__, variable_map_assume___p81__, variable_map_assume___p82__, variable_map_assume___p83__, variable_map_assume___p84__, variable_map_assume___p85__, variable_map_assume___p86__, variable_map_assume___p87__, variable_map_assume___p88__, variable_map_assume___p89__, variable_map_assume___p90__, variable_map_assume___p91__, variable_map_assume___p92__, variable_map_assume___p93__, variable_map_assume___p94__, variable_map_assume___p95__, variable_map_assume___p96__, variable_map_assume___p97__, variable_map_assume___p98__, variable_map_assume___p99__, __CYCLE_CNT__, __START__, __STARTED__, __ENDED__, __2ndENDED__, __RESETED__, __auxvar10__recorder, __auxvar10__recorder_sn_vhold, __auxvar10__recorder_sn_condmet, __auxvar11__recorder, __auxvar11__recorder_sn_vhold, __auxvar11__recorder_sn_condmet, __auxvar12__recorder, __auxvar12__recorder_sn_vhold, __auxvar12__recorder_sn_condmet, __auxvar13__recorder, __auxvar13__recorder_sn_vhold, __auxvar13__recorder_sn_condmet, __auxvar14__recorder, __auxvar14__recorder_sn_vhold, __auxvar14__recorder_sn_condmet, __auxvar15__recorder, __auxvar15__recorder_sn_vhold, __auxvar15__recorder_sn_condmet, __auxvar16__recorder, __auxvar16__recorder_sn_vhold, __auxvar16__recorder_sn_condmet, __auxvar17__recorder, __auxvar17__recorder_sn_vhold, __auxvar17__recorder_sn_condmet, __auxvar18__recorder, __auxvar18__recorder_sn_vhold, __auxvar18__recorder_sn_condmet, __auxvar19__recorder, __auxvar19__recorder_sn_vhold, __auxvar19__recorder_sn_condmet, __auxvar1__recorder, __auxvar1__recorder_sn_vhold, __auxvar1__recorder_sn_condmet, __auxvar20__recorder, __auxvar20__recorder_sn_vhold, __auxvar20__recorder_sn_condmet, __auxvar21__recorder, __auxvar21__recorder_sn_vhold, __auxvar21__recorder_sn_condmet, __auxvar22__recorder, __auxvar22__recorder_sn_vhold, __auxvar22__recorder_sn_condmet, __auxvar23__recorder, __auxvar23__recorder_sn_vhold, __auxvar23__recorder_sn_condmet, __auxvar24__recorder, __auxvar24__recorder_sn_vhold, __auxvar24__recorder_sn_condmet, __auxvar25__recorder, __auxvar25__recorder_sn_vhold, __auxvar25__recorder_sn_condmet, __auxvar26__recorder, __auxvar26__recorder_sn_vhold, __auxvar26__recorder_sn_condmet, __auxvar27__recorder, __auxvar27__recorder_sn_vhold, __auxvar27__recorder_sn_condmet, __auxvar28__recorder, __auxvar28__recorder_sn_vhold, __auxvar28__recorder_sn_condmet, __auxvar29__recorder, __auxvar29__recorder_sn_vhold, __auxvar29__recorder_sn_condmet, __auxvar2__recorder, __auxvar2__recorder_sn_vhold, __auxvar2__recorder_sn_condmet, __auxvar30__recorder, __auxvar30__recorder_sn_vhold, __auxvar30__recorder_sn_condmet, __auxvar31__recorder, __auxvar31__recorder_sn_vhold, __auxvar31__recorder_sn_condmet, __auxvar32__recorder, __auxvar32__recorder_sn_vhold, __auxvar32__recorder_sn_condmet, __auxvar33__recorder, __auxvar33__recorder_sn_vhold, __auxvar33__recorder_sn_condmet, __auxvar34__recorder, __auxvar34__recorder_sn_vhold, __auxvar34__recorder_sn_condmet, __auxvar35__recorder, __auxvar35__recorder_sn_vhold, __auxvar35__recorder_sn_condmet, __auxvar36__recorder, __auxvar36__recorder_sn_vhold, __auxvar36__recorder_sn_condmet, __auxvar37__recorder, __auxvar37__recorder_sn_vhold, __auxvar37__recorder_sn_condmet, __auxvar38__recorder, __auxvar38__recorder_sn_vhold, __auxvar38__recorder_sn_condmet, __auxvar3__recorder, __auxvar3__recorder_sn_vhold, __auxvar3__recorder_sn_condmet, __auxvar4__recorder, __auxvar4__recorder_sn_vhold, __auxvar4__recorder_sn_condmet, __auxvar5__recorder, __auxvar5__recorder_sn_vhold, __auxvar5__recorder_sn_condmet, __auxvar6__recorder, __auxvar6__recorder_sn_vhold, __auxvar6__recorder_sn_condmet, __auxvar7__recorder, __auxvar7__recorder_sn_vhold, __auxvar7__recorder_sn_condmet, __auxvar8__recorder, __auxvar8__recorder_sn_vhold, __auxvar8__recorder_sn_condmet, __auxvar9__recorder, __auxvar9__recorder_sn_vhold, __auxvar9__recorder_sn_condmet, __auxvar0__delay_d_1, monitor_s1_already, monitor_s2, monitor_s3, monitor_s4);
  input [31:0] __ILA_I_inst;
  input __ISSUE__;
  input __VLG_I_EN_hart0_server_reset_request_put;
  input __VLG_I_EN_hart0_server_reset_response_get;
  input __VLG_I_EN_set_verbosity;
  input __VLG_I_dmem_master_arready;
  input __VLG_I_dmem_master_awready;
  input [3:0] __VLG_I_dmem_master_bid;
  input [1:0] __VLG_I_dmem_master_bresp;
  input __VLG_I_dmem_master_bvalid;
  input [63:0] __VLG_I_dmem_master_rdata;
  input [3:0] __VLG_I_dmem_master_rid;
  input __VLG_I_dmem_master_rlast;
  input [1:0] __VLG_I_dmem_master_rresp;
  input __VLG_I_dmem_master_rvalid;
  input __VLG_I_dmem_master_wready;
  input __VLG_I_hart0_server_reset_request_put;
  input __VLG_I_imem_master_arready;
  input __VLG_I_imem_master_awready;
  input [3:0] __VLG_I_imem_master_bid;
  input [1:0] __VLG_I_imem_master_bresp;
  input __VLG_I_imem_master_bvalid;
  input [63:0] __VLG_I_imem_master_rdata;
  input [3:0] __VLG_I_imem_master_rid;
  input __VLG_I_imem_master_rlast;
  input [1:0] __VLG_I_imem_master_rresp;
  input __VLG_I_imem_master_rvalid;
  input __VLG_I_imem_master_wready;
  input [63:0] __VLG_I_set_verbosity_logdelay;
  input [3:0] __VLG_I_set_verbosity_verbosity;
  input [31:0] ____auxvar10__recorder_init__;
  input [31:0] ____auxvar11__recorder_init__;
  input [31:0] ____auxvar12__recorder_init__;
  input [31:0] ____auxvar13__recorder_init__;
  input [31:0] ____auxvar14__recorder_init__;
  input [31:0] ____auxvar15__recorder_init__;
  input [31:0] ____auxvar16__recorder_init__;
  input [31:0] ____auxvar17__recorder_init__;
  input [31:0] ____auxvar18__recorder_init__;
  input [31:0] ____auxvar19__recorder_init__;
  input [31:0] ____auxvar1__recorder_init__;
  input [31:0] ____auxvar20__recorder_init__;
  input [31:0] ____auxvar21__recorder_init__;
  input [31:0] ____auxvar22__recorder_init__;
  input [31:0] ____auxvar23__recorder_init__;
  input [31:0] ____auxvar24__recorder_init__;
  input [31:0] ____auxvar25__recorder_init__;
  input [31:0] ____auxvar26__recorder_init__;
  input [31:0] ____auxvar27__recorder_init__;
  input [31:0] ____auxvar28__recorder_init__;
  input [31:0] ____auxvar29__recorder_init__;
  input [31:0] ____auxvar2__recorder_init__;
  input [31:0] ____auxvar30__recorder_init__;
  input [31:0] ____auxvar31__recorder_init__;
  input [31:0] ____auxvar32__recorder_init__;
  input [31:0] ____auxvar33__recorder_init__;
  input ____auxvar34__recorder_init__;
  input [2:0] ____auxvar35__recorder_init__;
  input ____auxvar36__recorder_init__;
  input [31:0] ____auxvar37__recorder_init__;
  input [31:0] ____auxvar38__recorder_init__;
  input [31:0] ____auxvar3__recorder_init__;
  input [31:0] ____auxvar4__recorder_init__;
  input [31:0] ____auxvar5__recorder_init__;
  input [31:0] ____auxvar6__recorder_init__;
  input [31:0] ____auxvar7__recorder_init__;
  input [31:0] ____auxvar8__recorder_init__;
  input [31:0] ____auxvar9__recorder_init__;
  input clk;
  input dummy_reset;
  input rst;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__csr_regfile__DOT__rg_nmi;
  output RTL__DOT__csr_regfile__DOT__rg_state;
  output RTL__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_10_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_11_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_12_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_13_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_14_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_15_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_16_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_17_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_18_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_19_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_1_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_20_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_21_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_22_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_23_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_24_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_25_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_26_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_27_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_28_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_29_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_2_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_30_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_31_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_3_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_4_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_5_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_6_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_7_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_8_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_9_;
  output RTL__DOT__near_mem$EN_dmem_req;
  output RTL__DOT__near_mem$dmem_exc;
  output [31:0] RTL__DOT__near_mem$dmem_req_addr;
  output [2:0] RTL__DOT__near_mem$dmem_req_f3;
  output RTL__DOT__near_mem$dmem_req_op;
  output [63:0] RTL__DOT__near_mem$dmem_req_store_value;
  output [63:0] RTL__DOT__near_mem$dmem_word64;
  output [31:0] RTL__DOT__near_mem$imem_instr;
  output [31:0] RTL__DOT__near_mem$imem_pc;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output [31:0] RTL__DOT__near_mem__DOT__dcache__DOT__rg_addr;
  output [31:0] RTL__DOT__near_mem__DOT__dcache__DOT__rg_pa;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output [1:0] RTL__DOT__rg_cur_priv;
  output RTL__DOT__rg_retiring$EN;
  output RTL__DOT__rg_run_on_reset;
  output [3:0] RTL__DOT__rg_state;
  output [31:0] RTL__DOT__rg_trap_instr;
  output RTL__DOT__s1_to_s2$D_IN;
  output RTL__DOT__s1_to_s2$EN;
  output RTL__DOT__s2_to_s3$D_IN;
  output RTL__DOT__s2_to_s3$EN;
  output RTL__DOT__s3_deq$D_IN;
  output RTL__DOT__s3_deq$EN;
  output RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__stage1_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage1_f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage1_rg_full;
  output RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__stage2_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage2_f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage2_rg_full;
  output [168:0] RTL__DOT__stage2_rg_stage2;
  output RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__stage3_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage3_f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage3_rg_full;
  output __EDCOND__;
  output __IEND__;
  output [31:0] __ILA_SO_load_addr;
  output [31:0] __ILA_SO_load_data;
  output __ILA_SO_load_en;
  output [2:0] __ILA_SO_load_size;
  output [31:0] __ILA_SO_pc;
  output [31:0] __ILA_SO_store_addr;
  output [31:0] __ILA_SO_store_data;
  output __ILA_SO_store_en;
  output [2:0] __ILA_SO_store_size;
  output [31:0] __ILA_SO_x0;
  output [31:0] __ILA_SO_x1;
  output [31:0] __ILA_SO_x10;
  output [31:0] __ILA_SO_x11;
  output [31:0] __ILA_SO_x12;
  output [31:0] __ILA_SO_x13;
  output [31:0] __ILA_SO_x14;
  output [31:0] __ILA_SO_x15;
  output [31:0] __ILA_SO_x16;
  output [31:0] __ILA_SO_x17;
  output [31:0] __ILA_SO_x18;
  output [31:0] __ILA_SO_x19;
  output [31:0] __ILA_SO_x2;
  output [31:0] __ILA_SO_x20;
  output [31:0] __ILA_SO_x21;
  output [31:0] __ILA_SO_x22;
  output [31:0] __ILA_SO_x23;
  output [31:0] __ILA_SO_x24;
  output [31:0] __ILA_SO_x25;
  output [31:0] __ILA_SO_x26;
  output [31:0] __ILA_SO_x27;
  output [31:0] __ILA_SO_x28;
  output [31:0] __ILA_SO_x29;
  output [31:0] __ILA_SO_x3;
  output [31:0] __ILA_SO_x30;
  output [31:0] __ILA_SO_x31;
  output [31:0] __ILA_SO_x4;
  output [31:0] __ILA_SO_x5;
  output [31:0] __ILA_SO_x6;
  output [31:0] __ILA_SO_x7;
  output [31:0] __ILA_SO_x8;
  output [31:0] __ILA_SO_x9;
  output __VLG_II_m_external_interrupt_req_set_not_clear;
  output __VLG_II_nmi_req_set_not_clear;
  output __VLG_II_s_external_interrupt_req_set_not_clear;
  output __VLG_II_software_interrupt_req_set_not_clear;
  output __VLG_II_timer_interrupt_req_set_not_clear;
  output __VLG_O_RDY_hart0_server_reset_request_put;
  output __VLG_O_RDY_hart0_server_reset_response_get;
  output __VLG_O_RDY_set_verbosity;
  output [63:0] __VLG_O_dmem_master_araddr;
  output [1:0] __VLG_O_dmem_master_arburst;
  output [3:0] __VLG_O_dmem_master_arcache;
  output [3:0] __VLG_O_dmem_master_arid;
  output [7:0] __VLG_O_dmem_master_arlen;
  output __VLG_O_dmem_master_arlock;
  output [2:0] __VLG_O_dmem_master_arprot;
  output [3:0] __VLG_O_dmem_master_arqos;
  output [3:0] __VLG_O_dmem_master_arregion;
  output [2:0] __VLG_O_dmem_master_arsize;
  output __VLG_O_dmem_master_arvalid;
  output [63:0] __VLG_O_dmem_master_awaddr;
  output [1:0] __VLG_O_dmem_master_awburst;
  output [3:0] __VLG_O_dmem_master_awcache;
  output [3:0] __VLG_O_dmem_master_awid;
  output [7:0] __VLG_O_dmem_master_awlen;
  output __VLG_O_dmem_master_awlock;
  output [2:0] __VLG_O_dmem_master_awprot;
  output [3:0] __VLG_O_dmem_master_awqos;
  output [3:0] __VLG_O_dmem_master_awregion;
  output [2:0] __VLG_O_dmem_master_awsize;
  output __VLG_O_dmem_master_awvalid;
  output __VLG_O_dmem_master_bready;
  output __VLG_O_dmem_master_rready;
  output [63:0] __VLG_O_dmem_master_wdata;
  output __VLG_O_dmem_master_wlast;
  output [7:0] __VLG_O_dmem_master_wstrb;
  output __VLG_O_dmem_master_wvalid;
  output __VLG_O_hart0_server_reset_response_get;
  output [63:0] __VLG_O_imem_master_araddr;
  output [1:0] __VLG_O_imem_master_arburst;
  output [3:0] __VLG_O_imem_master_arcache;
  output [3:0] __VLG_O_imem_master_arid;
  output [7:0] __VLG_O_imem_master_arlen;
  output __VLG_O_imem_master_arlock;
  output [2:0] __VLG_O_imem_master_arprot;
  output [3:0] __VLG_O_imem_master_arqos;
  output [3:0] __VLG_O_imem_master_arregion;
  output [2:0] __VLG_O_imem_master_arsize;
  output __VLG_O_imem_master_arvalid;
  output [63:0] __VLG_O_imem_master_awaddr;
  output [1:0] __VLG_O_imem_master_awburst;
  output [3:0] __VLG_O_imem_master_awcache;
  output [3:0] __VLG_O_imem_master_awid;
  output [7:0] __VLG_O_imem_master_awlen;
  output __VLG_O_imem_master_awlock;
  output [2:0] __VLG_O_imem_master_awprot;
  output [3:0] __VLG_O_imem_master_awqos;
  output [3:0] __VLG_O_imem_master_awregion;
  output [2:0] __VLG_O_imem_master_awsize;
  output __VLG_O_imem_master_awvalid;
  output __VLG_O_imem_master_bready;
  output __VLG_O_imem_master_rready;
  output [63:0] __VLG_O_imem_master_wdata;
  output __VLG_O_imem_master_wlast;
  output [7:0] __VLG_O_imem_master_wstrb;
  output __VLG_O_imem_master_wvalid;
  output __all_assert_wire__;
  output __all_assume_wire__;
  output __auxvar0__delay_d_0;
  output __sanitycheck_wire__;
  output end_of_pipeline;
  output input_map_assume___p0__;
  output invariant_assume__p10__;
  output invariant_assume__p11__;
  output invariant_assume__p12__;
  output invariant_assume__p13__;
  output invariant_assume__p14__;
  output invariant_assume__p15__;
  output invariant_assume__p16__;
  output invariant_assume__p17__;
  output invariant_assume__p18__;
  output invariant_assume__p19__;
  output invariant_assume__p1__;
  output invariant_assume__p20__;
  output invariant_assume__p21__;
  output invariant_assume__p22__;
  output invariant_assume__p23__;
  output invariant_assume__p24__;
  output invariant_assume__p25__;
  output invariant_assume__p26__;
  output invariant_assume__p27__;
  output invariant_assume__p28__;
  output invariant_assume__p29__;
  output invariant_assume__p2__;
  output invariant_assume__p30__;
  output invariant_assume__p31__;
  output invariant_assume__p32__;
  output invariant_assume__p3__;
  output invariant_assume__p4__;
  output invariant_assume__p5__;
  output invariant_assume__p6__;
  output invariant_assume__p7__;
  output invariant_assume__p8__;
  output invariant_assume__p9__;
  output issue_decode__p33__;
  output issue_valid__p34__;
  output [31:0] mem_req_addr;
  output mem_req_en;
  output [2:0] mem_req_funct3;
  output mem_req_op;
  output [31:0] mem_req_rd_data;
  output [31:0] mem_req_wd_data;
  output monitor_s1;
  output monitor_s1_already_enter_cond;
  output monitor_s1_already_exit_cond;
  output monitor_s2_enter_cond;
  output monitor_s2_exit_cond;
  output monitor_s3_enter_cond;
  output monitor_s3_exit_cond;
  output monitor_s4_enter_cond;
  output monitor_s4_exit_cond;
  output noreset__p35__;
  output post_value_holder__p36__;
  output post_value_holder__p37__;
  output post_value_holder__p38__;
  output post_value_holder__p39__;
  output post_value_holder__p40__;
  output post_value_holder__p41__;
  output post_value_holder__p42__;
  output post_value_holder__p43__;
  output post_value_holder__p44__;
  output post_value_holder__p45__;
  output post_value_holder__p46__;
  output post_value_holder__p47__;
  output post_value_holder__p48__;
  output post_value_holder__p49__;
  output post_value_holder__p50__;
  output post_value_holder__p51__;
  output post_value_holder__p52__;
  output post_value_holder__p53__;
  output post_value_holder__p54__;
  output post_value_holder__p55__;
  output post_value_holder__p56__;
  output post_value_holder__p57__;
  output post_value_holder__p58__;
  output post_value_holder__p59__;
  output post_value_holder__p60__;
  output post_value_holder__p61__;
  output post_value_holder__p62__;
  output post_value_holder__p63__;
  output post_value_holder__p64__;
  output post_value_holder__p65__;
  output post_value_holder__p66__;
  output post_value_holder__p67__;
  output post_value_holder__p68__;
  output post_value_holder__p69__;
  output post_value_holder__p70__;
  output post_value_holder__p71__;
  output post_value_holder__p72__;
  output post_value_holder__p73__;
  output post_value_holder_overly_constrained__p153__;
  output post_value_holder_overly_constrained__p154__;
  output post_value_holder_overly_constrained__p155__;
  output post_value_holder_overly_constrained__p156__;
  output post_value_holder_overly_constrained__p157__;
  output post_value_holder_overly_constrained__p158__;
  output post_value_holder_overly_constrained__p159__;
  output post_value_holder_overly_constrained__p160__;
  output post_value_holder_overly_constrained__p161__;
  output post_value_holder_overly_constrained__p162__;
  output post_value_holder_overly_constrained__p163__;
  output post_value_holder_overly_constrained__p164__;
  output post_value_holder_overly_constrained__p165__;
  output post_value_holder_overly_constrained__p166__;
  output post_value_holder_overly_constrained__p167__;
  output post_value_holder_overly_constrained__p168__;
  output post_value_holder_overly_constrained__p169__;
  output post_value_holder_overly_constrained__p170__;
  output post_value_holder_overly_constrained__p171__;
  output post_value_holder_overly_constrained__p172__;
  output post_value_holder_overly_constrained__p173__;
  output post_value_holder_overly_constrained__p174__;
  output post_value_holder_overly_constrained__p175__;
  output post_value_holder_overly_constrained__p176__;
  output post_value_holder_overly_constrained__p177__;
  output post_value_holder_overly_constrained__p178__;
  output post_value_holder_overly_constrained__p179__;
  output post_value_holder_overly_constrained__p180__;
  output post_value_holder_overly_constrained__p181__;
  output post_value_holder_overly_constrained__p182__;
  output post_value_holder_overly_constrained__p183__;
  output post_value_holder_overly_constrained__p184__;
  output post_value_holder_overly_constrained__p185__;
  output post_value_holder_overly_constrained__p186__;
  output post_value_holder_overly_constrained__p187__;
  output post_value_holder_overly_constrained__p188__;
  output post_value_holder_overly_constrained__p189__;
  output post_value_holder_overly_constrained__p190__;
  output post_value_holder_triggered__p191__;
  output post_value_holder_triggered__p192__;
  output post_value_holder_triggered__p193__;
  output post_value_holder_triggered__p194__;
  output post_value_holder_triggered__p195__;
  output post_value_holder_triggered__p196__;
  output post_value_holder_triggered__p197__;
  output post_value_holder_triggered__p198__;
  output post_value_holder_triggered__p199__;
  output post_value_holder_triggered__p200__;
  output post_value_holder_triggered__p201__;
  output post_value_holder_triggered__p202__;
  output post_value_holder_triggered__p203__;
  output post_value_holder_triggered__p204__;
  output post_value_holder_triggered__p205__;
  output post_value_holder_triggered__p206__;
  output post_value_holder_triggered__p207__;
  output post_value_holder_triggered__p208__;
  output post_value_holder_triggered__p209__;
  output post_value_holder_triggered__p210__;
  output post_value_holder_triggered__p211__;
  output post_value_holder_triggered__p212__;
  output post_value_holder_triggered__p213__;
  output post_value_holder_triggered__p214__;
  output post_value_holder_triggered__p215__;
  output post_value_holder_triggered__p216__;
  output post_value_holder_triggered__p217__;
  output post_value_holder_triggered__p218__;
  output post_value_holder_triggered__p219__;
  output post_value_holder_triggered__p220__;
  output post_value_holder_triggered__p221__;
  output post_value_holder_triggered__p222__;
  output post_value_holder_triggered__p223__;
  output post_value_holder_triggered__p224__;
  output post_value_holder_triggered__p225__;
  output post_value_holder_triggered__p226__;
  output post_value_holder_triggered__p227__;
  output post_value_holder_triggered__p228__;
  output rfassumptions__p74__;
  output rfassumptions__p75__;
  output rfassumptions__p76__;
  output s2_enter;
  output s2_exit;
  output s3_enter;
  output s3_exit;
  output s4_enter;
  output variable_map_assert__p118__;
  output variable_map_assert__p119__;
  output variable_map_assert__p120__;
  output variable_map_assert__p121__;
  output variable_map_assert__p122__;
  output variable_map_assert__p123__;
  output variable_map_assert__p124__;
  output variable_map_assert__p125__;
  output variable_map_assert__p126__;
  output variable_map_assert__p127__;
  output variable_map_assert__p128__;
  output variable_map_assert__p129__;
  output variable_map_assert__p130__;
  output variable_map_assert__p131__;
  output variable_map_assert__p132__;
  output variable_map_assert__p133__;
  output variable_map_assert__p134__;
  output variable_map_assert__p135__;
  output variable_map_assert__p136__;
  output variable_map_assert__p137__;
  output variable_map_assert__p138__;
  output variable_map_assert__p139__;
  output variable_map_assert__p140__;
  output variable_map_assert__p141__;
  output variable_map_assert__p142__;
  output variable_map_assert__p143__;
  output variable_map_assert__p144__;
  output variable_map_assert__p145__;
  output variable_map_assert__p146__;
  output variable_map_assert__p147__;
  output variable_map_assert__p148__;
  output variable_map_assert__p149__;
  output variable_map_assert__p150__;
  output variable_map_assert__p151__;
  output variable_map_assert__p152__;
  output variable_map_assume___p100__;
  output variable_map_assume___p101__;
  output variable_map_assume___p102__;
  output variable_map_assume___p103__;
  output variable_map_assume___p104__;
  output variable_map_assume___p105__;
  output variable_map_assume___p106__;
  output variable_map_assume___p107__;
  output variable_map_assume___p108__;
  output variable_map_assume___p109__;
  output variable_map_assume___p110__;
  output variable_map_assume___p111__;
  output variable_map_assume___p112__;
  output variable_map_assume___p113__;
  output variable_map_assume___p114__;
  output variable_map_assume___p115__;
  output variable_map_assume___p116__;
  output variable_map_assume___p117__;
  output variable_map_assume___p77__;
  output variable_map_assume___p78__;
  output variable_map_assume___p79__;
  output variable_map_assume___p80__;
  output variable_map_assume___p81__;
  output variable_map_assume___p82__;
  output variable_map_assume___p83__;
  output variable_map_assume___p84__;
  output variable_map_assume___p85__;
  output variable_map_assume___p86__;
  output variable_map_assume___p87__;
  output variable_map_assume___p88__;
  output variable_map_assume___p89__;
  output variable_map_assume___p90__;
  output variable_map_assume___p91__;
  output variable_map_assume___p92__;
  output variable_map_assume___p93__;
  output variable_map_assume___p94__;
  output variable_map_assume___p95__;
  output variable_map_assume___p96__;
  output variable_map_assume___p97__;
  output variable_map_assume___p98__;
  output variable_map_assume___p99__;
  output [7:0] __CYCLE_CNT__;
  output __START__;
  output __STARTED__;
  output __ENDED__;
  output __2ndENDED__;
  output __RESETED__;
  output [31:0] __auxvar10__recorder;
  output [31:0] __auxvar10__recorder_sn_vhold;
  output __auxvar10__recorder_sn_condmet;
  output [31:0] __auxvar11__recorder;
  output [31:0] __auxvar11__recorder_sn_vhold;
  output __auxvar11__recorder_sn_condmet;
  output [31:0] __auxvar12__recorder;
  output [31:0] __auxvar12__recorder_sn_vhold;
  output __auxvar12__recorder_sn_condmet;
  output [31:0] __auxvar13__recorder;
  output [31:0] __auxvar13__recorder_sn_vhold;
  output __auxvar13__recorder_sn_condmet;
  output [31:0] __auxvar14__recorder;
  output [31:0] __auxvar14__recorder_sn_vhold;
  output __auxvar14__recorder_sn_condmet;
  output [31:0] __auxvar15__recorder;
  output [31:0] __auxvar15__recorder_sn_vhold;
  output __auxvar15__recorder_sn_condmet;
  output [31:0] __auxvar16__recorder;
  output [31:0] __auxvar16__recorder_sn_vhold;
  output __auxvar16__recorder_sn_condmet;
  output [31:0] __auxvar17__recorder;
  output [31:0] __auxvar17__recorder_sn_vhold;
  output __auxvar17__recorder_sn_condmet;
  output [31:0] __auxvar18__recorder;
  output [31:0] __auxvar18__recorder_sn_vhold;
  output __auxvar18__recorder_sn_condmet;
  output [31:0] __auxvar19__recorder;
  output [31:0] __auxvar19__recorder_sn_vhold;
  output __auxvar19__recorder_sn_condmet;
  output [31:0] __auxvar1__recorder;
  output [31:0] __auxvar1__recorder_sn_vhold;
  output __auxvar1__recorder_sn_condmet;
  output [31:0] __auxvar20__recorder;
  output [31:0] __auxvar20__recorder_sn_vhold;
  output __auxvar20__recorder_sn_condmet;
  output [31:0] __auxvar21__recorder;
  output [31:0] __auxvar21__recorder_sn_vhold;
  output __auxvar21__recorder_sn_condmet;
  output [31:0] __auxvar22__recorder;
  output [31:0] __auxvar22__recorder_sn_vhold;
  output __auxvar22__recorder_sn_condmet;
  output [31:0] __auxvar23__recorder;
  output [31:0] __auxvar23__recorder_sn_vhold;
  output __auxvar23__recorder_sn_condmet;
  output [31:0] __auxvar24__recorder;
  output [31:0] __auxvar24__recorder_sn_vhold;
  output __auxvar24__recorder_sn_condmet;
  output [31:0] __auxvar25__recorder;
  output [31:0] __auxvar25__recorder_sn_vhold;
  output __auxvar25__recorder_sn_condmet;
  output [31:0] __auxvar26__recorder;
  output [31:0] __auxvar26__recorder_sn_vhold;
  output __auxvar26__recorder_sn_condmet;
  output [31:0] __auxvar27__recorder;
  output [31:0] __auxvar27__recorder_sn_vhold;
  output __auxvar27__recorder_sn_condmet;
  output [31:0] __auxvar28__recorder;
  output [31:0] __auxvar28__recorder_sn_vhold;
  output __auxvar28__recorder_sn_condmet;
  output [31:0] __auxvar29__recorder;
  output [31:0] __auxvar29__recorder_sn_vhold;
  output __auxvar29__recorder_sn_condmet;
  output [31:0] __auxvar2__recorder;
  output [31:0] __auxvar2__recorder_sn_vhold;
  output __auxvar2__recorder_sn_condmet;
  output [31:0] __auxvar30__recorder;
  output [31:0] __auxvar30__recorder_sn_vhold;
  output __auxvar30__recorder_sn_condmet;
  output [31:0] __auxvar31__recorder;
  output [31:0] __auxvar31__recorder_sn_vhold;
  output __auxvar31__recorder_sn_condmet;
  output [31:0] __auxvar32__recorder;
  output [31:0] __auxvar32__recorder_sn_vhold;
  output __auxvar32__recorder_sn_condmet;
  output [31:0] __auxvar33__recorder;
  output [31:0] __auxvar33__recorder_sn_vhold;
  output __auxvar33__recorder_sn_condmet;
  output __auxvar34__recorder;
  output __auxvar34__recorder_sn_vhold;
  output __auxvar34__recorder_sn_condmet;
  output [2:0] __auxvar35__recorder;
  output [2:0] __auxvar35__recorder_sn_vhold;
  output __auxvar35__recorder_sn_condmet;
  output __auxvar36__recorder;
  output __auxvar36__recorder_sn_vhold;
  output __auxvar36__recorder_sn_condmet;
  output [31:0] __auxvar37__recorder;
  output [31:0] __auxvar37__recorder_sn_vhold;
  output __auxvar37__recorder_sn_condmet;
  output [31:0] __auxvar38__recorder;
  output [31:0] __auxvar38__recorder_sn_vhold;
  output __auxvar38__recorder_sn_condmet;
  output [31:0] __auxvar3__recorder;
  output [31:0] __auxvar3__recorder_sn_vhold;
  output __auxvar3__recorder_sn_condmet;
  output [31:0] __auxvar4__recorder;
  output [31:0] __auxvar4__recorder_sn_vhold;
  output __auxvar4__recorder_sn_condmet;
  output [31:0] __auxvar5__recorder;
  output [31:0] __auxvar5__recorder_sn_vhold;
  output __auxvar5__recorder_sn_condmet;
  output [31:0] __auxvar6__recorder;
  output [31:0] __auxvar6__recorder_sn_vhold;
  output __auxvar6__recorder_sn_condmet;
  output [31:0] __auxvar7__recorder;
  output [31:0] __auxvar7__recorder_sn_vhold;
  output __auxvar7__recorder_sn_condmet;
  output [31:0] __auxvar8__recorder;
  output [31:0] __auxvar8__recorder_sn_vhold;
  output __auxvar8__recorder_sn_condmet;
  output [31:0] __auxvar9__recorder;
  output [31:0] __auxvar9__recorder_sn_vhold;
  output __auxvar9__recorder_sn_condmet;
  output __auxvar0__delay_d_1;
  output monitor_s1_already;
  output monitor_s2;
  output monitor_s3;
  output monitor_s4;

  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__csr_regfile__DOT__rg_nmi;
  wire RTL__DOT__csr_regfile__DOT__rg_state;
  wire RTL__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_10_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_11_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_12_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_13_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_14_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_15_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_16_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_17_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_18_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_19_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_1_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_20_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_21_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_22_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_23_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_24_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_25_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_26_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_27_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_28_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_29_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_2_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_30_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_31_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_3_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_4_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_5_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_6_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_7_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_8_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_9_;
  wire RTL__DOT__near_mem$EN_dmem_req;
  wire RTL__DOT__near_mem$dmem_exc;
  wire [31:0] RTL__DOT__near_mem$dmem_req_addr;
  wire [2:0] RTL__DOT__near_mem$dmem_req_f3;
  wire RTL__DOT__near_mem$dmem_req_op;
  wire [63:0] RTL__DOT__near_mem$dmem_req_store_value;
  wire [63:0] RTL__DOT__near_mem$dmem_word64;
  wire [31:0] RTL__DOT__near_mem$imem_instr;
  wire [31:0] RTL__DOT__near_mem$imem_pc;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire [31:0] RTL__DOT__near_mem__DOT__dcache__DOT__rg_addr;
  wire [31:0] RTL__DOT__near_mem__DOT__dcache__DOT__rg_pa;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire [1:0] RTL__DOT__rg_cur_priv;
  wire RTL__DOT__rg_retiring$EN;
  wire RTL__DOT__rg_run_on_reset;
  wire [3:0] RTL__DOT__rg_state;
  wire [31:0] RTL__DOT__rg_trap_instr;
  wire RTL__DOT__s1_to_s2$D_IN;
  wire RTL__DOT__s1_to_s2$EN;
  wire RTL__DOT__s2_to_s3$D_IN;
  wire RTL__DOT__s2_to_s3$EN;
  wire RTL__DOT__s3_deq$D_IN;
  wire RTL__DOT__s3_deq$EN;
  wire RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage1_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage1_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage1_rg_full;
  wire RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage2_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage2_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage2_rg_full;
  wire [168:0] RTL__DOT__stage2_rg_stage2;
  wire RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage3_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage3_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage3_rg_full;
  reg __2ndENDED__;
  wire __2ndIEND__;
  reg [7:0] __CYCLE_CNT__;
  wire __EDCOND__;
  reg __ENDED__;
  wire __IEND__;
  wire [31:0] __ILA_I_inst;
  wire [31:0] __ILA_SO_load_addr;
  wire [31:0] __ILA_SO_load_data;
  wire __ILA_SO_load_en;
  wire [2:0] __ILA_SO_load_size;
  wire [31:0] __ILA_SO_pc;
  wire [31:0] __ILA_SO_store_addr;
  wire [31:0] __ILA_SO_store_data;
  wire __ILA_SO_store_en;
  wire [2:0] __ILA_SO_store_size;
  wire [31:0] __ILA_SO_x0;
  wire [31:0] __ILA_SO_x1;
  wire [31:0] __ILA_SO_x10;
  wire [31:0] __ILA_SO_x11;
  wire [31:0] __ILA_SO_x12;
  wire [31:0] __ILA_SO_x13;
  wire [31:0] __ILA_SO_x14;
  wire [31:0] __ILA_SO_x15;
  wire [31:0] __ILA_SO_x16;
  wire [31:0] __ILA_SO_x17;
  wire [31:0] __ILA_SO_x18;
  wire [31:0] __ILA_SO_x19;
  wire [31:0] __ILA_SO_x2;
  wire [31:0] __ILA_SO_x20;
  wire [31:0] __ILA_SO_x21;
  wire [31:0] __ILA_SO_x22;
  wire [31:0] __ILA_SO_x23;
  wire [31:0] __ILA_SO_x24;
  wire [31:0] __ILA_SO_x25;
  wire [31:0] __ILA_SO_x26;
  wire [31:0] __ILA_SO_x27;
  wire [31:0] __ILA_SO_x28;
  wire [31:0] __ILA_SO_x29;
  wire [31:0] __ILA_SO_x3;
  wire [31:0] __ILA_SO_x30;
  wire [31:0] __ILA_SO_x31;
  wire [31:0] __ILA_SO_x4;
  wire [31:0] __ILA_SO_x5;
  wire [31:0] __ILA_SO_x6;
  wire [31:0] __ILA_SO_x7;
  wire [31:0] __ILA_SO_x8;
  wire [31:0] __ILA_SO_x9;
  wire __ILA_riscv_decode_of_ADD__;
  wire __ILA_riscv_valid__;
  wire __ISSUE__;
  reg __RESETED__;
  reg __STARTED__;
  reg __START__;
  wire __VLG_II_m_external_interrupt_req_set_not_clear;
  wire __VLG_II_nmi_req_set_not_clear;
  wire __VLG_II_s_external_interrupt_req_set_not_clear;
  wire __VLG_II_software_interrupt_req_set_not_clear;
  wire __VLG_II_timer_interrupt_req_set_not_clear;
  wire __VLG_I_EN_hart0_server_reset_request_put;
  wire __VLG_I_EN_hart0_server_reset_response_get;
  wire __VLG_I_EN_set_verbosity;
  wire __VLG_I_dmem_master_arready;
  wire __VLG_I_dmem_master_awready;
  wire [3:0] __VLG_I_dmem_master_bid;
  wire [1:0] __VLG_I_dmem_master_bresp;
  wire __VLG_I_dmem_master_bvalid;
  wire [63:0] __VLG_I_dmem_master_rdata;
  wire [3:0] __VLG_I_dmem_master_rid;
  wire __VLG_I_dmem_master_rlast;
  wire [1:0] __VLG_I_dmem_master_rresp;
  wire __VLG_I_dmem_master_rvalid;
  wire __VLG_I_dmem_master_wready;
  wire __VLG_I_hart0_server_reset_request_put;
  wire __VLG_I_imem_master_arready;
  wire __VLG_I_imem_master_awready;
  wire [3:0] __VLG_I_imem_master_bid;
  wire [1:0] __VLG_I_imem_master_bresp;
  wire __VLG_I_imem_master_bvalid;
  wire [63:0] __VLG_I_imem_master_rdata;
  wire [3:0] __VLG_I_imem_master_rid;
  wire __VLG_I_imem_master_rlast;
  wire [1:0] __VLG_I_imem_master_rresp;
  wire __VLG_I_imem_master_rvalid;
  wire __VLG_I_imem_master_wready;
  wire [63:0] __VLG_I_set_verbosity_logdelay;
  wire [3:0] __VLG_I_set_verbosity_verbosity;
  wire __VLG_O_RDY_hart0_server_reset_request_put;
  wire __VLG_O_RDY_hart0_server_reset_response_get;
  wire __VLG_O_RDY_set_verbosity;
  wire [63:0] __VLG_O_dmem_master_araddr;
  wire [1:0] __VLG_O_dmem_master_arburst;
  wire [3:0] __VLG_O_dmem_master_arcache;
  wire [3:0] __VLG_O_dmem_master_arid;
  wire [7:0] __VLG_O_dmem_master_arlen;
  wire __VLG_O_dmem_master_arlock;
  wire [2:0] __VLG_O_dmem_master_arprot;
  wire [3:0] __VLG_O_dmem_master_arqos;
  wire [3:0] __VLG_O_dmem_master_arregion;
  wire [2:0] __VLG_O_dmem_master_arsize;
  wire __VLG_O_dmem_master_arvalid;
  wire [63:0] __VLG_O_dmem_master_awaddr;
  wire [1:0] __VLG_O_dmem_master_awburst;
  wire [3:0] __VLG_O_dmem_master_awcache;
  wire [3:0] __VLG_O_dmem_master_awid;
  wire [7:0] __VLG_O_dmem_master_awlen;
  wire __VLG_O_dmem_master_awlock;
  wire [2:0] __VLG_O_dmem_master_awprot;
  wire [3:0] __VLG_O_dmem_master_awqos;
  wire [3:0] __VLG_O_dmem_master_awregion;
  wire [2:0] __VLG_O_dmem_master_awsize;
  wire __VLG_O_dmem_master_awvalid;
  wire __VLG_O_dmem_master_bready;
  wire __VLG_O_dmem_master_rready;
  wire [63:0] __VLG_O_dmem_master_wdata;
  wire __VLG_O_dmem_master_wlast;
  wire [7:0] __VLG_O_dmem_master_wstrb;
  wire __VLG_O_dmem_master_wvalid;
  wire __VLG_O_hart0_server_reset_response_get;
  wire [63:0] __VLG_O_imem_master_araddr;
  wire [1:0] __VLG_O_imem_master_arburst;
  wire [3:0] __VLG_O_imem_master_arcache;
  wire [3:0] __VLG_O_imem_master_arid;
  wire [7:0] __VLG_O_imem_master_arlen;
  wire __VLG_O_imem_master_arlock;
  wire [2:0] __VLG_O_imem_master_arprot;
  wire [3:0] __VLG_O_imem_master_arqos;
  wire [3:0] __VLG_O_imem_master_arregion;
  wire [2:0] __VLG_O_imem_master_arsize;
  wire __VLG_O_imem_master_arvalid;
  wire [63:0] __VLG_O_imem_master_awaddr;
  wire [1:0] __VLG_O_imem_master_awburst;
  wire [3:0] __VLG_O_imem_master_awcache;
  wire [3:0] __VLG_O_imem_master_awid;
  wire [7:0] __VLG_O_imem_master_awlen;
  wire __VLG_O_imem_master_awlock;
  wire [2:0] __VLG_O_imem_master_awprot;
  wire [3:0] __VLG_O_imem_master_awqos;
  wire [3:0] __VLG_O_imem_master_awregion;
  wire [2:0] __VLG_O_imem_master_awsize;
  wire __VLG_O_imem_master_awvalid;
  wire __VLG_O_imem_master_bready;
  wire __VLG_O_imem_master_rready;
  wire [63:0] __VLG_O_imem_master_wdata;
  wire __VLG_O_imem_master_wlast;
  wire [7:0] __VLG_O_imem_master_wstrb;
  wire __VLG_O_imem_master_wvalid;
  wire [31:0] ____auxvar10__recorder_init__;
  wire [31:0] ____auxvar11__recorder_init__;
  wire [31:0] ____auxvar12__recorder_init__;
  wire [31:0] ____auxvar13__recorder_init__;
  wire [31:0] ____auxvar14__recorder_init__;
  wire [31:0] ____auxvar15__recorder_init__;
  wire [31:0] ____auxvar16__recorder_init__;
  wire [31:0] ____auxvar17__recorder_init__;
  wire [31:0] ____auxvar18__recorder_init__;
  wire [31:0] ____auxvar19__recorder_init__;
  wire [31:0] ____auxvar1__recorder_init__;
  wire [31:0] ____auxvar20__recorder_init__;
  wire [31:0] ____auxvar21__recorder_init__;
  wire [31:0] ____auxvar22__recorder_init__;
  wire [31:0] ____auxvar23__recorder_init__;
  wire [31:0] ____auxvar24__recorder_init__;
  wire [31:0] ____auxvar25__recorder_init__;
  wire [31:0] ____auxvar26__recorder_init__;
  wire [31:0] ____auxvar27__recorder_init__;
  wire [31:0] ____auxvar28__recorder_init__;
  wire [31:0] ____auxvar29__recorder_init__;
  wire [31:0] ____auxvar2__recorder_init__;
  wire [31:0] ____auxvar30__recorder_init__;
  wire [31:0] ____auxvar31__recorder_init__;
  wire [31:0] ____auxvar32__recorder_init__;
  wire [31:0] ____auxvar33__recorder_init__;
  wire ____auxvar34__recorder_init__;
  wire [2:0] ____auxvar35__recorder_init__;
  wire ____auxvar36__recorder_init__;
  wire [31:0] ____auxvar37__recorder_init__;
  wire [31:0] ____auxvar38__recorder_init__;
  wire [31:0] ____auxvar3__recorder_init__;
  wire [31:0] ____auxvar4__recorder_init__;
  wire [31:0] ____auxvar5__recorder_init__;
  wire [31:0] ____auxvar6__recorder_init__;
  wire [31:0] ____auxvar7__recorder_init__;
  wire [31:0] ____auxvar8__recorder_init__;
  wire [31:0] ____auxvar9__recorder_init__;
  wire __all_assert_wire__;
  wire __all_assume_wire__;
  wire __auxvar0__delay;
  wire __auxvar0__delay_d_0;
  reg __auxvar0__delay_d_1;
  reg [31:0] __auxvar10__recorder;
  wire __auxvar10__recorder_sn_cond;
  reg __auxvar10__recorder_sn_condmet;
  wire [31:0] __auxvar10__recorder_sn_value;
  reg [31:0] __auxvar10__recorder_sn_vhold;
  reg [31:0] __auxvar11__recorder;
  wire __auxvar11__recorder_sn_cond;
  reg __auxvar11__recorder_sn_condmet;
  wire [31:0] __auxvar11__recorder_sn_value;
  reg [31:0] __auxvar11__recorder_sn_vhold;
  reg [31:0] __auxvar12__recorder;
  wire __auxvar12__recorder_sn_cond;
  reg __auxvar12__recorder_sn_condmet;
  wire [31:0] __auxvar12__recorder_sn_value;
  reg [31:0] __auxvar12__recorder_sn_vhold;
  reg [31:0] __auxvar13__recorder;
  wire __auxvar13__recorder_sn_cond;
  reg __auxvar13__recorder_sn_condmet;
  wire [31:0] __auxvar13__recorder_sn_value;
  reg [31:0] __auxvar13__recorder_sn_vhold;
  reg [31:0] __auxvar14__recorder;
  wire __auxvar14__recorder_sn_cond;
  reg __auxvar14__recorder_sn_condmet;
  wire [31:0] __auxvar14__recorder_sn_value;
  reg [31:0] __auxvar14__recorder_sn_vhold;
  reg [31:0] __auxvar15__recorder;
  wire __auxvar15__recorder_sn_cond;
  reg __auxvar15__recorder_sn_condmet;
  wire [31:0] __auxvar15__recorder_sn_value;
  reg [31:0] __auxvar15__recorder_sn_vhold;
  reg [31:0] __auxvar16__recorder;
  wire __auxvar16__recorder_sn_cond;
  reg __auxvar16__recorder_sn_condmet;
  wire [31:0] __auxvar16__recorder_sn_value;
  reg [31:0] __auxvar16__recorder_sn_vhold;
  reg [31:0] __auxvar17__recorder;
  wire __auxvar17__recorder_sn_cond;
  reg __auxvar17__recorder_sn_condmet;
  wire [31:0] __auxvar17__recorder_sn_value;
  reg [31:0] __auxvar17__recorder_sn_vhold;
  reg [31:0] __auxvar18__recorder;
  wire __auxvar18__recorder_sn_cond;
  reg __auxvar18__recorder_sn_condmet;
  wire [31:0] __auxvar18__recorder_sn_value;
  reg [31:0] __auxvar18__recorder_sn_vhold;
  reg [31:0] __auxvar19__recorder;
  wire __auxvar19__recorder_sn_cond;
  reg __auxvar19__recorder_sn_condmet;
  wire [31:0] __auxvar19__recorder_sn_value;
  reg [31:0] __auxvar19__recorder_sn_vhold;
  reg [31:0] __auxvar1__recorder;
  wire __auxvar1__recorder_sn_cond;
  reg __auxvar1__recorder_sn_condmet;
  wire [31:0] __auxvar1__recorder_sn_value;
  reg [31:0] __auxvar1__recorder_sn_vhold;
  reg [31:0] __auxvar20__recorder;
  wire __auxvar20__recorder_sn_cond;
  reg __auxvar20__recorder_sn_condmet;
  wire [31:0] __auxvar20__recorder_sn_value;
  reg [31:0] __auxvar20__recorder_sn_vhold;
  reg [31:0] __auxvar21__recorder;
  wire __auxvar21__recorder_sn_cond;
  reg __auxvar21__recorder_sn_condmet;
  wire [31:0] __auxvar21__recorder_sn_value;
  reg [31:0] __auxvar21__recorder_sn_vhold;
  reg [31:0] __auxvar22__recorder;
  wire __auxvar22__recorder_sn_cond;
  reg __auxvar22__recorder_sn_condmet;
  wire [31:0] __auxvar22__recorder_sn_value;
  reg [31:0] __auxvar22__recorder_sn_vhold;
  reg [31:0] __auxvar23__recorder;
  wire __auxvar23__recorder_sn_cond;
  reg __auxvar23__recorder_sn_condmet;
  wire [31:0] __auxvar23__recorder_sn_value;
  reg [31:0] __auxvar23__recorder_sn_vhold;
  reg [31:0] __auxvar24__recorder;
  wire __auxvar24__recorder_sn_cond;
  reg __auxvar24__recorder_sn_condmet;
  wire [31:0] __auxvar24__recorder_sn_value;
  reg [31:0] __auxvar24__recorder_sn_vhold;
  reg [31:0] __auxvar25__recorder;
  wire __auxvar25__recorder_sn_cond;
  reg __auxvar25__recorder_sn_condmet;
  wire [31:0] __auxvar25__recorder_sn_value;
  reg [31:0] __auxvar25__recorder_sn_vhold;
  reg [31:0] __auxvar26__recorder;
  wire __auxvar26__recorder_sn_cond;
  reg __auxvar26__recorder_sn_condmet;
  wire [31:0] __auxvar26__recorder_sn_value;
  reg [31:0] __auxvar26__recorder_sn_vhold;
  reg [31:0] __auxvar27__recorder;
  wire __auxvar27__recorder_sn_cond;
  reg __auxvar27__recorder_sn_condmet;
  wire [31:0] __auxvar27__recorder_sn_value;
  reg [31:0] __auxvar27__recorder_sn_vhold;
  reg [31:0] __auxvar28__recorder;
  wire __auxvar28__recorder_sn_cond;
  reg __auxvar28__recorder_sn_condmet;
  wire [31:0] __auxvar28__recorder_sn_value;
  reg [31:0] __auxvar28__recorder_sn_vhold;
  reg [31:0] __auxvar29__recorder;
  wire __auxvar29__recorder_sn_cond;
  reg __auxvar29__recorder_sn_condmet;
  wire [31:0] __auxvar29__recorder_sn_value;
  reg [31:0] __auxvar29__recorder_sn_vhold;
  reg [31:0] __auxvar2__recorder;
  wire __auxvar2__recorder_sn_cond;
  reg __auxvar2__recorder_sn_condmet;
  wire [31:0] __auxvar2__recorder_sn_value;
  reg [31:0] __auxvar2__recorder_sn_vhold;
  reg [31:0] __auxvar30__recorder;
  wire __auxvar30__recorder_sn_cond;
  reg __auxvar30__recorder_sn_condmet;
  wire [31:0] __auxvar30__recorder_sn_value;
  reg [31:0] __auxvar30__recorder_sn_vhold;
  reg [31:0] __auxvar31__recorder;
  wire __auxvar31__recorder_sn_cond;
  reg __auxvar31__recorder_sn_condmet;
  wire [31:0] __auxvar31__recorder_sn_value;
  reg [31:0] __auxvar31__recorder_sn_vhold;
  reg [31:0] __auxvar32__recorder;
  wire __auxvar32__recorder_sn_cond;
  reg __auxvar32__recorder_sn_condmet;
  wire [31:0] __auxvar32__recorder_sn_value;
  reg [31:0] __auxvar32__recorder_sn_vhold;
  reg [31:0] __auxvar33__recorder;
  wire __auxvar33__recorder_sn_cond;
  reg __auxvar33__recorder_sn_condmet;
  wire [31:0] __auxvar33__recorder_sn_value;
  reg [31:0] __auxvar33__recorder_sn_vhold;
  reg __auxvar34__recorder;
  wire __auxvar34__recorder_sn_cond;
  reg __auxvar34__recorder_sn_condmet;
  wire __auxvar34__recorder_sn_value;
  reg __auxvar34__recorder_sn_vhold;
  reg [2:0] __auxvar35__recorder;
  wire __auxvar35__recorder_sn_cond;
  reg __auxvar35__recorder_sn_condmet;
  wire [2:0] __auxvar35__recorder_sn_value;
  reg [2:0] __auxvar35__recorder_sn_vhold;
  reg __auxvar36__recorder;
  wire __auxvar36__recorder_sn_cond;
  reg __auxvar36__recorder_sn_condmet;
  wire __auxvar36__recorder_sn_value;
  reg __auxvar36__recorder_sn_vhold;
  reg [31:0] __auxvar37__recorder;
  wire __auxvar37__recorder_sn_cond;
  reg __auxvar37__recorder_sn_condmet;
  wire [31:0] __auxvar37__recorder_sn_value;
  reg [31:0] __auxvar37__recorder_sn_vhold;
  reg [31:0] __auxvar38__recorder;
  wire __auxvar38__recorder_sn_cond;
  reg __auxvar38__recorder_sn_condmet;
  wire [31:0] __auxvar38__recorder_sn_value;
  reg [31:0] __auxvar38__recorder_sn_vhold;
  reg [31:0] __auxvar3__recorder;
  wire __auxvar3__recorder_sn_cond;
  reg __auxvar3__recorder_sn_condmet;
  wire [31:0] __auxvar3__recorder_sn_value;
  reg [31:0] __auxvar3__recorder_sn_vhold;
  reg [31:0] __auxvar4__recorder;
  wire __auxvar4__recorder_sn_cond;
  reg __auxvar4__recorder_sn_condmet;
  wire [31:0] __auxvar4__recorder_sn_value;
  reg [31:0] __auxvar4__recorder_sn_vhold;
  reg [31:0] __auxvar5__recorder;
  wire __auxvar5__recorder_sn_cond;
  reg __auxvar5__recorder_sn_condmet;
  wire [31:0] __auxvar5__recorder_sn_value;
  reg [31:0] __auxvar5__recorder_sn_vhold;
  reg [31:0] __auxvar6__recorder;
  wire __auxvar6__recorder_sn_cond;
  reg __auxvar6__recorder_sn_condmet;
  wire [31:0] __auxvar6__recorder_sn_value;
  reg [31:0] __auxvar6__recorder_sn_vhold;
  reg [31:0] __auxvar7__recorder;
  wire __auxvar7__recorder_sn_cond;
  reg __auxvar7__recorder_sn_condmet;
  wire [31:0] __auxvar7__recorder_sn_value;
  reg [31:0] __auxvar7__recorder_sn_vhold;
  reg [31:0] __auxvar8__recorder;
  wire __auxvar8__recorder_sn_cond;
  reg __auxvar8__recorder_sn_condmet;
  wire [31:0] __auxvar8__recorder_sn_value;
  reg [31:0] __auxvar8__recorder_sn_vhold;
  reg [31:0] __auxvar9__recorder;
  wire __auxvar9__recorder_sn_cond;
  reg __auxvar9__recorder_sn_condmet;
  wire [31:0] __auxvar9__recorder_sn_value;
  reg [31:0] __auxvar9__recorder_sn_vhold;
  wire __sanitycheck_wire__;
  wire clk;
  wire dummy_reset;
  wire end_of_pipeline;
  wire input_map_assume___p0__;
  wire invariant_assume__p10__;
  wire invariant_assume__p11__;
  wire invariant_assume__p12__;
  wire invariant_assume__p13__;
  wire invariant_assume__p14__;
  wire invariant_assume__p15__;
  wire invariant_assume__p16__;
  wire invariant_assume__p17__;
  wire invariant_assume__p18__;
  wire invariant_assume__p19__;
  wire invariant_assume__p1__;
  wire invariant_assume__p20__;
  wire invariant_assume__p21__;
  wire invariant_assume__p22__;
  wire invariant_assume__p23__;
  wire invariant_assume__p24__;
  wire invariant_assume__p25__;
  wire invariant_assume__p26__;
  wire invariant_assume__p27__;
  wire invariant_assume__p28__;
  wire invariant_assume__p29__;
  wire invariant_assume__p2__;
  wire invariant_assume__p30__;
  wire invariant_assume__p31__;
  wire invariant_assume__p32__;
  wire invariant_assume__p3__;
  wire invariant_assume__p4__;
  wire invariant_assume__p5__;
  wire invariant_assume__p6__;
  wire invariant_assume__p7__;
  wire invariant_assume__p8__;
  wire invariant_assume__p9__;
  wire issue_decode__p33__;
  wire issue_valid__p34__;
  wire [31:0] mem_req_addr;
  wire mem_req_en;
  wire [2:0] mem_req_funct3;
  wire mem_req_op;
  wire [31:0] mem_req_rd_data;
  wire [31:0] mem_req_wd_data;
  wire monitor_s1;
  reg monitor_s1_already;
  wire monitor_s1_already_enter_cond;
  wire monitor_s1_already_exit_cond;
  reg monitor_s2;
  wire monitor_s2_enter_cond;
  wire monitor_s2_exit_cond;
  reg monitor_s3;
  wire monitor_s3_enter_cond;
  wire monitor_s3_exit_cond;
  reg monitor_s4;
  wire monitor_s4_enter_cond;
  wire monitor_s4_exit_cond;
  wire noreset__p35__;
  wire post_value_holder__p36__;
  wire post_value_holder__p37__;
  wire post_value_holder__p38__;
  wire post_value_holder__p39__;
  wire post_value_holder__p40__;
  wire post_value_holder__p41__;
  wire post_value_holder__p42__;
  wire post_value_holder__p43__;
  wire post_value_holder__p44__;
  wire post_value_holder__p45__;
  wire post_value_holder__p46__;
  wire post_value_holder__p47__;
  wire post_value_holder__p48__;
  wire post_value_holder__p49__;
  wire post_value_holder__p50__;
  wire post_value_holder__p51__;
  wire post_value_holder__p52__;
  wire post_value_holder__p53__;
  wire post_value_holder__p54__;
  wire post_value_holder__p55__;
  wire post_value_holder__p56__;
  wire post_value_holder__p57__;
  wire post_value_holder__p58__;
  wire post_value_holder__p59__;
  wire post_value_holder__p60__;
  wire post_value_holder__p61__;
  wire post_value_holder__p62__;
  wire post_value_holder__p63__;
  wire post_value_holder__p64__;
  wire post_value_holder__p65__;
  wire post_value_holder__p66__;
  wire post_value_holder__p67__;
  wire post_value_holder__p68__;
  wire post_value_holder__p69__;
  wire post_value_holder__p70__;
  wire post_value_holder__p71__;
  wire post_value_holder__p72__;
  wire post_value_holder__p73__;
  wire post_value_holder_overly_constrained__p153__;
  wire post_value_holder_overly_constrained__p154__;
  wire post_value_holder_overly_constrained__p155__;
  wire post_value_holder_overly_constrained__p156__;
  wire post_value_holder_overly_constrained__p157__;
  wire post_value_holder_overly_constrained__p158__;
  wire post_value_holder_overly_constrained__p159__;
  wire post_value_holder_overly_constrained__p160__;
  wire post_value_holder_overly_constrained__p161__;
  wire post_value_holder_overly_constrained__p162__;
  wire post_value_holder_overly_constrained__p163__;
  wire post_value_holder_overly_constrained__p164__;
  wire post_value_holder_overly_constrained__p165__;
  wire post_value_holder_overly_constrained__p166__;
  wire post_value_holder_overly_constrained__p167__;
  wire post_value_holder_overly_constrained__p168__;
  wire post_value_holder_overly_constrained__p169__;
  wire post_value_holder_overly_constrained__p170__;
  wire post_value_holder_overly_constrained__p171__;
  wire post_value_holder_overly_constrained__p172__;
  wire post_value_holder_overly_constrained__p173__;
  wire post_value_holder_overly_constrained__p174__;
  wire post_value_holder_overly_constrained__p175__;
  wire post_value_holder_overly_constrained__p176__;
  wire post_value_holder_overly_constrained__p177__;
  wire post_value_holder_overly_constrained__p178__;
  wire post_value_holder_overly_constrained__p179__;
  wire post_value_holder_overly_constrained__p180__;
  wire post_value_holder_overly_constrained__p181__;
  wire post_value_holder_overly_constrained__p182__;
  wire post_value_holder_overly_constrained__p183__;
  wire post_value_holder_overly_constrained__p184__;
  wire post_value_holder_overly_constrained__p185__;
  wire post_value_holder_overly_constrained__p186__;
  wire post_value_holder_overly_constrained__p187__;
  wire post_value_holder_overly_constrained__p188__;
  wire post_value_holder_overly_constrained__p189__;
  wire post_value_holder_overly_constrained__p190__;
  wire post_value_holder_triggered__p191__;
  wire post_value_holder_triggered__p192__;
  wire post_value_holder_triggered__p193__;
  wire post_value_holder_triggered__p194__;
  wire post_value_holder_triggered__p195__;
  wire post_value_holder_triggered__p196__;
  wire post_value_holder_triggered__p197__;
  wire post_value_holder_triggered__p198__;
  wire post_value_holder_triggered__p199__;
  wire post_value_holder_triggered__p200__;
  wire post_value_holder_triggered__p201__;
  wire post_value_holder_triggered__p202__;
  wire post_value_holder_triggered__p203__;
  wire post_value_holder_triggered__p204__;
  wire post_value_holder_triggered__p205__;
  wire post_value_holder_triggered__p206__;
  wire post_value_holder_triggered__p207__;
  wire post_value_holder_triggered__p208__;
  wire post_value_holder_triggered__p209__;
  wire post_value_holder_triggered__p210__;
  wire post_value_holder_triggered__p211__;
  wire post_value_holder_triggered__p212__;
  wire post_value_holder_triggered__p213__;
  wire post_value_holder_triggered__p214__;
  wire post_value_holder_triggered__p215__;
  wire post_value_holder_triggered__p216__;
  wire post_value_holder_triggered__p217__;
  wire post_value_holder_triggered__p218__;
  wire post_value_holder_triggered__p219__;
  wire post_value_holder_triggered__p220__;
  wire post_value_holder_triggered__p221__;
  wire post_value_holder_triggered__p222__;
  wire post_value_holder_triggered__p223__;
  wire post_value_holder_triggered__p224__;
  wire post_value_holder_triggered__p225__;
  wire post_value_holder_triggered__p226__;
  wire post_value_holder_triggered__p227__;
  wire post_value_holder_triggered__p228__;
  wire rfassumptions__p74__;
  wire rfassumptions__p75__;
  wire rfassumptions__p76__;
  wire rst;
  wire s2_enter;
  wire s2_exit;
  wire s3_enter;
  wire s3_exit;
  wire s4_enter;
  wire variable_map_assert__p118__;
  wire variable_map_assert__p119__;
  wire variable_map_assert__p120__;
  wire variable_map_assert__p121__;
  wire variable_map_assert__p122__;
  wire variable_map_assert__p123__;
  wire variable_map_assert__p124__;
  wire variable_map_assert__p125__;
  wire variable_map_assert__p126__;
  wire variable_map_assert__p127__;
  wire variable_map_assert__p128__;
  wire variable_map_assert__p129__;
  wire variable_map_assert__p130__;
  wire variable_map_assert__p131__;
  wire variable_map_assert__p132__;
  wire variable_map_assert__p133__;
  wire variable_map_assert__p134__;
  wire variable_map_assert__p135__;
  wire variable_map_assert__p136__;
  wire variable_map_assert__p137__;
  wire variable_map_assert__p138__;
  wire variable_map_assert__p139__;
  wire variable_map_assert__p140__;
  wire variable_map_assert__p141__;
  wire variable_map_assert__p142__;
  wire variable_map_assert__p143__;
  wire variable_map_assert__p144__;
  wire variable_map_assert__p145__;
  wire variable_map_assert__p146__;
  wire variable_map_assert__p147__;
  wire variable_map_assert__p148__;
  wire variable_map_assert__p149__;
  wire variable_map_assert__p150__;
  wire variable_map_assert__p151__;
  wire variable_map_assert__p152__;
  wire variable_map_assume___p100__;
  wire variable_map_assume___p101__;
  wire variable_map_assume___p102__;
  wire variable_map_assume___p103__;
  wire variable_map_assume___p104__;
  wire variable_map_assume___p105__;
  wire variable_map_assume___p106__;
  wire variable_map_assume___p107__;
  wire variable_map_assume___p108__;
  wire variable_map_assume___p109__;
  wire variable_map_assume___p110__;
  wire variable_map_assume___p111__;
  wire variable_map_assume___p112__;
  wire variable_map_assume___p113__;
  wire variable_map_assume___p114__;
  wire variable_map_assume___p115__;
  wire variable_map_assume___p116__;
  wire variable_map_assume___p117__;
  wire variable_map_assume___p77__;
  wire variable_map_assume___p78__;
  wire variable_map_assume___p79__;
  wire variable_map_assume___p80__;
  wire variable_map_assume___p81__;
  wire variable_map_assume___p82__;
  wire variable_map_assume___p83__;
  wire variable_map_assume___p84__;
  wire variable_map_assume___p85__;
  wire variable_map_assume___p86__;
  wire variable_map_assume___p87__;
  wire variable_map_assume___p88__;
  wire variable_map_assume___p89__;
  wire variable_map_assume___p90__;
  wire variable_map_assume___p91__;
  wire variable_map_assume___p92__;
  wire variable_map_assume___p93__;
  wire variable_map_assume___p94__;
  wire variable_map_assume___p95__;
  wire variable_map_assume___p96__;
  wire variable_map_assume___p97__;
  wire variable_map_assume___p98__;
  wire variable_map_assume___p99__;


  assign __VLG_II_m_external_interrupt_req_set_not_clear = 1'b0;
  assign __VLG_II_nmi_req_set_not_clear = 1'b0;
  assign __VLG_II_s_external_interrupt_req_set_not_clear = 1'b0;
  assign __VLG_II_software_interrupt_req_set_not_clear = 1'b0;
  assign __VLG_II_timer_interrupt_req_set_not_clear = 1'b0;
  assign monitor_s1_already_exit_cond = 1'b0;
  assign monitor_s4_exit_cond = 1'b0;

  assign __auxvar37__recorder_sn_value = RTL__DOT__near_mem$dmem_word64[31:0];
  assign __auxvar38__recorder_sn_value = RTL__DOT__near_mem$dmem_req_store_value[31:0];
  assign invariant_assume__p1__ = (~|(({31'h00000000, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p2__ = (~|(({31'h00000000, RTL__DOT__f_reset_reqs__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__f_reset_reqs__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p3__ = (~|(({31'h00000000, RTL__DOT__f_reset_rsps__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__f_reset_rsps__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p4__ = (~|(({31'h00000000, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p5__ = (~|(({31'h00000000, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p6__ = (~|(({31'h00000000, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p7__ = (~|(({31'h00000000, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p8__ = (~|(({31'h00000000, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p9__ = (~|(({31'h00000000, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p10__ = (~|(({31'h00000000, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p11__ = (~|(({31'h00000000, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p12__ = (~|(({31'h00000000, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p13__ = (~|(({31'h00000000, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p14__ = (~|(({31'h00000000, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p15__ = (~|(({31'h00000000, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p16__ = (~|(({31'h00000000, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p17__ = (~|(({31'h00000000, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg} == 32'h00000000)));
  assign invariant_assume__p18__ = (~|(({31'h00000000, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p19__ = (~|(({31'h00000000, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p20__ = (~|(({31'h00000000, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p21__ = (~|(({31'h00000000, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p22__ = (~|(({31'h00000000, RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__stage1_f_reset_reqs__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p23__ = (~|(({31'h00000000, RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__stage1_f_reset_rsps__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p24__ = (~|(({31'h00000000, RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__stage2_f_reset_reqs__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p25__ = (~|(({31'h00000000, RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__stage2_f_reset_rsps__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p26__ = (~|(({31'h00000000, RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__stage3_f_reset_reqs__DOT__full_reg} == 32'h00000000)));
  assign invariant_assume__p27__ = (~|(({31'h00000000, RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg} == 32'h00000000) & ({31'h00000000, RTL__DOT__stage3_f_reset_rsps__DOT__full_reg} == 32'h00000000)));
  assign rfassumptions__p74__ = (__ILA_SO_pc[1:0] == 2'h0);
  assign rfassumptions__p75__ = (RTL__DOT__near_mem$imem_pc[1:0] == 2'h0);
  assign __2ndIEND__ = ((__ENDED__ & __EDCOND__) & (~ __2ndENDED__));
  assign __auxvar0__delay = __auxvar0__delay_d_1;
  assign __EDCOND__ = (end_of_pipeline & __STARTED__);
  assign __IEND__ = ((((end_of_pipeline & __STARTED__) & __RESETED__) & (~|__ENDED__)) & 1'b1);
  assign __auxvar10__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar10__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_17_;
  assign __auxvar11__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar11__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_18_;
  assign __auxvar12__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar12__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_19_;
  assign __auxvar13__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar13__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_2_;
  assign __auxvar14__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar14__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_20_;
  assign __auxvar15__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar15__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_21_;
  assign __auxvar16__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar16__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_22_;
  assign __auxvar17__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar17__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_23_;
  assign __auxvar18__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar18__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_24_;
  assign __auxvar19__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar19__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_25_;
  assign __auxvar1__recorder_sn_cond = ((monitor_s2 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar1__recorder_sn_value = RTL__DOT__near_mem$imem_pc;
  assign __auxvar20__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar20__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_26_;
  assign __auxvar21__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar21__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_27_;
  assign __auxvar22__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar22__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_28_;
  assign __auxvar23__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar23__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_29_;
  assign __auxvar24__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar24__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_3_;
  assign __auxvar25__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar25__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_30_;
  assign __auxvar26__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar26__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_31_;
  assign __auxvar27__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar27__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_4_;
  assign __auxvar28__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar28__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_5_;
  assign __auxvar29__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar29__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_6_;
  assign __auxvar2__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar2__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_1_;
  assign __auxvar30__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar30__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_7_;
  assign __auxvar31__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar31__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_8_;
  assign __auxvar32__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar32__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_9_;
  assign __auxvar33__recorder_sn_cond = ((monitor_s1 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar33__recorder_sn_value = RTL__DOT__near_mem$dmem_req_addr;
  assign __auxvar34__recorder_sn_cond = ((monitor_s1 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar34__recorder_sn_value = RTL__DOT__near_mem$EN_dmem_req;
  assign __auxvar35__recorder_sn_cond = ((monitor_s1 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar35__recorder_sn_value = RTL__DOT__near_mem$dmem_req_f3;
  assign __auxvar36__recorder_sn_cond = ((monitor_s1 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar36__recorder_sn_value = RTL__DOT__near_mem$dmem_req_op;
  assign __auxvar37__recorder_sn_cond = ((monitor_s2 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar38__recorder_sn_cond = ((monitor_s1 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar3__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar3__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_10_;
  assign __auxvar4__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar4__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_11_;
  assign __auxvar5__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar5__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_12_;
  assign __auxvar6__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar6__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_13_;
  assign __auxvar7__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar7__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_14_;
  assign __auxvar8__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar8__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_15_;
  assign __auxvar9__recorder_sn_cond = ((monitor_s3 & (__START__ | __STARTED__)) & (~|__ENDED__));
  assign __auxvar9__recorder_sn_value = RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_16_;
  assign __auxvar0__delay_d_0 = monitor_s4;
  assign end_of_pipeline = (monitor_s4 & (~ __auxvar0__delay));
  assign monitor_s1 = ((RTL__DOT__stage1_rg_full & (~ monitor_s1_already)) & __START__);
  assign s2_enter = ((RTL__DOT__s1_to_s2$D_IN & RTL__DOT__s1_to_s2$EN) & monitor_s1);
  assign s2_exit = (RTL__DOT__s2_to_s3$D_IN & RTL__DOT__s2_to_s3$EN);
  assign s3_enter = ((RTL__DOT__s2_to_s3$D_IN & RTL__DOT__s2_to_s3$EN) & monitor_s2);
  assign s3_exit = (RTL__DOT__s3_deq$EN & RTL__DOT__s3_deq$D_IN);
  assign s4_enter = (monitor_s3 & RTL__DOT__rg_retiring$EN);
  assign monitor_s1_already_enter_cond = (monitor_s1 & s2_enter);
  assign monitor_s2_enter_cond = s2_enter;
  assign monitor_s2_exit_cond = s2_exit;
  assign monitor_s3_enter_cond = s3_enter;
  assign monitor_s3_exit_cond = s3_exit;
  assign monitor_s4_enter_cond = s4_enter;
  assign mem_req_addr = __auxvar33__recorder;
  assign mem_req_en = __auxvar34__recorder;
  assign mem_req_funct3 = __auxvar35__recorder;
  assign mem_req_op = __auxvar36__recorder;
  assign mem_req_rd_data = __auxvar37__recorder;
  assign mem_req_wd_data = __auxvar38__recorder;
  assign input_map_assume___p0__ = ((~|__START__) | (__ILA_I_inst == RTL__DOT__near_mem$imem_instr));
  assign invariant_assume__p28__ = (((((~|(RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg ~^ 1'b1)) | (~|(RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg ~^ 1'b0))) | (~|(RTL__DOT__stage3_rg_full ~^ 1'b1))) & ((((~|(RTL__DOT__stage2_rg_full ~^ 1'b1)) | (~|(RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg ~^ 1'b1))) | (~|(RTL__DOT__f_reset_reqs__DOT__empty_reg ~^ 1'b0))) | (~|(RTL__DOT__f_reset_reqs__DOT__full_reg ~^ 1'b0)))) & (((~|(RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg ~^ 1'b1)) | (~|(RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg ~^ 1'b0))) | (~|(RTL__DOT__stage2_rg_full ~^ 1'b1))));
  assign invariant_assume__p29__ = (((~|(RTL__DOT__csr_regfile__DOT__rg_state ~^ 1'b1)) | (~|(RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg ~^ 1'b1))) & (RTL__DOT__stage2_f_reset_reqs__DOT__full_reg ~^ 1'b1));
  assign invariant_assume__p30__ = ((((~|(RTL__DOT__stage3_f_reset_rsps__DOT__full_reg ~^ 1'b1)) | (~|(RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg ~^ 1'b0))) | (~|(RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg ~^ 1'b0))) & ((((~|(RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg ~^ 1'b1)) | (~|(RTL__DOT__stage3_f_reset_rsps__DOT__full_reg ~^ 1'b1))) | (~|(RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg ~^ 1'b0))) | (~|(RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg ~^ 1'b0))));
  assign invariant_assume__p31__ = ((((((((((((~|(RTL__DOT__stage2_rg_full ~^ 1'b1)) | (~|(RTL__DOT__csr_regfile__DOT__rg_state ~^ 1'b1))) | (~|(RTL__DOT__rg_run_on_reset ~^ 1'b1))) | (~|(RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg ~^ 1'b1))) | (~|(RTL__DOT__stage3_f_reset_rsps__DOT__full_reg ~^ 1'b1))) | (~|RTL__DOT__stage2_rg_stage2[101])) | (RTL__DOT__near_mem__DOT__dcache__DOT__rg_addr[4] ~^ 1'b1)) | (~|(RTL__DOT__near_mem__DOT__dcache__DOT__rg_pa[4] ~^ 1'b1))) & (~|(RTL__DOT__csr_regfile__DOT__rg_nmi ~^ 1'b1))) & (((~|(RTL__DOT__rg_state[0] ~^ 1'b1)) | (~|(RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg ~^ 1'b0))) | (~|(RTL__DOT__csr_regfile__DOT__rg_state ~^ 1'b0)))) & ((((((RTL__DOT__stage3_f_reset_reqs__DOT__full_reg ~^ 1'b1) | (~|RTL__DOT__rg_trap_instr[22])) | (~|RTL__DOT__rg_trap_instr[20])) | (~|RTL__DOT__rg_trap_instr[26])) | (~|(RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg ~^ 1'b0))) | (~|(RTL__DOT__csr_regfile__DOT__rg_state ~^ 1'b0)))) & (((((~|(RTL__DOT__stage2_rg_full ~^ 1'b1)) | (~|(RTL__DOT__rg_run_on_reset ~^ 1'b1))) | (~|(RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg ~^ 1'b1))) | (~|(RTL__DOT__stage3_f_reset_rsps__DOT__full_reg ~^ 1'b1))) | (~|(RTL__DOT__stage3_f_reset_reqs__DOT__full_reg ~^ 1'b0))));
  assign invariant_assume__p32__ = ((((((~|(RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg ~^ 1'b0)) | (~|(RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg ~^ 1'b1))) | (~|(RTL__DOT__stage3_f_reset_rsps__DOT__full_reg ~^ 1'b1))) | (~|(RTL__DOT__stage3_f_reset_reqs__DOT__full_reg ~^ 1'b0))) & (((((~|(RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg ~^ 1'b0)) | (~|(RTL__DOT__rg_state[0] ~^ 1'b1))) | (~|(RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg ~^ 1'b1))) | (~|(RTL__DOT__stage3_f_reset_rsps__DOT__full_reg ~^ 1'b1))) | RTL__DOT__rg_run_on_reset)) & (((((((~|(RTL__DOT__stage2_rg_full ~^ 1'b1)) | (~|(RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg ~^ 1'b0))) | (~|(RTL__DOT__rg_state[0] ~^ 1'b1))) | (~|(RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg ~^ 1'b1))) | (~|(RTL__DOT__stage3_f_reset_rsps__DOT__full_reg ~^ 1'b1))) | RTL__DOT__stage2_rg_stage2[168]) | (~|RTL__DOT__rg_cur_priv[1])));
  assign issue_decode__p33__ = ((~|__START__) | __ILA_riscv_decode_of_ADD__);
  assign issue_valid__p34__ = ((~|__START__) | __ILA_riscv_valid__);
  assign noreset__p35__ = ((~|__RESETED__) | (~|dummy_reset));
  assign post_value_holder__p36__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar10__recorder_sn_condmet)) & monitor_s3)) | (__auxvar10__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_17_));
  assign post_value_holder__p37__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar11__recorder_sn_condmet)) & monitor_s3)) | (__auxvar11__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_18_));
  assign post_value_holder__p38__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar12__recorder_sn_condmet)) & monitor_s3)) | (__auxvar12__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_19_));
  assign post_value_holder__p39__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar13__recorder_sn_condmet)) & monitor_s3)) | (__auxvar13__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_2_));
  assign post_value_holder__p40__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar14__recorder_sn_condmet)) & monitor_s3)) | (__auxvar14__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_20_));
  assign post_value_holder__p41__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar15__recorder_sn_condmet)) & monitor_s3)) | (__auxvar15__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_21_));
  assign post_value_holder__p42__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar16__recorder_sn_condmet)) & monitor_s3)) | (__auxvar16__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_22_));
  assign post_value_holder__p43__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar17__recorder_sn_condmet)) & monitor_s3)) | (__auxvar17__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_23_));
  assign post_value_holder__p44__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar18__recorder_sn_condmet)) & monitor_s3)) | (__auxvar18__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_24_));
  assign post_value_holder__p45__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar19__recorder_sn_condmet)) & monitor_s3)) | (__auxvar19__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_25_));
  assign post_value_holder__p46__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar1__recorder_sn_condmet)) & monitor_s2)) | (__auxvar1__recorder == RTL__DOT__near_mem$imem_pc));
  assign post_value_holder__p47__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar20__recorder_sn_condmet)) & monitor_s3)) | (__auxvar20__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_26_));
  assign post_value_holder__p48__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar21__recorder_sn_condmet)) & monitor_s3)) | (__auxvar21__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_27_));
  assign post_value_holder__p49__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar22__recorder_sn_condmet)) & monitor_s3)) | (__auxvar22__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_28_));
  assign post_value_holder__p50__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar23__recorder_sn_condmet)) & monitor_s3)) | (__auxvar23__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_29_));
  assign post_value_holder__p51__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar24__recorder_sn_condmet)) & monitor_s3)) | (__auxvar24__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_3_));
  assign post_value_holder__p52__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar25__recorder_sn_condmet)) & monitor_s3)) | (__auxvar25__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_30_));
  assign post_value_holder__p53__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar26__recorder_sn_condmet)) & monitor_s3)) | (__auxvar26__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_31_));
  assign post_value_holder__p54__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar27__recorder_sn_condmet)) & monitor_s3)) | (__auxvar27__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_4_));
  assign post_value_holder__p55__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar28__recorder_sn_condmet)) & monitor_s3)) | (__auxvar28__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_5_));
  assign post_value_holder__p56__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar29__recorder_sn_condmet)) & monitor_s3)) | (__auxvar29__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_6_));
  assign post_value_holder__p57__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar2__recorder_sn_condmet)) & monitor_s3)) | (__auxvar2__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_1_));
  assign post_value_holder__p58__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar30__recorder_sn_condmet)) & monitor_s3)) | (__auxvar30__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_7_));
  assign post_value_holder__p59__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar31__recorder_sn_condmet)) & monitor_s3)) | (__auxvar31__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_8_));
  assign post_value_holder__p60__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar32__recorder_sn_condmet)) & monitor_s3)) | (__auxvar32__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_9_));
  assign post_value_holder__p61__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar33__recorder_sn_condmet)) & monitor_s1)) | (__auxvar33__recorder == RTL__DOT__near_mem$dmem_req_addr));
  assign post_value_holder__p62__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar34__recorder_sn_condmet)) & monitor_s1)) | (__auxvar34__recorder ~^ RTL__DOT__near_mem$EN_dmem_req));
  assign post_value_holder__p63__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar35__recorder_sn_condmet)) & monitor_s1)) | (__auxvar35__recorder == RTL__DOT__near_mem$dmem_req_f3));
  assign post_value_holder__p64__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar36__recorder_sn_condmet)) & monitor_s1)) | (__auxvar36__recorder ~^ RTL__DOT__near_mem$dmem_req_op));
  assign post_value_holder__p65__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar37__recorder_sn_condmet)) & monitor_s2)) | (__auxvar37__recorder == RTL__DOT__near_mem$dmem_word64[31:0]));
  assign post_value_holder__p66__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar38__recorder_sn_condmet)) & monitor_s1)) | (__auxvar38__recorder == RTL__DOT__near_mem$dmem_req_store_value[31:0]));
  assign post_value_holder__p67__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar3__recorder_sn_condmet)) & monitor_s3)) | (__auxvar3__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_10_));
  assign post_value_holder__p68__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar4__recorder_sn_condmet)) & monitor_s3)) | (__auxvar4__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_11_));
  assign post_value_holder__p69__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar5__recorder_sn_condmet)) & monitor_s3)) | (__auxvar5__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_12_));
  assign post_value_holder__p70__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar6__recorder_sn_condmet)) & monitor_s3)) | (__auxvar6__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_13_));
  assign post_value_holder__p71__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar7__recorder_sn_condmet)) & monitor_s3)) | (__auxvar7__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_14_));
  assign post_value_holder__p72__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar8__recorder_sn_condmet)) & monitor_s3)) | (__auxvar8__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_15_));
  assign post_value_holder__p73__ = ((~|(((__START__ | __STARTED__) & (~|__auxvar9__recorder_sn_condmet)) & monitor_s3)) | (__auxvar9__recorder == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_16_));
  assign rfassumptions__p76__ = ((~|monitor_s2) | ({31'h00000000, RTL__DOT__near_mem$dmem_exc} == 32'h00000000));
  assign variable_map_assume___p77__ = ((~|__START__) | ((~|(__IEND__ & __ILA_SO_load_en)) | (__ILA_SO_load_addr == mem_req_addr)));
  assign variable_map_assume___p78__ = ((~|__START__) | ((~|(__START__ & ((mem_req_en ~^ 1'b1) & (mem_req_op ~^ 1'b0)))) | (__ILA_SO_load_data == mem_req_rd_data)));
  assign variable_map_assume___p79__ = ((~|__START__) | ((~|__IEND__) | (__ILA_SO_load_en ~^ ((mem_req_en ~^ 1'b1) & (mem_req_op ~^ 1'b0)))));
  assign variable_map_assume___p80__ = ((~|__START__) | (((((~|((__IEND__ & __ILA_SO_load_en) & ({29'h00000000, __ILA_SO_load_size} == 32'h00000001))) | (({29'h00000000, mem_req_funct3} == 32'h00000000) | ({29'h00000000, mem_req_funct3} == 32'h00000004))) & ((~|((~|((__IEND__ & __ILA_SO_load_en) & ({29'h00000000, __ILA_SO_load_size} == 32'h00000001))) & ((__IEND__ & __ILA_SO_load_en) & ({29'h00000000, __ILA_SO_load_size} == 32'h00000002)))) | (({29'h00000000, mem_req_funct3} == 32'h00000001) | ({29'h00000000, mem_req_funct3} == 32'h00000005)))) & ((~|(((~|((__IEND__ & __ILA_SO_load_en) & ({29'h00000000, __ILA_SO_load_size} == 32'h00000001))) & (~|((~|((__IEND__ & __ILA_SO_load_en) & ({29'h00000000, __ILA_SO_load_size} == 32'h00000001))) & ((__IEND__ & __ILA_SO_load_en) & ({29'h00000000, __ILA_SO_load_size} == 32'h00000002))))) & ((__IEND__ & __ILA_SO_load_en) & ({29'h00000000, __ILA_SO_load_size} == 32'h00000004)))) | (({29'h00000000, mem_req_funct3} == 32'h00000002) | ({29'h00000000, mem_req_funct3} == 32'h00000006)))) & ((~|((((~|((__IEND__ & __ILA_SO_load_en) & ({29'h00000000, __ILA_SO_load_size} == 32'h00000001))) & (~|((~|((__IEND__ & __ILA_SO_load_en) & ({29'h00000000, __ILA_SO_load_size} == 32'h00000001))) & ((__IEND__ & __ILA_SO_load_en) & ({29'h00000000, __ILA_SO_load_size} == 32'h00000002))))) & (~|(((~|((__IEND__ & __ILA_SO_load_en) & ({29'h00000000, __ILA_SO_load_size} == 32'h00000001))) & (~|((~|((__IEND__ & __ILA_SO_load_en) & ({29'h00000000, __ILA_SO_load_size} == 32'h00000001))) & ((__IEND__ & __ILA_SO_load_en) & ({29'h00000000, __ILA_SO_load_size} == 32'h00000002))))) & ((__IEND__ & __ILA_SO_load_en) & ({29'h00000000, __ILA_SO_load_size} == 32'h00000004))))) & ((__IEND__ & __ILA_SO_load_en) & ({29'h00000000, __ILA_SO_load_size} == 32'h00000008)))) | ({29'h00000000, mem_req_funct3} == 32'h00000003))));
  assign variable_map_assume___p81__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_pc == RTL__DOT__near_mem$imem_pc)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_pc == __auxvar1__recorder))));
  assign variable_map_assume___p82__ = ((~|__START__) | ((~|(__IEND__ & __ILA_SO_store_en)) | (__ILA_SO_store_addr == mem_req_addr)));
  assign variable_map_assume___p83__ = ((~|__START__) | ((~|(__IEND__ & __ILA_SO_store_en)) | (__ILA_SO_store_data == mem_req_wd_data)));
  assign variable_map_assume___p84__ = ((~|__START__) | ((~|__IEND__) | (__ILA_SO_store_en ~^ ((mem_req_en ~^ 1'b1) & (mem_req_op ~^ 1'b1)))));
  assign variable_map_assume___p85__ = ((~|__START__) | (((((~|((__IEND__ & __ILA_SO_store_en) & ({29'h00000000, __ILA_SO_store_size} == 32'h00000001))) | (({29'h00000000, mem_req_funct3} == 32'h00000000) | ({29'h00000000, mem_req_funct3} == 32'h00000004))) & ((~|((~|((__IEND__ & __ILA_SO_store_en) & ({29'h00000000, __ILA_SO_store_size} == 32'h00000001))) & ((__IEND__ & __ILA_SO_store_en) & ({29'h00000000, __ILA_SO_store_size} == 32'h00000002)))) | (({29'h00000000, mem_req_funct3} == 32'h00000001) | ({29'h00000000, mem_req_funct3} == 32'h00000005)))) & ((~|(((~|((__IEND__ & __ILA_SO_store_en) & ({29'h00000000, __ILA_SO_store_size} == 32'h00000001))) & (~|((~|((__IEND__ & __ILA_SO_store_en) & ({29'h00000000, __ILA_SO_store_size} == 32'h00000001))) & ((__IEND__ & __ILA_SO_store_en) & ({29'h00000000, __ILA_SO_store_size} == 32'h00000002))))) & ((__IEND__ & __ILA_SO_store_en) & ({29'h00000000, __ILA_SO_store_size} == 32'h00000004)))) | (({29'h00000000, mem_req_funct3} == 32'h00000002) | ({29'h00000000, mem_req_funct3} == 32'h00000006)))) & ((~|((((~|((__IEND__ & __ILA_SO_store_en) & ({29'h00000000, __ILA_SO_store_size} == 32'h00000001))) & (~|((~|((__IEND__ & __ILA_SO_store_en) & ({29'h00000000, __ILA_SO_store_size} == 32'h00000001))) & ((__IEND__ & __ILA_SO_store_en) & ({29'h00000000, __ILA_SO_store_size} == 32'h00000002))))) & (~|(((~|((__IEND__ & __ILA_SO_store_en) & ({29'h00000000, __ILA_SO_store_size} == 32'h00000001))) & (~|((~|((__IEND__ & __ILA_SO_store_en) & ({29'h00000000, __ILA_SO_store_size} == 32'h00000001))) & ((__IEND__ & __ILA_SO_store_en) & ({29'h00000000, __ILA_SO_store_size} == 32'h00000002))))) & ((__IEND__ & __ILA_SO_store_en) & ({29'h00000000, __ILA_SO_store_size} == 32'h00000004))))) & ((__IEND__ & __ILA_SO_store_en) & ({29'h00000000, __ILA_SO_store_size} == 32'h00000008)))) | ({29'h00000000, mem_req_funct3} == 32'h00000003))));
  assign variable_map_assume___p86__ = ((~|__START__) | (__ILA_SO_x0 == 32'h00000000));
  assign variable_map_assume___p87__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x1 == __auxvar2__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x1 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_1_))));
  assign variable_map_assume___p88__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x10 == __auxvar3__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x10 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_10_))));
  assign variable_map_assume___p89__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x11 == __auxvar4__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x11 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_11_))));
  assign variable_map_assume___p90__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x12 == __auxvar5__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x12 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_12_))));
  assign variable_map_assume___p91__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x13 == __auxvar6__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x13 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_13_))));
  assign variable_map_assume___p92__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x14 == __auxvar7__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x14 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_14_))));
  assign variable_map_assume___p93__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x15 == __auxvar8__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x15 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_15_))));
  assign variable_map_assume___p94__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x16 == __auxvar9__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x16 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_16_))));
  assign variable_map_assume___p95__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x17 == __auxvar10__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x17 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_17_))));
  assign variable_map_assume___p96__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x18 == __auxvar11__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x18 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_18_))));
  assign variable_map_assume___p97__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x19 == __auxvar12__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x19 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_19_))));
  assign variable_map_assume___p98__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x2 == __auxvar13__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x2 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_2_))));
  assign variable_map_assume___p99__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x20 == __auxvar14__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x20 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_20_))));
  assign variable_map_assume___p100__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x21 == __auxvar15__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x21 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_21_))));
  assign variable_map_assume___p101__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x22 == __auxvar16__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x22 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_22_))));
  assign variable_map_assume___p102__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x23 == __auxvar17__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x23 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_23_))));
  assign variable_map_assume___p103__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x24 == __auxvar18__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x24 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_24_))));
  assign variable_map_assume___p104__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x25 == __auxvar19__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x25 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_25_))));
  assign variable_map_assume___p105__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x26 == __auxvar20__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x26 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_26_))));
  assign variable_map_assume___p106__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x27 == __auxvar21__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x27 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_27_))));
  assign variable_map_assume___p107__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x28 == __auxvar22__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x28 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_28_))));
  assign variable_map_assume___p108__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x29 == __auxvar23__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x29 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_29_))));
  assign variable_map_assume___p109__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x3 == __auxvar24__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x3 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_3_))));
  assign variable_map_assume___p110__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x30 == __auxvar25__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x30 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_30_))));
  assign variable_map_assume___p111__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x31 == __auxvar26__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x31 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_31_))));
  assign variable_map_assume___p112__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x4 == __auxvar27__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x4 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_4_))));
  assign variable_map_assume___p113__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x5 == __auxvar28__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x5 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_5_))));
  assign variable_map_assume___p114__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x6 == __auxvar29__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x6 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_6_))));
  assign variable_map_assume___p115__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x7 == __auxvar30__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x7 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_7_))));
  assign variable_map_assume___p116__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x8 == __auxvar31__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x8 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_8_))));
  assign variable_map_assume___p117__ = ((~|__START__) | (((~|__START__) | (__ILA_SO_x9 == __auxvar32__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x9 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_9_))));
  assign variable_map_assert__p118__ = ((~|__IEND__) | ((~|__IEND__) | (__ILA_SO_load_en ~^ ((mem_req_en ~^ 1'b1) & (mem_req_op ~^ 1'b0)))));
  assign variable_map_assert__p119__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_pc == RTL__DOT__near_mem$imem_pc)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_pc == __auxvar1__recorder))));
  assign variable_map_assert__p120__ = ((~|__IEND__) | ((~|__IEND__) | (__ILA_SO_store_en ~^ ((mem_req_en ~^ 1'b1) & (mem_req_op ~^ 1'b1)))));
  assign variable_map_assert__p121__ = ((~|__IEND__) | (__ILA_SO_x0 == 32'h00000000));
  assign variable_map_assert__p122__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x1 == __auxvar2__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x1 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_1_))));
  assign variable_map_assert__p123__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x10 == __auxvar3__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x10 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_10_))));
  assign variable_map_assert__p124__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x11 == __auxvar4__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x11 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_11_))));
  assign variable_map_assert__p125__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x12 == __auxvar5__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x12 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_12_))));
  assign variable_map_assert__p126__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x13 == __auxvar6__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x13 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_13_))));
  assign variable_map_assert__p127__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x14 == __auxvar7__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x14 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_14_))));
  assign variable_map_assert__p128__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x15 == __auxvar8__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x15 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_15_))));
  assign variable_map_assert__p129__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x16 == __auxvar9__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x16 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_16_))));
  assign variable_map_assert__p130__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x17 == __auxvar10__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x17 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_17_))));
  assign variable_map_assert__p131__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x18 == __auxvar11__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x18 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_18_))));
  assign variable_map_assert__p132__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x19 == __auxvar12__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x19 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_19_))));
  assign variable_map_assert__p133__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x2 == __auxvar13__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x2 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_2_))));
  assign variable_map_assert__p134__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x20 == __auxvar14__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x20 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_20_))));
  assign variable_map_assert__p135__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x21 == __auxvar15__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x21 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_21_))));
  assign variable_map_assert__p136__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x22 == __auxvar16__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x22 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_22_))));
  assign variable_map_assert__p137__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x23 == __auxvar17__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x23 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_23_))));
  assign variable_map_assert__p138__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x24 == __auxvar18__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x24 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_24_))));
  assign variable_map_assert__p139__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x25 == __auxvar19__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x25 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_25_))));
  assign variable_map_assert__p140__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x26 == __auxvar20__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x26 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_26_))));
  assign variable_map_assert__p141__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x27 == __auxvar21__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x27 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_27_))));
  assign variable_map_assert__p142__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x28 == __auxvar22__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x28 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_28_))));
  assign variable_map_assert__p143__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x29 == __auxvar23__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x29 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_29_))));
  assign variable_map_assert__p144__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x3 == __auxvar24__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x3 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_3_))));
  assign variable_map_assert__p145__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x30 == __auxvar25__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x30 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_30_))));
  assign variable_map_assert__p146__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x31 == __auxvar26__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x31 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_31_))));
  assign variable_map_assert__p147__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x4 == __auxvar27__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x4 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_4_))));
  assign variable_map_assert__p148__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x5 == __auxvar28__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x5 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_5_))));
  assign variable_map_assert__p149__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x6 == __auxvar29__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x6 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_6_))));
  assign variable_map_assert__p150__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x7 == __auxvar30__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x7 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_7_))));
  assign variable_map_assert__p151__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x8 == __auxvar31__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x8 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_8_))));
  assign variable_map_assert__p152__ = ((~|__IEND__) | (((~|__START__) | (__ILA_SO_x9 == __auxvar32__recorder)) & ((~|((~|__START__) & __IEND__)) | (__ILA_SO_x9 == RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_9_))));
  assign post_value_holder_overly_constrained__p153__ = ((~|(__auxvar10__recorder_sn_condmet & __auxvar10__recorder_sn_cond)) | (__auxvar10__recorder_sn_value == __auxvar10__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p154__ = ((~|(__auxvar11__recorder_sn_condmet & __auxvar11__recorder_sn_cond)) | (__auxvar11__recorder_sn_value == __auxvar11__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p155__ = ((~|(__auxvar12__recorder_sn_condmet & __auxvar12__recorder_sn_cond)) | (__auxvar12__recorder_sn_value == __auxvar12__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p156__ = ((~|(__auxvar13__recorder_sn_condmet & __auxvar13__recorder_sn_cond)) | (__auxvar13__recorder_sn_value == __auxvar13__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p157__ = ((~|(__auxvar14__recorder_sn_condmet & __auxvar14__recorder_sn_cond)) | (__auxvar14__recorder_sn_value == __auxvar14__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p158__ = ((~|(__auxvar15__recorder_sn_condmet & __auxvar15__recorder_sn_cond)) | (__auxvar15__recorder_sn_value == __auxvar15__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p159__ = ((~|(__auxvar16__recorder_sn_condmet & __auxvar16__recorder_sn_cond)) | (__auxvar16__recorder_sn_value == __auxvar16__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p160__ = ((~|(__auxvar17__recorder_sn_condmet & __auxvar17__recorder_sn_cond)) | (__auxvar17__recorder_sn_value == __auxvar17__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p161__ = ((~|(__auxvar18__recorder_sn_condmet & __auxvar18__recorder_sn_cond)) | (__auxvar18__recorder_sn_value == __auxvar18__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p162__ = ((~|(__auxvar19__recorder_sn_condmet & __auxvar19__recorder_sn_cond)) | (__auxvar19__recorder_sn_value == __auxvar19__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p163__ = ((~|(__auxvar1__recorder_sn_condmet & __auxvar1__recorder_sn_cond)) | (__auxvar1__recorder_sn_value == __auxvar1__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p164__ = ((~|(__auxvar20__recorder_sn_condmet & __auxvar20__recorder_sn_cond)) | (__auxvar20__recorder_sn_value == __auxvar20__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p165__ = ((~|(__auxvar21__recorder_sn_condmet & __auxvar21__recorder_sn_cond)) | (__auxvar21__recorder_sn_value == __auxvar21__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p166__ = ((~|(__auxvar22__recorder_sn_condmet & __auxvar22__recorder_sn_cond)) | (__auxvar22__recorder_sn_value == __auxvar22__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p167__ = ((~|(__auxvar23__recorder_sn_condmet & __auxvar23__recorder_sn_cond)) | (__auxvar23__recorder_sn_value == __auxvar23__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p168__ = ((~|(__auxvar24__recorder_sn_condmet & __auxvar24__recorder_sn_cond)) | (__auxvar24__recorder_sn_value == __auxvar24__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p169__ = ((~|(__auxvar25__recorder_sn_condmet & __auxvar25__recorder_sn_cond)) | (__auxvar25__recorder_sn_value == __auxvar25__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p170__ = ((~|(__auxvar26__recorder_sn_condmet & __auxvar26__recorder_sn_cond)) | (__auxvar26__recorder_sn_value == __auxvar26__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p171__ = ((~|(__auxvar27__recorder_sn_condmet & __auxvar27__recorder_sn_cond)) | (__auxvar27__recorder_sn_value == __auxvar27__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p172__ = ((~|(__auxvar28__recorder_sn_condmet & __auxvar28__recorder_sn_cond)) | (__auxvar28__recorder_sn_value == __auxvar28__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p173__ = ((~|(__auxvar29__recorder_sn_condmet & __auxvar29__recorder_sn_cond)) | (__auxvar29__recorder_sn_value == __auxvar29__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p174__ = ((~|(__auxvar2__recorder_sn_condmet & __auxvar2__recorder_sn_cond)) | (__auxvar2__recorder_sn_value == __auxvar2__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p175__ = ((~|(__auxvar30__recorder_sn_condmet & __auxvar30__recorder_sn_cond)) | (__auxvar30__recorder_sn_value == __auxvar30__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p176__ = ((~|(__auxvar31__recorder_sn_condmet & __auxvar31__recorder_sn_cond)) | (__auxvar31__recorder_sn_value == __auxvar31__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p177__ = ((~|(__auxvar32__recorder_sn_condmet & __auxvar32__recorder_sn_cond)) | (__auxvar32__recorder_sn_value == __auxvar32__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p178__ = ((~|(__auxvar33__recorder_sn_condmet & __auxvar33__recorder_sn_cond)) | (__auxvar33__recorder_sn_value == __auxvar33__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p179__ = ((~|(__auxvar34__recorder_sn_condmet & __auxvar34__recorder_sn_cond)) | (__auxvar34__recorder_sn_value ~^ __auxvar34__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p180__ = ((~|(__auxvar35__recorder_sn_condmet & __auxvar35__recorder_sn_cond)) | (__auxvar35__recorder_sn_value == __auxvar35__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p181__ = ((~|(__auxvar36__recorder_sn_condmet & __auxvar36__recorder_sn_cond)) | (__auxvar36__recorder_sn_value ~^ __auxvar36__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p182__ = ((~|(__auxvar37__recorder_sn_condmet & __auxvar37__recorder_sn_cond)) | (__auxvar37__recorder_sn_value == __auxvar37__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p183__ = ((~|(__auxvar38__recorder_sn_condmet & __auxvar38__recorder_sn_cond)) | (__auxvar38__recorder_sn_value == __auxvar38__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p184__ = ((~|(__auxvar3__recorder_sn_condmet & __auxvar3__recorder_sn_cond)) | (__auxvar3__recorder_sn_value == __auxvar3__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p185__ = ((~|(__auxvar4__recorder_sn_condmet & __auxvar4__recorder_sn_cond)) | (__auxvar4__recorder_sn_value == __auxvar4__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p186__ = ((~|(__auxvar5__recorder_sn_condmet & __auxvar5__recorder_sn_cond)) | (__auxvar5__recorder_sn_value == __auxvar5__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p187__ = ((~|(__auxvar6__recorder_sn_condmet & __auxvar6__recorder_sn_cond)) | (__auxvar6__recorder_sn_value == __auxvar6__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p188__ = ((~|(__auxvar7__recorder_sn_condmet & __auxvar7__recorder_sn_cond)) | (__auxvar7__recorder_sn_value == __auxvar7__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p189__ = ((~|(__auxvar8__recorder_sn_condmet & __auxvar8__recorder_sn_cond)) | (__auxvar8__recorder_sn_value == __auxvar8__recorder_sn_vhold));
  assign post_value_holder_overly_constrained__p190__ = ((~|(__auxvar9__recorder_sn_condmet & __auxvar9__recorder_sn_cond)) | (__auxvar9__recorder_sn_value == __auxvar9__recorder_sn_vhold));
  assign post_value_holder_triggered__p191__ = ((~|__IEND__) | (__auxvar10__recorder_sn_condmet | __auxvar10__recorder_sn_cond));
  assign post_value_holder_triggered__p192__ = ((~|__IEND__) | (__auxvar11__recorder_sn_condmet | __auxvar11__recorder_sn_cond));
  assign post_value_holder_triggered__p193__ = ((~|__IEND__) | (__auxvar12__recorder_sn_condmet | __auxvar12__recorder_sn_cond));
  assign post_value_holder_triggered__p194__ = ((~|__IEND__) | (__auxvar13__recorder_sn_condmet | __auxvar13__recorder_sn_cond));
  assign post_value_holder_triggered__p195__ = ((~|__IEND__) | (__auxvar14__recorder_sn_condmet | __auxvar14__recorder_sn_cond));
  assign post_value_holder_triggered__p196__ = ((~|__IEND__) | (__auxvar15__recorder_sn_condmet | __auxvar15__recorder_sn_cond));
  assign post_value_holder_triggered__p197__ = ((~|__IEND__) | (__auxvar16__recorder_sn_condmet | __auxvar16__recorder_sn_cond));
  assign post_value_holder_triggered__p198__ = ((~|__IEND__) | (__auxvar17__recorder_sn_condmet | __auxvar17__recorder_sn_cond));
  assign post_value_holder_triggered__p199__ = ((~|__IEND__) | (__auxvar18__recorder_sn_condmet | __auxvar18__recorder_sn_cond));
  assign post_value_holder_triggered__p200__ = ((~|__IEND__) | (__auxvar19__recorder_sn_condmet | __auxvar19__recorder_sn_cond));
  assign post_value_holder_triggered__p201__ = ((~|__IEND__) | (__auxvar1__recorder_sn_condmet | __auxvar1__recorder_sn_cond));
  assign post_value_holder_triggered__p202__ = ((~|__IEND__) | (__auxvar20__recorder_sn_condmet | __auxvar20__recorder_sn_cond));
  assign post_value_holder_triggered__p203__ = ((~|__IEND__) | (__auxvar21__recorder_sn_condmet | __auxvar21__recorder_sn_cond));
  assign post_value_holder_triggered__p204__ = ((~|__IEND__) | (__auxvar22__recorder_sn_condmet | __auxvar22__recorder_sn_cond));
  assign post_value_holder_triggered__p205__ = ((~|__IEND__) | (__auxvar23__recorder_sn_condmet | __auxvar23__recorder_sn_cond));
  assign post_value_holder_triggered__p206__ = ((~|__IEND__) | (__auxvar24__recorder_sn_condmet | __auxvar24__recorder_sn_cond));
  assign post_value_holder_triggered__p207__ = ((~|__IEND__) | (__auxvar25__recorder_sn_condmet | __auxvar25__recorder_sn_cond));
  assign post_value_holder_triggered__p208__ = ((~|__IEND__) | (__auxvar26__recorder_sn_condmet | __auxvar26__recorder_sn_cond));
  assign post_value_holder_triggered__p209__ = ((~|__IEND__) | (__auxvar27__recorder_sn_condmet | __auxvar27__recorder_sn_cond));
  assign post_value_holder_triggered__p210__ = ((~|__IEND__) | (__auxvar28__recorder_sn_condmet | __auxvar28__recorder_sn_cond));
  assign post_value_holder_triggered__p211__ = ((~|__IEND__) | (__auxvar29__recorder_sn_condmet | __auxvar29__recorder_sn_cond));
  assign post_value_holder_triggered__p212__ = ((~|__IEND__) | (__auxvar2__recorder_sn_condmet | __auxvar2__recorder_sn_cond));
  assign post_value_holder_triggered__p213__ = ((~|__IEND__) | (__auxvar30__recorder_sn_condmet | __auxvar30__recorder_sn_cond));
  assign post_value_holder_triggered__p214__ = ((~|__IEND__) | (__auxvar31__recorder_sn_condmet | __auxvar31__recorder_sn_cond));
  assign post_value_holder_triggered__p215__ = ((~|__IEND__) | (__auxvar32__recorder_sn_condmet | __auxvar32__recorder_sn_cond));
  assign post_value_holder_triggered__p216__ = ((~|__IEND__) | (__auxvar33__recorder_sn_condmet | __auxvar33__recorder_sn_cond));
  assign post_value_holder_triggered__p217__ = ((~|__IEND__) | (__auxvar34__recorder_sn_condmet | __auxvar34__recorder_sn_cond));
  assign post_value_holder_triggered__p218__ = ((~|__IEND__) | (__auxvar35__recorder_sn_condmet | __auxvar35__recorder_sn_cond));
  assign post_value_holder_triggered__p219__ = ((~|__IEND__) | (__auxvar36__recorder_sn_condmet | __auxvar36__recorder_sn_cond));
  assign post_value_holder_triggered__p220__ = ((~|__IEND__) | (__auxvar37__recorder_sn_condmet | __auxvar37__recorder_sn_cond));
  assign post_value_holder_triggered__p221__ = ((~|__IEND__) | (__auxvar38__recorder_sn_condmet | __auxvar38__recorder_sn_cond));
  assign post_value_holder_triggered__p222__ = ((~|__IEND__) | (__auxvar3__recorder_sn_condmet | __auxvar3__recorder_sn_cond));
  assign post_value_holder_triggered__p223__ = ((~|__IEND__) | (__auxvar4__recorder_sn_condmet | __auxvar4__recorder_sn_cond));
  assign post_value_holder_triggered__p224__ = ((~|__IEND__) | (__auxvar5__recorder_sn_condmet | __auxvar5__recorder_sn_cond));
  assign post_value_holder_triggered__p225__ = ((~|__IEND__) | (__auxvar6__recorder_sn_condmet | __auxvar6__recorder_sn_cond));
  assign post_value_holder_triggered__p226__ = ((~|__IEND__) | (__auxvar7__recorder_sn_condmet | __auxvar7__recorder_sn_cond));
  assign post_value_holder_triggered__p227__ = ((~|__IEND__) | (__auxvar8__recorder_sn_condmet | __auxvar8__recorder_sn_cond));
  assign post_value_holder_triggered__p228__ = ((~|__IEND__) | (__auxvar9__recorder_sn_condmet | __auxvar9__recorder_sn_cond));

  always @(posedge clk) if (rst) __CYCLE_CNT__ <= 0;
  else if (((__START__ || __STARTED__) && (__CYCLE_CNT__ < 32'h00000089))) __CYCLE_CNT__ <= (__CYCLE_CNT__ + 8'h01);

  always @(posedge clk) if (((__ISSUE__ && (!__START__)) && (!__STARTED__))) __START__ <= -1;
  else if ((__START__ || __STARTED__)) __START__ <= 0;

  always @(posedge clk) if (rst) __STARTED__ <= 0;
  else if (__START__) __STARTED__ <= -1;

  always @(posedge clk) if (rst) __ENDED__ <= 0;
  else if (__IEND__) __ENDED__ <= -1;

  always @(posedge clk) if (rst) __2ndENDED__ <= 1'b0;
  else if (((__ENDED__ && __EDCOND__) && (~__2ndENDED__))) __2ndENDED__ <= 1'b1;

  always @(posedge clk) if (rst) __RESETED__ <= -1;

  always @(posedge clk) if (rst) begin
    __auxvar10__recorder <= ____auxvar10__recorder_init__;
    __auxvar10__recorder_sn_condmet <= 1'b0;
    __auxvar11__recorder <= ____auxvar11__recorder_init__;
    __auxvar11__recorder_sn_condmet <= 1'b0;
    __auxvar12__recorder <= ____auxvar12__recorder_init__;
    __auxvar12__recorder_sn_condmet <= 1'b0;
    __auxvar13__recorder <= ____auxvar13__recorder_init__;
    __auxvar13__recorder_sn_condmet <= 1'b0;
    __auxvar14__recorder <= ____auxvar14__recorder_init__;
    __auxvar14__recorder_sn_condmet <= 1'b0;
    __auxvar15__recorder <= ____auxvar15__recorder_init__;
    __auxvar15__recorder_sn_condmet <= 1'b0;
    __auxvar16__recorder <= ____auxvar16__recorder_init__;
    __auxvar16__recorder_sn_condmet <= 1'b0;
    __auxvar17__recorder <= ____auxvar17__recorder_init__;
    __auxvar17__recorder_sn_condmet <= 1'b0;
    __auxvar18__recorder <= ____auxvar18__recorder_init__;
    __auxvar18__recorder_sn_condmet <= 1'b0;
    __auxvar19__recorder <= ____auxvar19__recorder_init__;
    __auxvar19__recorder_sn_condmet <= 1'b0;
    __auxvar1__recorder <= ____auxvar1__recorder_init__;
    __auxvar1__recorder_sn_condmet <= 1'b0;
    __auxvar20__recorder <= ____auxvar20__recorder_init__;
    __auxvar20__recorder_sn_condmet <= 1'b0;
    __auxvar21__recorder <= ____auxvar21__recorder_init__;
    __auxvar21__recorder_sn_condmet <= 1'b0;
    __auxvar22__recorder <= ____auxvar22__recorder_init__;
    __auxvar22__recorder_sn_condmet <= 1'b0;
    __auxvar23__recorder <= ____auxvar23__recorder_init__;
    __auxvar23__recorder_sn_condmet <= 1'b0;
    __auxvar24__recorder <= ____auxvar24__recorder_init__;
    __auxvar24__recorder_sn_condmet <= 1'b0;
    __auxvar25__recorder <= ____auxvar25__recorder_init__;
    __auxvar25__recorder_sn_condmet <= 1'b0;
    __auxvar26__recorder <= ____auxvar26__recorder_init__;
    __auxvar26__recorder_sn_condmet <= 1'b0;
    __auxvar27__recorder <= ____auxvar27__recorder_init__;
    __auxvar27__recorder_sn_condmet <= 1'b0;
    __auxvar28__recorder <= ____auxvar28__recorder_init__;
    __auxvar28__recorder_sn_condmet <= 1'b0;
    __auxvar29__recorder <= ____auxvar29__recorder_init__;
    __auxvar29__recorder_sn_condmet <= 1'b0;
    __auxvar2__recorder <= ____auxvar2__recorder_init__;
    __auxvar2__recorder_sn_condmet <= 1'b0;
    __auxvar30__recorder <= ____auxvar30__recorder_init__;
    __auxvar30__recorder_sn_condmet <= 1'b0;
    __auxvar31__recorder <= ____auxvar31__recorder_init__;
    __auxvar31__recorder_sn_condmet <= 1'b0;
    __auxvar32__recorder <= ____auxvar32__recorder_init__;
    __auxvar32__recorder_sn_condmet <= 1'b0;
    __auxvar33__recorder <= ____auxvar33__recorder_init__;
    __auxvar33__recorder_sn_condmet <= 1'b0;
    __auxvar34__recorder <= ____auxvar34__recorder_init__;
    __auxvar34__recorder_sn_condmet <= 1'b0;
    __auxvar35__recorder <= ____auxvar35__recorder_init__;
    __auxvar35__recorder_sn_condmet <= 1'b0;
    __auxvar36__recorder <= ____auxvar36__recorder_init__;
    __auxvar36__recorder_sn_condmet <= 1'b0;
    __auxvar37__recorder <= ____auxvar37__recorder_init__;
    __auxvar37__recorder_sn_condmet <= 1'b0;
    __auxvar38__recorder <= ____auxvar38__recorder_init__;
    __auxvar38__recorder_sn_condmet <= 1'b0;
    __auxvar3__recorder <= ____auxvar3__recorder_init__;
    __auxvar3__recorder_sn_condmet <= 1'b0;
    __auxvar4__recorder <= ____auxvar4__recorder_init__;
    __auxvar4__recorder_sn_condmet <= 1'b0;
    __auxvar5__recorder <= ____auxvar5__recorder_init__;
    __auxvar5__recorder_sn_condmet <= 1'b0;
    __auxvar6__recorder <= ____auxvar6__recorder_init__;
    __auxvar6__recorder_sn_condmet <= 1'b0;
    __auxvar7__recorder <= ____auxvar7__recorder_init__;
    __auxvar7__recorder_sn_condmet <= 1'b0;
    __auxvar8__recorder <= ____auxvar8__recorder_init__;
    __auxvar8__recorder_sn_condmet <= 1'b0;
    __auxvar9__recorder <= ____auxvar9__recorder_init__;
    __auxvar9__recorder_sn_condmet <= 1'b0;
    __auxvar0__delay_d_1 <= 0;
    monitor_s1_already <= 1'b0;
    monitor_s2 <= 1'b0;
    monitor_s3 <= 1'b0;
    monitor_s4 <= 1'b0;
  end
  else begin
    __auxvar10__recorder <= __auxvar10__recorder;
    if (__auxvar10__recorder_sn_cond) begin
      __auxvar10__recorder_sn_condmet <= 1'b1;
      __auxvar10__recorder_sn_vhold <= __auxvar10__recorder_sn_value;
    end
    __auxvar11__recorder <= __auxvar11__recorder;
    if (__auxvar11__recorder_sn_cond) begin
      __auxvar11__recorder_sn_condmet <= 1'b1;
      __auxvar11__recorder_sn_vhold <= __auxvar11__recorder_sn_value;
    end
    __auxvar12__recorder <= __auxvar12__recorder;
    if (__auxvar12__recorder_sn_cond) begin
      __auxvar12__recorder_sn_condmet <= 1'b1;
      __auxvar12__recorder_sn_vhold <= __auxvar12__recorder_sn_value;
    end
    __auxvar13__recorder <= __auxvar13__recorder;
    if (__auxvar13__recorder_sn_cond) begin
      __auxvar13__recorder_sn_condmet <= 1'b1;
      __auxvar13__recorder_sn_vhold <= __auxvar13__recorder_sn_value;
    end
    __auxvar14__recorder <= __auxvar14__recorder;
    if (__auxvar14__recorder_sn_cond) begin
      __auxvar14__recorder_sn_condmet <= 1'b1;
      __auxvar14__recorder_sn_vhold <= __auxvar14__recorder_sn_value;
    end
    __auxvar15__recorder <= __auxvar15__recorder;
    if (__auxvar15__recorder_sn_cond) begin
      __auxvar15__recorder_sn_condmet <= 1'b1;
      __auxvar15__recorder_sn_vhold <= __auxvar15__recorder_sn_value;
    end
    __auxvar16__recorder <= __auxvar16__recorder;
    if (__auxvar16__recorder_sn_cond) begin
      __auxvar16__recorder_sn_condmet <= 1'b1;
      __auxvar16__recorder_sn_vhold <= __auxvar16__recorder_sn_value;
    end
    __auxvar17__recorder <= __auxvar17__recorder;
    if (__auxvar17__recorder_sn_cond) begin
      __auxvar17__recorder_sn_condmet <= 1'b1;
      __auxvar17__recorder_sn_vhold <= __auxvar17__recorder_sn_value;
    end
    __auxvar18__recorder <= __auxvar18__recorder;
    if (__auxvar18__recorder_sn_cond) begin
      __auxvar18__recorder_sn_condmet <= 1'b1;
      __auxvar18__recorder_sn_vhold <= __auxvar18__recorder_sn_value;
    end
    __auxvar19__recorder <= __auxvar19__recorder;
    if (__auxvar19__recorder_sn_cond) begin
      __auxvar19__recorder_sn_condmet <= 1'b1;
      __auxvar19__recorder_sn_vhold <= __auxvar19__recorder_sn_value;
    end
    __auxvar1__recorder <= __auxvar1__recorder;
    if (__auxvar1__recorder_sn_cond) begin
      __auxvar1__recorder_sn_condmet <= 1'b1;
      __auxvar1__recorder_sn_vhold <= __auxvar1__recorder_sn_value;
    end
    __auxvar20__recorder <= __auxvar20__recorder;
    if (__auxvar20__recorder_sn_cond) begin
      __auxvar20__recorder_sn_condmet <= 1'b1;
      __auxvar20__recorder_sn_vhold <= __auxvar20__recorder_sn_value;
    end
    __auxvar21__recorder <= __auxvar21__recorder;
    if (__auxvar21__recorder_sn_cond) begin
      __auxvar21__recorder_sn_condmet <= 1'b1;
      __auxvar21__recorder_sn_vhold <= __auxvar21__recorder_sn_value;
    end
    __auxvar22__recorder <= __auxvar22__recorder;
    if (__auxvar22__recorder_sn_cond) begin
      __auxvar22__recorder_sn_condmet <= 1'b1;
      __auxvar22__recorder_sn_vhold <= __auxvar22__recorder_sn_value;
    end
    __auxvar23__recorder <= __auxvar23__recorder;
    if (__auxvar23__recorder_sn_cond) begin
      __auxvar23__recorder_sn_condmet <= 1'b1;
      __auxvar23__recorder_sn_vhold <= __auxvar23__recorder_sn_value;
    end
    __auxvar24__recorder <= __auxvar24__recorder;
    if (__auxvar24__recorder_sn_cond) begin
      __auxvar24__recorder_sn_condmet <= 1'b1;
      __auxvar24__recorder_sn_vhold <= __auxvar24__recorder_sn_value;
    end
    __auxvar25__recorder <= __auxvar25__recorder;
    if (__auxvar25__recorder_sn_cond) begin
      __auxvar25__recorder_sn_condmet <= 1'b1;
      __auxvar25__recorder_sn_vhold <= __auxvar25__recorder_sn_value;
    end
    __auxvar26__recorder <= __auxvar26__recorder;
    if (__auxvar26__recorder_sn_cond) begin
      __auxvar26__recorder_sn_condmet <= 1'b1;
      __auxvar26__recorder_sn_vhold <= __auxvar26__recorder_sn_value;
    end
    __auxvar27__recorder <= __auxvar27__recorder;
    if (__auxvar27__recorder_sn_cond) begin
      __auxvar27__recorder_sn_condmet <= 1'b1;
      __auxvar27__recorder_sn_vhold <= __auxvar27__recorder_sn_value;
    end
    __auxvar28__recorder <= __auxvar28__recorder;
    if (__auxvar28__recorder_sn_cond) begin
      __auxvar28__recorder_sn_condmet <= 1'b1;
      __auxvar28__recorder_sn_vhold <= __auxvar28__recorder_sn_value;
    end
    __auxvar29__recorder <= __auxvar29__recorder;
    if (__auxvar29__recorder_sn_cond) begin
      __auxvar29__recorder_sn_condmet <= 1'b1;
      __auxvar29__recorder_sn_vhold <= __auxvar29__recorder_sn_value;
    end
    __auxvar2__recorder <= __auxvar2__recorder;
    if (__auxvar2__recorder_sn_cond) begin
      __auxvar2__recorder_sn_condmet <= 1'b1;
      __auxvar2__recorder_sn_vhold <= __auxvar2__recorder_sn_value;
    end
    __auxvar30__recorder <= __auxvar30__recorder;
    if (__auxvar30__recorder_sn_cond) begin
      __auxvar30__recorder_sn_condmet <= 1'b1;
      __auxvar30__recorder_sn_vhold <= __auxvar30__recorder_sn_value;
    end
    __auxvar31__recorder <= __auxvar31__recorder;
    if (__auxvar31__recorder_sn_cond) begin
      __auxvar31__recorder_sn_condmet <= 1'b1;
      __auxvar31__recorder_sn_vhold <= __auxvar31__recorder_sn_value;
    end
    __auxvar32__recorder <= __auxvar32__recorder;
    if (__auxvar32__recorder_sn_cond) begin
      __auxvar32__recorder_sn_condmet <= 1'b1;
      __auxvar32__recorder_sn_vhold <= __auxvar32__recorder_sn_value;
    end
    __auxvar33__recorder <= __auxvar33__recorder;
    if (__auxvar33__recorder_sn_cond) begin
      __auxvar33__recorder_sn_condmet <= 1'b1;
      __auxvar33__recorder_sn_vhold <= __auxvar33__recorder_sn_value;
    end
    __auxvar34__recorder <= __auxvar34__recorder;
    if (__auxvar34__recorder_sn_cond) begin
      __auxvar34__recorder_sn_condmet <= 1'b1;
      __auxvar34__recorder_sn_vhold <= __auxvar34__recorder_sn_value;
    end
    __auxvar35__recorder <= __auxvar35__recorder;
    if (__auxvar35__recorder_sn_cond) begin
      __auxvar35__recorder_sn_condmet <= 1'b1;
      __auxvar35__recorder_sn_vhold <= __auxvar35__recorder_sn_value;
    end
    __auxvar36__recorder <= __auxvar36__recorder;
    if (__auxvar36__recorder_sn_cond) begin
      __auxvar36__recorder_sn_condmet <= 1'b1;
      __auxvar36__recorder_sn_vhold <= __auxvar36__recorder_sn_value;
    end
    __auxvar37__recorder <= __auxvar37__recorder;
    if (__auxvar37__recorder_sn_cond) begin
      __auxvar37__recorder_sn_condmet <= 1'b1;
      __auxvar37__recorder_sn_vhold <= __auxvar37__recorder_sn_value;
    end
    __auxvar38__recorder <= __auxvar38__recorder;
    if (__auxvar38__recorder_sn_cond) begin
      __auxvar38__recorder_sn_condmet <= 1'b1;
      __auxvar38__recorder_sn_vhold <= __auxvar38__recorder_sn_value;
    end
    __auxvar3__recorder <= __auxvar3__recorder;
    if (__auxvar3__recorder_sn_cond) begin
      __auxvar3__recorder_sn_condmet <= 1'b1;
      __auxvar3__recorder_sn_vhold <= __auxvar3__recorder_sn_value;
    end
    __auxvar4__recorder <= __auxvar4__recorder;
    if (__auxvar4__recorder_sn_cond) begin
      __auxvar4__recorder_sn_condmet <= 1'b1;
      __auxvar4__recorder_sn_vhold <= __auxvar4__recorder_sn_value;
    end
    __auxvar5__recorder <= __auxvar5__recorder;
    if (__auxvar5__recorder_sn_cond) begin
      __auxvar5__recorder_sn_condmet <= 1'b1;
      __auxvar5__recorder_sn_vhold <= __auxvar5__recorder_sn_value;
    end
    __auxvar6__recorder <= __auxvar6__recorder;
    if (__auxvar6__recorder_sn_cond) begin
      __auxvar6__recorder_sn_condmet <= 1'b1;
      __auxvar6__recorder_sn_vhold <= __auxvar6__recorder_sn_value;
    end
    __auxvar7__recorder <= __auxvar7__recorder;
    if (__auxvar7__recorder_sn_cond) begin
      __auxvar7__recorder_sn_condmet <= 1'b1;
      __auxvar7__recorder_sn_vhold <= __auxvar7__recorder_sn_value;
    end
    __auxvar8__recorder <= __auxvar8__recorder;
    if (__auxvar8__recorder_sn_cond) begin
      __auxvar8__recorder_sn_condmet <= 1'b1;
      __auxvar8__recorder_sn_vhold <= __auxvar8__recorder_sn_value;
    end
    __auxvar9__recorder <= __auxvar9__recorder;
    if (__auxvar9__recorder_sn_cond) begin
      __auxvar9__recorder_sn_condmet <= 1'b1;
      __auxvar9__recorder_sn_vhold <= __auxvar9__recorder_sn_value;
    end
    __auxvar0__delay_d_1 <= __auxvar0__delay_d_0;
    if (monitor_s1_already_enter_cond) monitor_s1_already <= 1'b1;
    else if (monitor_s1_already_exit_cond) monitor_s1_already <= 1'b0;
    if (monitor_s2_enter_cond) monitor_s2 <= 1'b1;
    else if (monitor_s2_exit_cond) monitor_s2 <= 1'b0;
    if (monitor_s3_enter_cond) monitor_s3 <= 1'b1;
    else if (monitor_s3_exit_cond) monitor_s3 <= 1'b0;
    if (monitor_s4_enter_cond) monitor_s4 <= 1'b1;
    else if (monitor_s4_exit_cond) monitor_s4 <= 1'b0;
  end

  riscv__DOT__ADD ILA(__START__, clk, __ILA_I_inst, rst, __ILA_riscv_decode_of_ADD__, __ILA_riscv_valid__, __ILA_SO_pc, __ILA_SO_load_en, __ILA_SO_load_addr, __ILA_SO_load_size, __ILA_SO_load_data, __ILA_SO_store_en, __ILA_SO_store_addr, __ILA_SO_store_size, __ILA_SO_store_data, __ILA_SO_x0, __ILA_SO_x1, __ILA_SO_x2, __ILA_SO_x3, __ILA_SO_x4, __ILA_SO_x5, __ILA_SO_x6, __ILA_SO_x7, __ILA_SO_x8, __ILA_SO_x9, __ILA_SO_x10, __ILA_SO_x11, __ILA_SO_x12, __ILA_SO_x13, __ILA_SO_x14, __ILA_SO_x15, __ILA_SO_x16, __ILA_SO_x17, __ILA_SO_x18, __ILA_SO_x19, __ILA_SO_x20, __ILA_SO_x21, __ILA_SO_x22, __ILA_SO_x23, __ILA_SO_x24, __ILA_SO_x25, __ILA_SO_x26, __ILA_SO_x27, __ILA_SO_x28, __ILA_SO_x29, __ILA_SO_x30, __ILA_SO_x31, /* Empty */);

  mkCPU RTL(clk, (~ rst), __VLG_I_hart0_server_reset_request_put, __VLG_I_EN_hart0_server_reset_request_put, __VLG_O_RDY_hart0_server_reset_request_put, __VLG_I_EN_hart0_server_reset_response_get, __VLG_O_hart0_server_reset_response_get, __VLG_O_RDY_hart0_server_reset_response_get, __VLG_O_imem_master_awvalid, __VLG_O_imem_master_awid, __VLG_O_imem_master_awaddr, __VLG_O_imem_master_awlen, __VLG_O_imem_master_awsize, __VLG_O_imem_master_awburst, __VLG_O_imem_master_awlock, __VLG_O_imem_master_awcache, __VLG_O_imem_master_awprot, __VLG_O_imem_master_awqos, __VLG_O_imem_master_awregion, __VLG_I_imem_master_awready, __VLG_O_imem_master_wvalid, __VLG_O_imem_master_wdata, __VLG_O_imem_master_wstrb, __VLG_O_imem_master_wlast, __VLG_I_imem_master_wready, __VLG_I_imem_master_bvalid, __VLG_I_imem_master_bid, __VLG_I_imem_master_bresp, __VLG_O_imem_master_bready, __VLG_O_imem_master_arvalid, __VLG_O_imem_master_arid, __VLG_O_imem_master_araddr, __VLG_O_imem_master_arlen, __VLG_O_imem_master_arsize, __VLG_O_imem_master_arburst, __VLG_O_imem_master_arlock, __VLG_O_imem_master_arcache, __VLG_O_imem_master_arprot, __VLG_O_imem_master_arqos, __VLG_O_imem_master_arregion, __VLG_I_imem_master_arready, __VLG_I_imem_master_rvalid, __VLG_I_imem_master_rid, __VLG_I_imem_master_rdata, __VLG_I_imem_master_rresp, __VLG_I_imem_master_rlast, __VLG_O_imem_master_rready, __VLG_O_dmem_master_awvalid, __VLG_O_dmem_master_awid, __VLG_O_dmem_master_awaddr, __VLG_O_dmem_master_awlen, __VLG_O_dmem_master_awsize, __VLG_O_dmem_master_awburst, __VLG_O_dmem_master_awlock, __VLG_O_dmem_master_awcache, __VLG_O_dmem_master_awprot, __VLG_O_dmem_master_awqos, __VLG_O_dmem_master_awregion, __VLG_I_dmem_master_awready, __VLG_O_dmem_master_wvalid, __VLG_O_dmem_master_wdata, __VLG_O_dmem_master_wstrb, __VLG_O_dmem_master_wlast, __VLG_I_dmem_master_wready, __VLG_I_dmem_master_bvalid, __VLG_I_dmem_master_bid, __VLG_I_dmem_master_bresp, __VLG_O_dmem_master_bready, __VLG_O_dmem_master_arvalid, __VLG_O_dmem_master_arid, __VLG_O_dmem_master_araddr, __VLG_O_dmem_master_arlen, __VLG_O_dmem_master_arsize, __VLG_O_dmem_master_arburst, __VLG_O_dmem_master_arlock, __VLG_O_dmem_master_arcache, __VLG_O_dmem_master_arprot, __VLG_O_dmem_master_arqos, __VLG_O_dmem_master_arregion, __VLG_I_dmem_master_arready, __VLG_I_dmem_master_rvalid, __VLG_I_dmem_master_rid, __VLG_I_dmem_master_rdata, __VLG_I_dmem_master_rresp, __VLG_I_dmem_master_rlast, __VLG_O_dmem_master_rready, __VLG_II_m_external_interrupt_req_set_not_clear, __VLG_II_s_external_interrupt_req_set_not_clear, __VLG_II_software_interrupt_req_set_not_clear, __VLG_II_timer_interrupt_req_set_not_clear, __VLG_II_nmi_req_set_not_clear, __VLG_I_set_verbosity_verbosity, __VLG_I_set_verbosity_logdelay, __VLG_I_EN_set_verbosity, __VLG_O_RDY_set_verbosity, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_4_, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem$dmem_req_op, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__rg_trap_instr, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem$dmem_req_store_value, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_20_, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem$dmem_word64, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_5_, RTL__DOT__near_mem__DOT__dcache__DOT__rg_addr, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg, RTL__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__s1_to_s2$D_IN, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_9_, RTL__DOT__stage2_rg_full, RTL__DOT__csr_regfile__DOT__rg_state, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__stage1_rg_full, RTL__DOT__stage1_f_reset_rsps__DOT__full_reg, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_14_, RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__stage1_f_reset_reqs__DOT__full_reg, RTL__DOT__rg_run_on_reset, RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg, RTL__DOT__stage3_f_reset_reqs__DOT__full_reg, RTL__DOT__s2_to_s3$EN, RTL__DOT__near_mem$dmem_req_f3, RTL__DOT__s1_to_s2$EN, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_3_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_8_, RTL__DOT__s3_deq$EN, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__rg_state, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__rg_retiring$EN, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__s2_to_s3$D_IN, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_11_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_18_, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_24_, RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_2_, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__stage2_f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__stage3_f_reset_rsps__DOT__full_reg, RTL__DOT__stage3_rg_full, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_28_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_17_, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_21_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_22_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_23_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_25_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_27_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_29_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_31_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_6_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_1_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_10_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_7_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_12_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_15_, RTL__DOT__stage2_rg_stage2, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_19_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_13_, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__csr_regfile__DOT__rg_nmi, RTL__DOT__near_mem__DOT__dcache__DOT__rg_pa, RTL__DOT__near_mem$EN_dmem_req, RTL__DOT__stage2_f_reset_reqs__DOT__full_reg, RTL__DOT__rg_cur_priv, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_26_, RTL__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg, RTL__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_30_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_16_, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem$dmem_req_addr, RTL__DOT__near_mem$imem_instr, RTL__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem$imem_pc, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem$dmem_exc, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__s3_deq$D_IN);
  assign __all_assert_wire__ = (variable_map_assert__p118__) && (variable_map_assert__p119__) && (variable_map_assert__p120__) && (variable_map_assert__p121__) && (variable_map_assert__p122__) && (variable_map_assert__p123__) && (variable_map_assert__p124__) && (variable_map_assert__p125__) && (variable_map_assert__p126__) && (variable_map_assert__p127__) && (variable_map_assert__p128__) && (variable_map_assert__p129__) && (variable_map_assert__p130__) && (variable_map_assert__p131__) && (variable_map_assert__p132__) && (variable_map_assert__p133__) && (variable_map_assert__p134__) && (variable_map_assert__p135__) && (variable_map_assert__p136__) && (variable_map_assert__p137__) && (variable_map_assert__p138__) && (variable_map_assert__p139__) && (variable_map_assert__p140__) && (variable_map_assert__p141__) && (variable_map_assert__p142__) && (variable_map_assert__p143__) && (variable_map_assert__p144__) && (variable_map_assert__p145__) && (variable_map_assert__p146__) && (variable_map_assert__p147__) && (variable_map_assert__p148__) && (variable_map_assert__p149__) && (variable_map_assert__p150__) && (variable_map_assert__p151__) && (variable_map_assert__p152__) ;
  normalassert: assert property ( __all_assert_wire__ ); // the only assertion 

  assign __all_assume_wire__ = (input_map_assume___p0__)&& (invariant_assume__p1__)&& (invariant_assume__p2__)&& (invariant_assume__p3__)&& (invariant_assume__p4__)&& (invariant_assume__p5__)&& (invariant_assume__p6__)&& (invariant_assume__p7__)&& (invariant_assume__p8__)&& (invariant_assume__p9__)&& (invariant_assume__p10__)&& (invariant_assume__p11__)&& (invariant_assume__p12__)&& (invariant_assume__p13__)&& (invariant_assume__p14__)&& (invariant_assume__p15__)&& (invariant_assume__p16__)&& (invariant_assume__p17__)&& (invariant_assume__p18__)&& (invariant_assume__p19__)&& (invariant_assume__p20__)&& (invariant_assume__p21__)&& (invariant_assume__p22__)&& (invariant_assume__p23__)&& (invariant_assume__p24__)&& (invariant_assume__p25__)&& (invariant_assume__p26__)&& (invariant_assume__p27__)&& (invariant_assume__p28__)&& (invariant_assume__p29__)&& (invariant_assume__p30__)&& (invariant_assume__p31__)&& (invariant_assume__p32__)&& (issue_decode__p33__)&& (issue_valid__p34__)&& (noreset__p35__)&& (post_value_holder__p36__)&& (post_value_holder__p37__)&& (post_value_holder__p38__)&& (post_value_holder__p39__)&& (post_value_holder__p40__)&& (post_value_holder__p41__)&& (post_value_holder__p42__)&& (post_value_holder__p43__)&& (post_value_holder__p44__)&& (post_value_holder__p45__)&& (post_value_holder__p46__)&& (post_value_holder__p47__)&& (post_value_holder__p48__)&& (post_value_holder__p49__)&& (post_value_holder__p50__)&& (post_value_holder__p51__)&& (post_value_holder__p52__)&& (post_value_holder__p53__)&& (post_value_holder__p54__)&& (post_value_holder__p55__)&& (post_value_holder__p56__)&& (post_value_holder__p57__)&& (post_value_holder__p58__)&& (post_value_holder__p59__)&& (post_value_holder__p60__)&& (post_value_holder__p61__)&& (post_value_holder__p62__)&& (post_value_holder__p63__)&& (post_value_holder__p64__)&& (post_value_holder__p65__)&& (post_value_holder__p66__)&& (post_value_holder__p67__)&& (post_value_holder__p68__)&& (post_value_holder__p69__)&& (post_value_holder__p70__)&& (post_value_holder__p71__)&& (post_value_holder__p72__)&& (post_value_holder__p73__)&& (rfassumptions__p74__)&& (rfassumptions__p75__)&& (rfassumptions__p76__)&& (variable_map_assume___p77__)&& (variable_map_assume___p78__)&& (variable_map_assume___p79__)&& (variable_map_assume___p80__)&& (variable_map_assume___p81__)&& (variable_map_assume___p82__)&& (variable_map_assume___p83__)&& (variable_map_assume___p84__)&& (variable_map_assume___p85__)&& (variable_map_assume___p86__)&& (variable_map_assume___p87__)&& (variable_map_assume___p88__)&& (variable_map_assume___p89__)&& (variable_map_assume___p90__)&& (variable_map_assume___p91__)&& (variable_map_assume___p92__)&& (variable_map_assume___p93__)&& (variable_map_assume___p94__)&& (variable_map_assume___p95__)&& (variable_map_assume___p96__)&& (variable_map_assume___p97__)&& (variable_map_assume___p98__)&& (variable_map_assume___p99__)&& (variable_map_assume___p100__)&& (variable_map_assume___p101__)&& (variable_map_assume___p102__)&& (variable_map_assume___p103__)&& (variable_map_assume___p104__)&& (variable_map_assume___p105__)&& (variable_map_assume___p106__)&& (variable_map_assume___p107__)&& (variable_map_assume___p108__)&& (variable_map_assume___p109__)&& (variable_map_assume___p110__)&& (variable_map_assume___p111__)&& (variable_map_assume___p112__)&& (variable_map_assume___p113__)&& (variable_map_assume___p114__)&& (variable_map_assume___p115__)&& (variable_map_assume___p116__)&& (variable_map_assume___p117__) ;
  all_assume: assume property ( __all_assume_wire__ ); // the only sanity assertion 

  assign __sanitycheck_wire__ = (post_value_holder_overly_constrained__p153__) && (post_value_holder_overly_constrained__p154__) && (post_value_holder_overly_constrained__p155__) && (post_value_holder_overly_constrained__p156__) && (post_value_holder_overly_constrained__p157__) && (post_value_holder_overly_constrained__p158__) && (post_value_holder_overly_constrained__p159__) && (post_value_holder_overly_constrained__p160__) && (post_value_holder_overly_constrained__p161__) && (post_value_holder_overly_constrained__p162__) && (post_value_holder_overly_constrained__p163__) && (post_value_holder_overly_constrained__p164__) && (post_value_holder_overly_constrained__p165__) && (post_value_holder_overly_constrained__p166__) && (post_value_holder_overly_constrained__p167__) && (post_value_holder_overly_constrained__p168__) && (post_value_holder_overly_constrained__p169__) && (post_value_holder_overly_constrained__p170__) && (post_value_holder_overly_constrained__p171__) && (post_value_holder_overly_constrained__p172__) && (post_value_holder_overly_constrained__p173__) && (post_value_holder_overly_constrained__p174__) && (post_value_holder_overly_constrained__p175__) && (post_value_holder_overly_constrained__p176__) && (post_value_holder_overly_constrained__p177__) && (post_value_holder_overly_constrained__p178__) && (post_value_holder_overly_constrained__p179__) && (post_value_holder_overly_constrained__p180__) && (post_value_holder_overly_constrained__p181__) && (post_value_holder_overly_constrained__p182__) && (post_value_holder_overly_constrained__p183__) && (post_value_holder_overly_constrained__p184__) && (post_value_holder_overly_constrained__p185__) && (post_value_holder_overly_constrained__p186__) && (post_value_holder_overly_constrained__p187__) && (post_value_holder_overly_constrained__p188__) && (post_value_holder_overly_constrained__p189__) && (post_value_holder_overly_constrained__p190__) && (post_value_holder_triggered__p191__) && (post_value_holder_triggered__p192__) && (post_value_holder_triggered__p193__) && (post_value_holder_triggered__p194__) && (post_value_holder_triggered__p195__) && (post_value_holder_triggered__p196__) && (post_value_holder_triggered__p197__) && (post_value_holder_triggered__p198__) && (post_value_holder_triggered__p199__) && (post_value_holder_triggered__p200__) && (post_value_holder_triggered__p201__) && (post_value_holder_triggered__p202__) && (post_value_holder_triggered__p203__) && (post_value_holder_triggered__p204__) && (post_value_holder_triggered__p205__) && (post_value_holder_triggered__p206__) && (post_value_holder_triggered__p207__) && (post_value_holder_triggered__p208__) && (post_value_holder_triggered__p209__) && (post_value_holder_triggered__p210__) && (post_value_holder_triggered__p211__) && (post_value_holder_triggered__p212__) && (post_value_holder_triggered__p213__) && (post_value_holder_triggered__p214__) && (post_value_holder_triggered__p215__) && (post_value_holder_triggered__p216__) && (post_value_holder_triggered__p217__) && (post_value_holder_triggered__p218__) && (post_value_holder_triggered__p219__) && (post_value_holder_triggered__p220__) && (post_value_holder_triggered__p221__) && (post_value_holder_triggered__p222__) && (post_value_holder_triggered__p223__) && (post_value_holder_triggered__p224__) && (post_value_holder_triggered__p225__) && (post_value_holder_triggered__p226__) && (post_value_holder_triggered__p227__) && (post_value_holder_triggered__p228__) ;
  sanitycheck: assert property ( __sanitycheck_wire__ ); // the only assumption 
endmodule  /* wrapper */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 2781. */
module riscv__DOT__ADD(__START__, clk, inst, rst, __ILA_riscv_decode_of_ADD__, __ILA_riscv_valid__, pc, load_en, load_addr, load_size, load_data, store_en, store_addr, store_size, store_data, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, __COUNTER_start__n11);
  input __START__;
  input clk;
  input [31:0] inst;
  input rst;
  output __ILA_riscv_decode_of_ADD__;
  output __ILA_riscv_valid__;
  output [31:0] pc;
  output load_en;
  output [31:0] load_addr;
  output [2:0] load_size;
  output [31:0] load_data;
  output store_en;
  output [31:0] store_addr;
  output [2:0] store_size;
  output [31:0] store_data;
  output [31:0] x0;
  output [31:0] x1;
  output [31:0] x2;
  output [31:0] x3;
  output [31:0] x4;
  output [31:0] x5;
  output [31:0] x6;
  output [31:0] x7;
  output [31:0] x8;
  output [31:0] x9;
  output [31:0] x10;
  output [31:0] x11;
  output [31:0] x12;
  output [31:0] x13;
  output [31:0] x14;
  output [31:0] x15;
  output [31:0] x16;
  output [31:0] x17;
  output [31:0] x18;
  output [31:0] x19;
  output [31:0] x20;
  output [31:0] x21;
  output [31:0] x22;
  output [31:0] x23;
  output [31:0] x24;
  output [31:0] x25;
  output [31:0] x26;
  output [31:0] x27;
  output [31:0] x28;
  output [31:0] x29;
  output [31:0] x30;
  output [31:0] x31;
  output [7:0] __COUNTER_start__n11;

  reg [7:0] __COUNTER_start__n11;
  wire __ILA_riscv_decode_of_ADD__;
  wire __ILA_riscv_valid__;
  wire __START__;
  wire bv_1_0_n14;
  wire [31:0] bv_32_0_n15;
  wire [31:0] bv_32_4_n12;
  wire [2:0] bv_3_0_n4;
  wire [4:0] bv_5_10_n62;
  wire [4:0] bv_5_11_n60;
  wire [4:0] bv_5_12_n58;
  wire [4:0] bv_5_13_n56;
  wire [4:0] bv_5_14_n54;
  wire [4:0] bv_5_15_n52;
  wire [4:0] bv_5_16_n50;
  wire [4:0] bv_5_17_n48;
  wire [4:0] bv_5_18_n46;
  wire [4:0] bv_5_19_n44;
  wire [4:0] bv_5_1_n17;
  wire [4:0] bv_5_20_n42;
  wire [4:0] bv_5_21_n40;
  wire [4:0] bv_5_22_n38;
  wire [4:0] bv_5_23_n36;
  wire [4:0] bv_5_24_n34;
  wire [4:0] bv_5_25_n32;
  wire [4:0] bv_5_26_n30;
  wire [4:0] bv_5_27_n28;
  wire [4:0] bv_5_28_n26;
  wire [4:0] bv_5_29_n24;
  wire [4:0] bv_5_2_n78;
  wire [4:0] bv_5_30_n22;
  wire [4:0] bv_5_31_n20;
  wire [4:0] bv_5_3_n76;
  wire [4:0] bv_5_4_n74;
  wire [4:0] bv_5_5_n72;
  wire [4:0] bv_5_6_n70;
  wire [4:0] bv_5_7_n68;
  wire [4:0] bv_5_8_n66;
  wire [4:0] bv_5_9_n64;
  wire [6:0] bv_7_0_n8;
  wire [6:0] bv_7_51_n1;
  wire clk;
  wire [31:0] inst;
  reg [31:0] load_addr;
  wire [31:0] load_addr_randinit;
  reg [31:0] load_data;
  wire [31:0] load_data_randinit;
  reg load_en;
  wire load_en_randinit;
  reg [2:0] load_size;
  wire [2:0] load_size_randinit;
  wire [6:0] n0;
  wire n10;
  wire [31:0] n100;
  wire [31:0] n101;
  wire [31:0] n102;
  wire [31:0] n103;
  wire [31:0] n104;
  wire [31:0] n105;
  wire [31:0] n106;
  wire [31:0] n107;
  wire [31:0] n108;
  wire [31:0] n109;
  wire [31:0] n110;
  wire [31:0] n111;
  wire [4:0] n112;
  wire n113;
  wire n114;
  wire n115;
  wire n116;
  wire n117;
  wire n118;
  wire n119;
  wire n120;
  wire n121;
  wire n122;
  wire n123;
  wire n124;
  wire n125;
  wire n126;
  wire n127;
  wire n128;
  wire n129;
  wire [31:0] n13;
  wire n130;
  wire n131;
  wire n132;
  wire n133;
  wire n134;
  wire n135;
  wire n136;
  wire n137;
  wire n138;
  wire n139;
  wire n140;
  wire n141;
  wire n142;
  wire n143;
  wire [31:0] n144;
  wire [31:0] n145;
  wire [31:0] n146;
  wire [31:0] n147;
  wire [31:0] n148;
  wire [31:0] n149;
  wire [31:0] n150;
  wire [31:0] n151;
  wire [31:0] n152;
  wire [31:0] n153;
  wire [31:0] n154;
  wire [31:0] n155;
  wire [31:0] n156;
  wire [31:0] n157;
  wire [31:0] n158;
  wire [31:0] n159;
  wire [4:0] n16;
  wire [31:0] n160;
  wire [31:0] n161;
  wire [31:0] n162;
  wire [31:0] n163;
  wire [31:0] n164;
  wire [31:0] n165;
  wire [31:0] n166;
  wire [31:0] n167;
  wire [31:0] n168;
  wire [31:0] n169;
  wire [31:0] n170;
  wire [31:0] n171;
  wire [31:0] n172;
  wire [31:0] n173;
  wire [31:0] n174;
  wire [31:0] n175;
  wire [31:0] n176;
  wire n177;
  wire [31:0] n178;
  wire n179;
  wire n18;
  wire [31:0] n180;
  wire n181;
  wire [31:0] n182;
  wire n183;
  wire [31:0] n184;
  wire n185;
  wire [31:0] n186;
  wire n187;
  wire [31:0] n188;
  wire n189;
  wire [4:0] n19;
  wire [31:0] n190;
  wire n191;
  wire [31:0] n192;
  wire n193;
  wire [31:0] n194;
  wire n195;
  wire [31:0] n196;
  wire n197;
  wire [31:0] n198;
  wire n199;
  wire n2;
  wire [31:0] n200;
  wire n201;
  wire [31:0] n202;
  wire n203;
  wire [31:0] n204;
  wire n205;
  wire [31:0] n206;
  wire n207;
  wire [31:0] n208;
  wire n209;
  wire n21;
  wire [31:0] n210;
  wire n211;
  wire [31:0] n212;
  wire n213;
  wire [31:0] n214;
  wire n215;
  wire [31:0] n216;
  wire n217;
  wire [31:0] n218;
  wire n219;
  wire [31:0] n220;
  wire n221;
  wire [31:0] n222;
  wire n223;
  wire [31:0] n224;
  wire n225;
  wire [31:0] n226;
  wire n227;
  wire [31:0] n228;
  wire n229;
  wire n23;
  wire [31:0] n230;
  wire n231;
  wire [31:0] n232;
  wire n233;
  wire [31:0] n234;
  wire n235;
  wire [31:0] n236;
  wire n25;
  wire n27;
  wire n29;
  wire [2:0] n3;
  wire n31;
  wire n33;
  wire n35;
  wire n37;
  wire n39;
  wire n41;
  wire n43;
  wire n45;
  wire n47;
  wire n49;
  wire n5;
  wire n51;
  wire n53;
  wire n55;
  wire n57;
  wire n59;
  wire n6;
  wire n61;
  wire n63;
  wire n65;
  wire n67;
  wire n69;
  wire [6:0] n7;
  wire n71;
  wire n73;
  wire n75;
  wire n77;
  wire n79;
  wire n80;
  wire [31:0] n81;
  wire [31:0] n82;
  wire [31:0] n83;
  wire [31:0] n84;
  wire [31:0] n85;
  wire [31:0] n86;
  wire [31:0] n87;
  wire [31:0] n88;
  wire [31:0] n89;
  wire n9;
  wire [31:0] n90;
  wire [31:0] n91;
  wire [31:0] n92;
  wire [31:0] n93;
  wire [31:0] n94;
  wire [31:0] n95;
  wire [31:0] n96;
  wire [31:0] n97;
  wire [31:0] n98;
  wire [31:0] n99;
  reg [31:0] pc;
  wire [31:0] pc_randinit;
  wire rst;
  reg [31:0] store_addr;
  wire [31:0] store_addr_randinit;
  reg [31:0] store_data;
  wire [31:0] store_data_randinit;
  reg store_en;
  wire store_en_randinit;
  reg [2:0] store_size;
  wire [2:0] store_size_randinit;
  reg [31:0] x0;
  wire [31:0] x0_randinit;
  reg [31:0] x1;
  reg [31:0] x10;
  wire [31:0] x10_randinit;
  reg [31:0] x11;
  wire [31:0] x11_randinit;
  reg [31:0] x12;
  wire [31:0] x12_randinit;
  reg [31:0] x13;
  wire [31:0] x13_randinit;
  reg [31:0] x14;
  wire [31:0] x14_randinit;
  reg [31:0] x15;
  wire [31:0] x15_randinit;
  reg [31:0] x16;
  wire [31:0] x16_randinit;
  reg [31:0] x17;
  wire [31:0] x17_randinit;
  reg [31:0] x18;
  wire [31:0] x18_randinit;
  reg [31:0] x19;
  wire [31:0] x19_randinit;
  wire [31:0] x1_randinit;
  reg [31:0] x2;
  reg [31:0] x20;
  wire [31:0] x20_randinit;
  reg [31:0] x21;
  wire [31:0] x21_randinit;
  reg [31:0] x22;
  wire [31:0] x22_randinit;
  reg [31:0] x23;
  wire [31:0] x23_randinit;
  reg [31:0] x24;
  wire [31:0] x24_randinit;
  reg [31:0] x25;
  wire [31:0] x25_randinit;
  reg [31:0] x26;
  wire [31:0] x26_randinit;
  reg [31:0] x27;
  wire [31:0] x27_randinit;
  reg [31:0] x28;
  wire [31:0] x28_randinit;
  reg [31:0] x29;
  wire [31:0] x29_randinit;
  wire [31:0] x2_randinit;
  reg [31:0] x3;
  reg [31:0] x30;
  wire [31:0] x30_randinit;
  reg [31:0] x31;
  wire [31:0] x31_randinit;
  wire [31:0] x3_randinit;
  reg [31:0] x4;
  wire [31:0] x4_randinit;
  reg [31:0] x5;
  wire [31:0] x5_randinit;
  reg [31:0] x6;
  wire [31:0] x6_randinit;
  reg [31:0] x7;
  wire [31:0] x7_randinit;
  reg [31:0] x8;
  wire [31:0] x8_randinit;
  reg [31:0] x9;
  wire [31:0] x9_randinit;


  assign __ILA_riscv_valid__ = 1'b1;
  assign bv_1_0_n14 = 1'b0;
  assign bv_32_0_n15 = 32'h00000000;
  assign bv_32_4_n12 = 32'h00000004;
  assign bv_3_0_n4 = 3'h0;
  assign bv_5_10_n62 = 5'h0a;
  assign bv_5_11_n60 = 5'h0b;
  assign bv_5_12_n58 = 5'h0c;
  assign bv_5_13_n56 = 5'h0d;
  assign bv_5_14_n54 = 5'h0e;
  assign bv_5_15_n52 = 5'h0f;
  assign bv_5_16_n50 = 5'h10;
  assign bv_5_17_n48 = 5'h11;
  assign bv_5_18_n46 = 5'h12;
  assign bv_5_19_n44 = 5'h13;
  assign bv_5_1_n17 = 5'h01;
  assign bv_5_20_n42 = 5'h14;
  assign bv_5_21_n40 = 5'h15;
  assign bv_5_22_n38 = 5'h16;
  assign bv_5_23_n36 = 5'h17;
  assign bv_5_24_n34 = 5'h18;
  assign bv_5_25_n32 = 5'h19;
  assign bv_5_26_n30 = 5'h1a;
  assign bv_5_27_n28 = 5'h1b;
  assign bv_5_28_n26 = 5'h1c;
  assign bv_5_29_n24 = 5'h1d;
  assign bv_5_2_n78 = 5'h02;
  assign bv_5_30_n22 = 5'h1e;
  assign bv_5_31_n20 = 5'h1f;
  assign bv_5_3_n76 = 5'h03;
  assign bv_5_4_n74 = 5'h04;
  assign bv_5_5_n72 = 5'h05;
  assign bv_5_6_n70 = 5'h06;
  assign bv_5_7_n68 = 5'h07;
  assign bv_5_8_n66 = 5'h08;
  assign bv_5_9_n64 = 5'h09;
  assign bv_7_0_n8 = 7'h00;
  assign bv_7_51_n1 = 7'h33;

  assign n0 = inst[6:0];
  assign n2 = (n0 == bv_7_51_n1);
  assign n3 = inst[14:12];
  assign n5 = (n3 == bv_3_0_n4);
  assign n7 = inst[31:25];
  assign n9 = (n7 == bv_7_0_n8);
  assign n13 = (pc + bv_32_4_n12);
  assign n16 = inst[11:7];
  assign n18 = (n16 == bv_5_1_n17);
  assign n19 = inst[19:15];
  assign n21 = (n19 == bv_5_31_n20);
  assign n23 = (n19 == bv_5_30_n22);
  assign n25 = (n19 == bv_5_29_n24);
  assign n27 = (n19 == bv_5_28_n26);
  assign n29 = (n19 == bv_5_27_n28);
  assign n31 = (n19 == bv_5_26_n30);
  assign n33 = (n19 == bv_5_25_n32);
  assign n35 = (n19 == bv_5_24_n34);
  assign n37 = (n19 == bv_5_23_n36);
  assign n39 = (n19 == bv_5_22_n38);
  assign n41 = (n19 == bv_5_21_n40);
  assign n43 = (n19 == bv_5_20_n42);
  assign n45 = (n19 == bv_5_19_n44);
  assign n47 = (n19 == bv_5_18_n46);
  assign n49 = (n19 == bv_5_17_n48);
  assign n51 = (n19 == bv_5_16_n50);
  assign n53 = (n19 == bv_5_15_n52);
  assign n55 = (n19 == bv_5_14_n54);
  assign n57 = (n19 == bv_5_13_n56);
  assign n59 = (n19 == bv_5_12_n58);
  assign n61 = (n19 == bv_5_11_n60);
  assign n63 = (n19 == bv_5_10_n62);
  assign n65 = (n19 == bv_5_9_n64);
  assign n67 = (n19 == bv_5_8_n66);
  assign n69 = (n19 == bv_5_7_n68);
  assign n71 = (n19 == bv_5_6_n70);
  assign n73 = (n19 == bv_5_5_n72);
  assign n75 = (n19 == bv_5_4_n74);
  assign n77 = (n19 == bv_5_3_n76);
  assign n79 = (n19 == bv_5_2_n78);
  assign n80 = (n19 == bv_5_1_n17);
  assign n81 = (n80 ? x1 : bv_32_0_n15);
  assign n82 = (n79 ? x2 : n81);
  assign n83 = (n77 ? x3 : n82);
  assign n84 = (n75 ? x4 : n83);
  assign n85 = (n73 ? x5 : n84);
  assign n86 = (n71 ? x6 : n85);
  assign n87 = (n69 ? x7 : n86);
  assign n88 = (n67 ? x8 : n87);
  assign n89 = (n65 ? x9 : n88);
  assign n90 = (n63 ? x10 : n89);
  assign n91 = (n61 ? x11 : n90);
  assign n92 = (n59 ? x12 : n91);
  assign n93 = (n57 ? x13 : n92);
  assign n94 = (n55 ? x14 : n93);
  assign n95 = (n53 ? x15 : n94);
  assign n96 = (n51 ? x16 : n95);
  assign n97 = (n49 ? x17 : n96);
  assign n98 = (n47 ? x18 : n97);
  assign n99 = (n45 ? x19 : n98);
  assign n100 = (n43 ? x20 : n99);
  assign n101 = (n41 ? x21 : n100);
  assign n102 = (n39 ? x22 : n101);
  assign n103 = (n37 ? x23 : n102);
  assign n104 = (n35 ? x24 : n103);
  assign n105 = (n33 ? x25 : n104);
  assign n106 = (n31 ? x26 : n105);
  assign n107 = (n29 ? x27 : n106);
  assign n108 = (n27 ? x28 : n107);
  assign n109 = (n25 ? x29 : n108);
  assign n110 = (n23 ? x30 : n109);
  assign n111 = (n21 ? x31 : n110);
  assign n112 = inst[24:20];
  assign n113 = (n112 == bv_5_31_n20);
  assign n114 = (n112 == bv_5_30_n22);
  assign n115 = (n112 == bv_5_29_n24);
  assign n116 = (n112 == bv_5_28_n26);
  assign n117 = (n112 == bv_5_27_n28);
  assign n118 = (n112 == bv_5_26_n30);
  assign n119 = (n112 == bv_5_25_n32);
  assign n120 = (n112 == bv_5_24_n34);
  assign n121 = (n112 == bv_5_23_n36);
  assign n122 = (n112 == bv_5_22_n38);
  assign n123 = (n112 == bv_5_21_n40);
  assign n124 = (n112 == bv_5_20_n42);
  assign n125 = (n112 == bv_5_19_n44);
  assign n126 = (n112 == bv_5_18_n46);
  assign n127 = (n112 == bv_5_17_n48);
  assign n128 = (n112 == bv_5_16_n50);
  assign n129 = (n112 == bv_5_15_n52);
  assign n130 = (n112 == bv_5_14_n54);
  assign n131 = (n112 == bv_5_13_n56);
  assign n132 = (n112 == bv_5_12_n58);
  assign n133 = (n112 == bv_5_11_n60);
  assign n134 = (n112 == bv_5_10_n62);
  assign n135 = (n112 == bv_5_9_n64);
  assign n136 = (n112 == bv_5_8_n66);
  assign n137 = (n112 == bv_5_7_n68);
  assign n138 = (n112 == bv_5_6_n70);
  assign n139 = (n112 == bv_5_5_n72);
  assign n140 = (n112 == bv_5_4_n74);
  assign n141 = (n112 == bv_5_3_n76);
  assign n142 = (n112 == bv_5_2_n78);
  assign n143 = (n112 == bv_5_1_n17);
  assign n144 = (n143 ? x1 : bv_32_0_n15);
  assign n145 = (n142 ? x2 : n144);
  assign n146 = (n141 ? x3 : n145);
  assign n147 = (n140 ? x4 : n146);
  assign n148 = (n139 ? x5 : n147);
  assign n149 = (n138 ? x6 : n148);
  assign n150 = (n137 ? x7 : n149);
  assign n151 = (n136 ? x8 : n150);
  assign n152 = (n135 ? x9 : n151);
  assign n153 = (n134 ? x10 : n152);
  assign n154 = (n133 ? x11 : n153);
  assign n155 = (n132 ? x12 : n154);
  assign n156 = (n131 ? x13 : n155);
  assign n157 = (n130 ? x14 : n156);
  assign n158 = (n129 ? x15 : n157);
  assign n159 = (n128 ? x16 : n158);
  assign n160 = (n127 ? x17 : n159);
  assign n161 = (n126 ? x18 : n160);
  assign n162 = (n125 ? x19 : n161);
  assign n163 = (n124 ? x20 : n162);
  assign n164 = (n123 ? x21 : n163);
  assign n165 = (n122 ? x22 : n164);
  assign n166 = (n121 ? x23 : n165);
  assign n167 = (n120 ? x24 : n166);
  assign n168 = (n119 ? x25 : n167);
  assign n169 = (n118 ? x26 : n168);
  assign n170 = (n117 ? x27 : n169);
  assign n171 = (n116 ? x28 : n170);
  assign n172 = (n115 ? x29 : n171);
  assign n173 = (n114 ? x30 : n172);
  assign n174 = (n113 ? x31 : n173);
  assign n175 = (n111 + n174);
  assign n176 = (n18 ? n175 : x1);
  assign n177 = (n16 == bv_5_2_n78);
  assign n178 = (n177 ? n175 : x2);
  assign n179 = (n16 == bv_5_3_n76);
  assign n180 = (n179 ? n175 : x3);
  assign n181 = (n16 == bv_5_4_n74);
  assign n182 = (n181 ? n175 : x4);
  assign n183 = (n16 == bv_5_5_n72);
  assign n184 = (n183 ? n175 : x5);
  assign n185 = (n16 == bv_5_6_n70);
  assign n186 = (n185 ? n175 : x6);
  assign n187 = (n16 == bv_5_7_n68);
  assign n188 = (n187 ? n175 : x7);
  assign n189 = (n16 == bv_5_8_n66);
  assign n190 = (n189 ? n175 : x8);
  assign n191 = (n16 == bv_5_9_n64);
  assign n192 = (n191 ? n175 : x9);
  assign n193 = (n16 == bv_5_10_n62);
  assign n194 = (n193 ? n175 : x10);
  assign n195 = (n16 == bv_5_11_n60);
  assign n196 = (n195 ? n175 : x11);
  assign n197 = (n16 == bv_5_12_n58);
  assign n198 = (n197 ? n175 : x12);
  assign n199 = (n16 == bv_5_13_n56);
  assign n200 = (n199 ? n175 : x13);
  assign n201 = (n16 == bv_5_14_n54);
  assign n202 = (n201 ? n175 : x14);
  assign n203 = (n16 == bv_5_15_n52);
  assign n204 = (n203 ? n175 : x15);
  assign n205 = (n16 == bv_5_16_n50);
  assign n206 = (n205 ? n175 : x16);
  assign n207 = (n16 == bv_5_17_n48);
  assign n208 = (n207 ? n175 : x17);
  assign n209 = (n16 == bv_5_18_n46);
  assign n210 = (n209 ? n175 : x18);
  assign n211 = (n16 == bv_5_19_n44);
  assign n212 = (n211 ? n175 : x19);
  assign n213 = (n16 == bv_5_20_n42);
  assign n214 = (n213 ? n175 : x20);
  assign n215 = (n16 == bv_5_21_n40);
  assign n216 = (n215 ? n175 : x21);
  assign n217 = (n16 == bv_5_22_n38);
  assign n218 = (n217 ? n175 : x22);
  assign n219 = (n16 == bv_5_23_n36);
  assign n220 = (n219 ? n175 : x23);
  assign n221 = (n16 == bv_5_24_n34);
  assign n222 = (n221 ? n175 : x24);
  assign n223 = (n16 == bv_5_25_n32);
  assign n224 = (n223 ? n175 : x25);
  assign n225 = (n16 == bv_5_26_n30);
  assign n226 = (n225 ? n175 : x26);
  assign n227 = (n16 == bv_5_27_n28);
  assign n228 = (n227 ? n175 : x27);
  assign n229 = (n16 == bv_5_28_n26);
  assign n230 = (n229 ? n175 : x28);
  assign n231 = (n16 == bv_5_29_n24);
  assign n232 = (n231 ? n175 : x29);
  assign n233 = (n16 == bv_5_30_n22);
  assign n234 = (n233 ? n175 : x30);
  assign n235 = (n16 == bv_5_31_n20);
  assign n236 = (n235 ? n175 : x31);
  assign n6 = (n2 & n5);
  assign n10 = (n6 & n9);
  assign __ILA_riscv_decode_of_ADD__ = n10;

  always @(posedge clk) if (rst) begin
    pc <= pc_randinit;
    load_en <= load_en_randinit;
    load_addr <= load_addr_randinit;
    load_size <= load_size_randinit;
    load_data <= load_data_randinit;
    store_en <= store_en_randinit;
    store_addr <= store_addr_randinit;
    store_size <= store_size_randinit;
    store_data <= store_data_randinit;
    x0 <= x0_randinit;
    x1 <= x1_randinit;
    x2 <= x2_randinit;
    x3 <= x3_randinit;
    x4 <= x4_randinit;
    x5 <= x5_randinit;
    x6 <= x6_randinit;
    x7 <= x7_randinit;
    x8 <= x8_randinit;
    x9 <= x9_randinit;
    x10 <= x10_randinit;
    x11 <= x11_randinit;
    x12 <= x12_randinit;
    x13 <= x13_randinit;
    x14 <= x14_randinit;
    x15 <= x15_randinit;
    x16 <= x16_randinit;
    x17 <= x17_randinit;
    x18 <= x18_randinit;
    x19 <= x19_randinit;
    x20 <= x20_randinit;
    x21 <= x21_randinit;
    x22 <= x22_randinit;
    x23 <= x23_randinit;
    x24 <= x24_randinit;
    x25 <= x25_randinit;
    x26 <= x26_randinit;
    x27 <= x27_randinit;
    x28 <= x28_randinit;
    x29 <= x29_randinit;
    x30 <= x30_randinit;
    x31 <= x31_randinit;
    __COUNTER_start__n11 <= 0;
  end
  else if ((__START__ && __ILA_riscv_valid__)) begin
    if (__ILA_riscv_decode_of_ADD__) __COUNTER_start__n11 <= 1;
    else if (((__COUNTER_start__n11 >= 32'h00000001) && (__COUNTER_start__n11 < 32'h000000ff))) __COUNTER_start__n11 <= (__COUNTER_start__n11 + 8'h01);
    if (__ILA_riscv_decode_of_ADD__) pc <= n13;
    if (__ILA_riscv_decode_of_ADD__) load_en <= bv_1_0_n14;
    if (__ILA_riscv_decode_of_ADD__) load_addr <= load_addr;
    if (__ILA_riscv_decode_of_ADD__) load_size <= load_size;
    if (__ILA_riscv_decode_of_ADD__) load_data <= load_data;
    if (__ILA_riscv_decode_of_ADD__) store_en <= bv_1_0_n14;
    if (__ILA_riscv_decode_of_ADD__) store_addr <= store_addr;
    if (__ILA_riscv_decode_of_ADD__) store_size <= store_size;
    if (__ILA_riscv_decode_of_ADD__) store_data <= store_data;
    if (__ILA_riscv_decode_of_ADD__) x0 <= bv_32_0_n15;
    if (__ILA_riscv_decode_of_ADD__) x1 <= n176;
    if (__ILA_riscv_decode_of_ADD__) x2 <= n178;
    if (__ILA_riscv_decode_of_ADD__) x3 <= n180;
    if (__ILA_riscv_decode_of_ADD__) x4 <= n182;
    if (__ILA_riscv_decode_of_ADD__) x5 <= n184;
    if (__ILA_riscv_decode_of_ADD__) x6 <= n186;
    if (__ILA_riscv_decode_of_ADD__) x7 <= n188;
    if (__ILA_riscv_decode_of_ADD__) x8 <= n190;
    if (__ILA_riscv_decode_of_ADD__) x9 <= n192;
    if (__ILA_riscv_decode_of_ADD__) x10 <= n194;
    if (__ILA_riscv_decode_of_ADD__) x11 <= n196;
    if (__ILA_riscv_decode_of_ADD__) x12 <= n198;
    if (__ILA_riscv_decode_of_ADD__) x13 <= n200;
    if (__ILA_riscv_decode_of_ADD__) x14 <= n202;
    if (__ILA_riscv_decode_of_ADD__) x15 <= n204;
    if (__ILA_riscv_decode_of_ADD__) x16 <= n206;
    if (__ILA_riscv_decode_of_ADD__) x17 <= n208;
    if (__ILA_riscv_decode_of_ADD__) x18 <= n210;
    if (__ILA_riscv_decode_of_ADD__) x19 <= n212;
    if (__ILA_riscv_decode_of_ADD__) x20 <= n214;
    if (__ILA_riscv_decode_of_ADD__) x21 <= n216;
    if (__ILA_riscv_decode_of_ADD__) x22 <= n218;
    if (__ILA_riscv_decode_of_ADD__) x23 <= n220;
    if (__ILA_riscv_decode_of_ADD__) x24 <= n222;
    if (__ILA_riscv_decode_of_ADD__) x25 <= n224;
    if (__ILA_riscv_decode_of_ADD__) x26 <= n226;
    if (__ILA_riscv_decode_of_ADD__) x27 <= n228;
    if (__ILA_riscv_decode_of_ADD__) x28 <= n230;
    if (__ILA_riscv_decode_of_ADD__) x29 <= n232;
    if (__ILA_riscv_decode_of_ADD__) x30 <= n234;
    if (__ILA_riscv_decode_of_ADD__) x31 <= n236;
  end
endmodule  /* riscv__DOT__ADD */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 4114. */
module mkCPU(CLK, RST_N, hart0_server_reset_request_put, EN_hart0_server_reset_request_put, RDY_hart0_server_reset_request_put, EN_hart0_server_reset_response_get, hart0_server_reset_response_get, RDY_hart0_server_reset_response_get, imem_master_awvalid, imem_master_awid, imem_master_awaddr, imem_master_awlen, imem_master_awsize, imem_master_awburst, imem_master_awlock, imem_master_awcache, imem_master_awprot, imem_master_awqos, imem_master_awregion, imem_master_awready, imem_master_wvalid, imem_master_wdata, imem_master_wstrb, imem_master_wlast, imem_master_wready, imem_master_bvalid, imem_master_bid, imem_master_bresp, imem_master_bready, imem_master_arvalid, imem_master_arid, imem_master_araddr, imem_master_arlen, imem_master_arsize, imem_master_arburst, imem_master_arlock, imem_master_arcache, imem_master_arprot, imem_master_arqos, imem_master_arregion, imem_master_arready, imem_master_rvalid, imem_master_rid, imem_master_rdata, imem_master_rresp, imem_master_rlast, imem_master_rready, dmem_master_awvalid, dmem_master_awid, dmem_master_awaddr, dmem_master_awlen, dmem_master_awsize, dmem_master_awburst, dmem_master_awlock, dmem_master_awcache, dmem_master_awprot, dmem_master_awqos, dmem_master_awregion, dmem_master_awready, dmem_master_wvalid, dmem_master_wdata, dmem_master_wstrb, dmem_master_wlast, dmem_master_wready, dmem_master_bvalid, dmem_master_bid, dmem_master_bresp, dmem_master_bready, dmem_master_arvalid, dmem_master_arid, dmem_master_araddr, dmem_master_arlen, dmem_master_arsize, dmem_master_arburst, dmem_master_arlock, dmem_master_arcache, dmem_master_arprot, dmem_master_arqos, dmem_master_arregion, dmem_master_arready, dmem_master_rvalid, dmem_master_rid, dmem_master_rdata, dmem_master_rresp, dmem_master_rlast, dmem_master_rready, m_external_interrupt_req_set_not_clear, s_external_interrupt_req_set_not_clear, software_interrupt_req_set_not_clear, timer_interrupt_req_set_not_clear, nmi_req_set_not_clear, set_verbosity_verbosity, set_verbosity_logdelay, EN_set_verbosity, RDY_set_verbosity, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_4_, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem$dmem_req_op, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__rg_trap_instr, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem$dmem_req_store_value, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_20_, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem$dmem_word64, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_5_, RTL__DOT__near_mem__DOT__dcache__DOT__rg_addr, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg, RTL__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__s1_to_s2$D_IN, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_9_, RTL__DOT__stage2_rg_full, RTL__DOT__csr_regfile__DOT__rg_state, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__stage1_rg_full, RTL__DOT__stage1_f_reset_rsps__DOT__full_reg, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_14_, RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__stage1_f_reset_reqs__DOT__full_reg, RTL__DOT__rg_run_on_reset, RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg, RTL__DOT__stage3_f_reset_reqs__DOT__full_reg, RTL__DOT__s2_to_s3$EN, RTL__DOT__near_mem$dmem_req_f3, RTL__DOT__s1_to_s2$EN, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_3_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_8_, RTL__DOT__s3_deq$EN, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__rg_state, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__rg_retiring$EN, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__s2_to_s3$D_IN, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_11_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_18_, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_24_, RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_2_, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__stage2_f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__stage3_f_reset_rsps__DOT__full_reg, RTL__DOT__stage3_rg_full, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_28_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_17_, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_21_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_22_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_23_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_25_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_27_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_29_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_31_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_6_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_1_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_10_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_7_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_12_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_15_, RTL__DOT__stage2_rg_stage2, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_19_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_13_, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__csr_regfile__DOT__rg_nmi, RTL__DOT__near_mem__DOT__dcache__DOT__rg_pa, RTL__DOT__near_mem$EN_dmem_req, RTL__DOT__stage2_f_reset_reqs__DOT__full_reg, RTL__DOT__rg_cur_priv, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_26_, RTL__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg, RTL__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_30_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_16_, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem$dmem_req_addr, RTL__DOT__near_mem$imem_instr, RTL__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem$imem_pc, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem$dmem_exc, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__s3_deq$D_IN);
  input CLK;
  input RST_N;
  input hart0_server_reset_request_put;
  input EN_hart0_server_reset_request_put;
  output RDY_hart0_server_reset_request_put;
  input EN_hart0_server_reset_response_get;
  output hart0_server_reset_response_get;
  output RDY_hart0_server_reset_response_get;
  output imem_master_awvalid;
  output [3:0] imem_master_awid;
  output [63:0] imem_master_awaddr;
  output [7:0] imem_master_awlen;
  output [2:0] imem_master_awsize;
  output [1:0] imem_master_awburst;
  output imem_master_awlock;
  output [3:0] imem_master_awcache;
  output [2:0] imem_master_awprot;
  output [3:0] imem_master_awqos;
  output [3:0] imem_master_awregion;
  input imem_master_awready;
  output imem_master_wvalid;
  output [63:0] imem_master_wdata;
  output [7:0] imem_master_wstrb;
  output imem_master_wlast;
  input imem_master_wready;
  input imem_master_bvalid;
  input [3:0] imem_master_bid;
  input [1:0] imem_master_bresp;
  output imem_master_bready;
  output imem_master_arvalid;
  output [3:0] imem_master_arid;
  output [63:0] imem_master_araddr;
  output [7:0] imem_master_arlen;
  output [2:0] imem_master_arsize;
  output [1:0] imem_master_arburst;
  output imem_master_arlock;
  output [3:0] imem_master_arcache;
  output [2:0] imem_master_arprot;
  output [3:0] imem_master_arqos;
  output [3:0] imem_master_arregion;
  input imem_master_arready;
  input imem_master_rvalid;
  input [3:0] imem_master_rid;
  input [63:0] imem_master_rdata;
  input [1:0] imem_master_rresp;
  input imem_master_rlast;
  output imem_master_rready;
  output dmem_master_awvalid;
  output [3:0] dmem_master_awid;
  output [63:0] dmem_master_awaddr;
  output [7:0] dmem_master_awlen;
  output [2:0] dmem_master_awsize;
  output [1:0] dmem_master_awburst;
  output dmem_master_awlock;
  output [3:0] dmem_master_awcache;
  output [2:0] dmem_master_awprot;
  output [3:0] dmem_master_awqos;
  output [3:0] dmem_master_awregion;
  input dmem_master_awready;
  output dmem_master_wvalid;
  output [63:0] dmem_master_wdata;
  output [7:0] dmem_master_wstrb;
  output dmem_master_wlast;
  input dmem_master_wready;
  input dmem_master_bvalid;
  input [3:0] dmem_master_bid;
  input [1:0] dmem_master_bresp;
  output dmem_master_bready;
  output dmem_master_arvalid;
  output [3:0] dmem_master_arid;
  output [63:0] dmem_master_araddr;
  output [7:0] dmem_master_arlen;
  output [2:0] dmem_master_arsize;
  output [1:0] dmem_master_arburst;
  output dmem_master_arlock;
  output [3:0] dmem_master_arcache;
  output [2:0] dmem_master_arprot;
  output [3:0] dmem_master_arqos;
  output [3:0] dmem_master_arregion;
  input dmem_master_arready;
  input dmem_master_rvalid;
  input [3:0] dmem_master_rid;
  input [63:0] dmem_master_rdata;
  input [1:0] dmem_master_rresp;
  input dmem_master_rlast;
  output dmem_master_rready;
  input m_external_interrupt_req_set_not_clear;
  input s_external_interrupt_req_set_not_clear;
  input software_interrupt_req_set_not_clear;
  input timer_interrupt_req_set_not_clear;
  input nmi_req_set_not_clear;
  input [3:0] set_verbosity_verbosity;
  input [63:0] set_verbosity_logdelay;
  input EN_set_verbosity;
  output RDY_set_verbosity;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_4_;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem$dmem_req_op;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  output [31:0] RTL__DOT__rg_trap_instr;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  output [63:0] RTL__DOT__near_mem$dmem_req_store_value;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_20_;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output [63:0] RTL__DOT__near_mem$dmem_word64;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_5_;
  output [31:0] RTL__DOT__near_mem__DOT__dcache__DOT__rg_addr;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__s1_to_s2$D_IN;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_9_;
  output RTL__DOT__stage2_rg_full;
  output RTL__DOT__csr_regfile__DOT__rg_state;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__stage1_rg_full;
  output RTL__DOT__stage1_f_reset_rsps__DOT__full_reg;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_14_;
  output RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__stage1_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__rg_run_on_reset;
  output RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__stage3_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__s2_to_s3$EN;
  output [2:0] RTL__DOT__near_mem$dmem_req_f3;
  output RTL__DOT__s1_to_s2$EN;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_3_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_8_;
  output RTL__DOT__s3_deq$EN;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  output [3:0] RTL__DOT__rg_state;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__rg_retiring$EN;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__s2_to_s3$D_IN;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_11_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_18_;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_24_;
  output RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_2_;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__stage2_f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__stage3_f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage3_rg_full;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_28_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_17_;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_21_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_22_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_23_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_25_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_27_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_29_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_31_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_6_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_1_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_10_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_7_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_12_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_15_;
  output [168:0] RTL__DOT__stage2_rg_stage2;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_19_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_13_;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__csr_regfile__DOT__rg_nmi;
  output [31:0] RTL__DOT__near_mem__DOT__dcache__DOT__rg_pa;
  output RTL__DOT__near_mem$EN_dmem_req;
  output RTL__DOT__stage2_f_reset_reqs__DOT__full_reg;
  output [1:0] RTL__DOT__rg_cur_priv;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_26_;
  output RTL__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__f_reset_rsps__DOT__empty_reg;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_30_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_16_;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output [31:0] RTL__DOT__near_mem$dmem_req_addr;
  output [31:0] RTL__DOT__near_mem$imem_instr;
  output RTL__DOT__f_reset_reqs__DOT__full_reg;
  output [31:0] RTL__DOT__near_mem$imem_pc;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem$dmem_exc;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__s3_deq$D_IN;

  wire CAN_FIRE_RL_rl_WFI_resume;
  wire CAN_FIRE_RL_rl_finish_FENCE;
  wire CAN_FIRE_RL_rl_finish_FENCE_I;
  wire CAN_FIRE_RL_rl_finish_SFENCE_VMA;
  wire CAN_FIRE_RL_rl_pipe;
  wire CAN_FIRE_RL_rl_reset_complete;
  wire CAN_FIRE_RL_rl_reset_from_WFI;
  wire CAN_FIRE_RL_rl_reset_start;
  wire CAN_FIRE_RL_rl_show_pipe;
  wire CAN_FIRE_RL_rl_stage1_CSRR_S_or_C;
  wire CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2;
  wire CAN_FIRE_RL_rl_stage1_CSRR_W;
  wire CAN_FIRE_RL_rl_stage1_CSRR_W_2;
  wire CAN_FIRE_RL_rl_stage1_FENCE;
  wire CAN_FIRE_RL_rl_stage1_FENCE_I;
  wire CAN_FIRE_RL_rl_stage1_SFENCE_VMA;
  wire CAN_FIRE_RL_rl_stage1_WFI;
  wire CAN_FIRE_RL_rl_stage1_interrupt;
  wire CAN_FIRE_RL_rl_stage1_restart_after_csrrx;
  wire CAN_FIRE_RL_rl_stage1_trap;
  wire CAN_FIRE_RL_rl_stage1_xRET;
  wire CAN_FIRE_RL_rl_stage2_nonpipe;
  wire CAN_FIRE_RL_rl_trap;
  wire CAN_FIRE_RL_rl_trap_fetch;
  wire CAN_FIRE_RL_stage1_rl_reset;
  wire CAN_FIRE_RL_stage2_rl_reset_begin;
  wire CAN_FIRE_RL_stage2_rl_reset_end;
  wire CAN_FIRE_RL_stage3_rl_reset;
  wire CAN_FIRE_dmem_master_m_arready;
  wire CAN_FIRE_dmem_master_m_awready;
  wire CAN_FIRE_dmem_master_m_bvalid;
  wire CAN_FIRE_dmem_master_m_rvalid;
  wire CAN_FIRE_dmem_master_m_wready;
  wire CAN_FIRE_hart0_server_reset_request_put;
  wire CAN_FIRE_hart0_server_reset_response_get;
  wire CAN_FIRE_imem_master_m_arready;
  wire CAN_FIRE_imem_master_m_awready;
  wire CAN_FIRE_imem_master_m_bvalid;
  wire CAN_FIRE_imem_master_m_rvalid;
  wire CAN_FIRE_imem_master_m_wready;
  wire CAN_FIRE_m_external_interrupt_req;
  wire CAN_FIRE_nmi_req;
  wire CAN_FIRE_s_external_interrupt_req;
  wire CAN_FIRE_set_verbosity;
  wire CAN_FIRE_software_interrupt_req;
  wire CAN_FIRE_timer_interrupt_req;
  reg [3:0] CASE_near_memimem_instr_BITS_14_TO_12_0b0_0_0_ETC__q10;
  reg [3:0] CASE_near_memimem_instr_BITS_14_TO_12_0b0_0_0_ETC__q12;
  reg [3:0] CASE_near_memimem_instr_BITS_14_TO_12_0b0_4_0_ETC__q11;
  reg [3:0] CASE_near_memimem_instr_BITS_14_TO_12_0b0_IF__ETC__q13;
  reg [3:0] CASE_near_memimem_instr_BITS_31_TO_20_0b0_CAS_ETC__q4;
  reg CASE_near_memimem_instr_BITS_6_TO_0_0b10011_N_ETC__q8;
  reg CASE_near_memimem_instr_BITS_6_TO_0_0b10011_n_ETC__q9;
  reg [3:0] CASE_rg_cur_priv_0b0_8_0b1_9_11__q3;
  reg [1:0] CASE_stage2_rg_stage2_BITS_102_TO_101_0_2_1_IF_ETC__q5;
  wire CLK;
  wire EN_hart0_server_reset_request_put;
  wire EN_hart0_server_reset_response_get;
  wire EN_set_verbosity;
  wire [31:0] IF_IF_near_mem_imem_instr__59_BITS_6_TO_0_79_E_ETC___d655;
  wire [3:0] IF_NOT_near_mem_imem_instr__59_BITS_14_TO_12_8_ETC___d362;
  wire [3:0] IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415;
  reg [1:0] IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d491;
  wire [31:0] IF_csr_regfile_read_csr_rg_trap_instr_15_BITS__ETC___d868;
  wire [35:0] IF_near_mem_imem_exc__78_THEN_near_mem_imem_ex_ETC___d799;
  reg IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d227;
  wire IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d285;
  reg IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d291;
  wire IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d216;
  wire IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d218;
  wire IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d220;
  reg [3:0] IF_near_mem_imem_instr__59_BITS_31_TO_20_02_EQ_ETC___d396;
  wire IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d274;
  reg IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d308;
  wire IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d343;
  reg IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352;
  reg [3:0] IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d409;
  reg [3:0] IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d413;
  reg [31:0] IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d570;
  wire [31:0] IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d571;
  wire IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d649;
  wire IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d910;
  wire [3:0] IF_rg_cur_priv_9_EQ_0b11_75_OR_rg_cur_priv_9_E_ETC___d394;
  wire [1:0] IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d142;
  wire IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d161;
  wire IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d163;
  wire [1:0] IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86;
  wire [1:0] IF_stage2_rg_stage2_4_BITS_100_TO_96_13_EQ_0_3_ETC___d137;
  wire [1:0] IF_stage2_rg_stage2_4_BITS_102_TO_101_5_EQ_0_6_ETC___d85;
  wire MUX_csr_regfile$mav_csr_write_1__SEL_1;
  reg [31:0] MUX_csr_regfile$mav_csr_write_2__VAL_2;
  wire MUX_gpr_regfile$write_rd_1__SEL_3;
  wire MUX_near_mem$imem_req_1__SEL_1;
  wire MUX_near_mem$imem_req_1__SEL_2;
  wire MUX_near_mem$imem_req_1__SEL_5;
  wire MUX_rg_next_pc$write_1__SEL_1;
  wire MUX_rg_retiring$write_1__SEL_1;
  wire MUX_rg_state$write_1__SEL_1;
  wire MUX_rg_state$write_1__SEL_10;
  wire MUX_rg_state$write_1__SEL_4;
  wire MUX_rg_state$write_1__SEL_6;
  wire MUX_rg_state$write_1__SEL_7;
  wire MUX_rg_state$write_1__SEL_8;
  wire MUX_rg_state$write_1__SEL_9;
  wire [3:0] MUX_rg_state$write_1__VAL_1;
  wire [3:0] MUX_rg_state$write_1__VAL_2;
  wire [3:0] MUX_rg_state$write_1__VAL_3;
  wire MUX_rg_trap_info$write_1__SEL_1;
  wire [67:0] MUX_rg_trap_info$write_1__VAL_1;
  wire [67:0] MUX_rg_trap_info$write_1__VAL_2;
  wire [67:0] MUX_rg_trap_info$write_1__VAL_3;
  wire [67:0] MUX_rg_trap_info$write_1__VAL_4;
  wire MUX_rg_trap_instr$write_1__SEL_1;
  wire MUX_rg_trap_interrupt$write_1__SEL_1;
  wire MUX_s1_to_s2$write_1__VAL_1;
  wire MUX_stage1_rg_full$write_1__VAL_10;
  wire MUX_stage2_rg_full$write_1__VAL_3;
  wire NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17;
  wire NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d730;
  wire NOT_IF_stage2_rg_full_3_THEN_IF_stage2_rg_stag_ETC___d109;
  wire NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d716;
  wire NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d734;
  wire NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d737;
  wire NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d756;
  wire NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d769;
  wire NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d773;
  wire NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d776;
  wire NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d790;
  wire NOT_near_mem_imem_exc__78_13_AND_IF_near_mem_i_ETC___d481;
  wire NOT_near_mem_imem_instr__59_BITS_14_TO_12_81_E_ETC___d252;
  wire NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166;
  wire NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d702;
  wire NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d713;
  wire RDY_hart0_server_reset_request_put;
  wire RDY_hart0_server_reset_response_get;
  wire RDY_set_verbosity;
  wire RST_N;
  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__csr_regfile__DOT__rg_nmi;
  wire RTL__DOT__csr_regfile__DOT__rg_state;
  wire RTL__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_10_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_11_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_12_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_13_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_14_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_15_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_16_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_17_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_18_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_19_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_1_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_20_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_21_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_22_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_23_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_24_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_25_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_26_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_27_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_28_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_29_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_2_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_30_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_31_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_3_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_4_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_5_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_6_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_7_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_8_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_9_;
  wire RTL__DOT__near_mem$EN_dmem_req;
  wire RTL__DOT__near_mem$dmem_exc;
  wire [31:0] RTL__DOT__near_mem$dmem_req_addr;
  wire [2:0] RTL__DOT__near_mem$dmem_req_f3;
  wire RTL__DOT__near_mem$dmem_req_op;
  wire [63:0] RTL__DOT__near_mem$dmem_req_store_value;
  wire [63:0] RTL__DOT__near_mem$dmem_word64;
  wire [31:0] RTL__DOT__near_mem$imem_instr;
  wire [31:0] RTL__DOT__near_mem$imem_pc;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire [31:0] RTL__DOT__near_mem__DOT__dcache__DOT__rg_addr;
  wire [31:0] RTL__DOT__near_mem__DOT__dcache__DOT__rg_pa;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire [1:0] RTL__DOT__rg_cur_priv;
  wire RTL__DOT__rg_retiring$EN;
  wire RTL__DOT__rg_run_on_reset;
  wire [3:0] RTL__DOT__rg_state;
  wire [31:0] RTL__DOT__rg_trap_instr;
  wire RTL__DOT__s1_to_s2$D_IN;
  wire RTL__DOT__s1_to_s2$EN;
  wire RTL__DOT__s2_to_s3$D_IN;
  wire RTL__DOT__s2_to_s3$EN;
  wire RTL__DOT__s3_deq$D_IN;
  wire RTL__DOT__s3_deq$EN;
  wire RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage1_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage1_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage1_rg_full;
  wire RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage2_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage2_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage2_rg_full;
  wire [168:0] RTL__DOT__stage2_rg_stage2;
  wire RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage3_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage3_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage3_rg_full;
  wire [31:0] SEXT_near_mem_imem_instr__59_BITS_31_TO_20_02___d303;
  wire WILL_FIRE_RL_rl_WFI_resume;
  wire WILL_FIRE_RL_rl_finish_FENCE;
  wire WILL_FIRE_RL_rl_finish_FENCE_I;
  wire WILL_FIRE_RL_rl_finish_SFENCE_VMA;
  wire WILL_FIRE_RL_rl_pipe;
  wire WILL_FIRE_RL_rl_reset_complete;
  wire WILL_FIRE_RL_rl_reset_from_WFI;
  wire WILL_FIRE_RL_rl_reset_start;
  wire WILL_FIRE_RL_rl_show_pipe;
  wire WILL_FIRE_RL_rl_stage1_CSRR_S_or_C;
  wire WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2;
  wire WILL_FIRE_RL_rl_stage1_CSRR_W;
  wire WILL_FIRE_RL_rl_stage1_CSRR_W_2;
  wire WILL_FIRE_RL_rl_stage1_FENCE;
  wire WILL_FIRE_RL_rl_stage1_FENCE_I;
  wire WILL_FIRE_RL_rl_stage1_SFENCE_VMA;
  wire WILL_FIRE_RL_rl_stage1_WFI;
  wire WILL_FIRE_RL_rl_stage1_interrupt;
  wire WILL_FIRE_RL_rl_stage1_restart_after_csrrx;
  wire WILL_FIRE_RL_rl_stage1_trap;
  wire WILL_FIRE_RL_rl_stage1_xRET;
  wire WILL_FIRE_RL_rl_stage2_nonpipe;
  wire WILL_FIRE_RL_rl_trap;
  wire WILL_FIRE_RL_rl_trap_fetch;
  wire WILL_FIRE_RL_stage1_rl_reset;
  wire WILL_FIRE_RL_stage2_rl_reset_begin;
  wire WILL_FIRE_RL_stage2_rl_reset_end;
  wire WILL_FIRE_RL_stage3_rl_reset;
  wire WILL_FIRE_dmem_master_m_arready;
  wire WILL_FIRE_dmem_master_m_awready;
  wire WILL_FIRE_dmem_master_m_bvalid;
  wire WILL_FIRE_dmem_master_m_rvalid;
  wire WILL_FIRE_dmem_master_m_wready;
  wire WILL_FIRE_hart0_server_reset_request_put;
  wire WILL_FIRE_hart0_server_reset_response_get;
  wire WILL_FIRE_imem_master_m_arready;
  wire WILL_FIRE_imem_master_m_awready;
  wire WILL_FIRE_imem_master_m_bvalid;
  wire WILL_FIRE_imem_master_m_rvalid;
  wire WILL_FIRE_imem_master_m_wready;
  wire WILL_FIRE_m_external_interrupt_req;
  wire WILL_FIRE_nmi_req;
  wire WILL_FIRE_s_external_interrupt_req;
  wire WILL_FIRE_set_verbosity;
  wire WILL_FIRE_software_interrupt_req;
  wire WILL_FIRE_timer_interrupt_req;
  wire _0_OR_0_OR_near_mem_imem_exc__78_OR_IF_near_mem_ETC___d767;
  wire [31:0] _theResult_____1_fst__h6562;
  reg [31:0] _theResult_____1_fst__h6569;
  wire [31:0] _theResult_____1_fst__h6597;
  wire [63:0] _theResult____h10743;
  wire [31:0] _theResult___snd__h7382;
  wire [31:0] alu_outputs___1_addr__h5365;
  wire [31:0] alu_outputs___1_addr__h5385;
  wire [31:0] alu_outputs___1_addr__h5410;
  wire [31:0] alu_outputs___1_addr__h5583;
  wire [3:0] alu_outputs___1_exc_code__h5362;
  wire [3:0] alu_outputs___1_exc_code__h5843;
  wire [31:0] alu_outputs___1_val1__h5386;
  wire [31:0] alu_outputs___1_val1__h5480;
  wire [31:0] alu_outputs___1_val1__h5516;
  wire [31:0] alu_outputs___1_val1__h5847;
  wire [31:0] alu_outputs___1_val2__h5367;
  reg [3:0] alu_outputs_exc_code__h5862;
  reg [63:0] cfg_logdelay;
  wire [63:0] cfg_logdelay$D_IN;
  wire cfg_logdelay$EN;
  reg [3:0] cfg_verbosity;
  wire [3:0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;
  wire [63:0] cpi__h10745;
  wire [63:0] cpifrac__h10746;
  wire csr_regfile$EN_csr_minstret_incr;
  wire csr_regfile$EN_csr_ret_actions;
  wire csr_regfile$EN_csr_trap_actions;
  wire csr_regfile$EN_debug;
  wire csr_regfile$EN_mav_csr_write;
  wire csr_regfile$EN_mav_read_csr;
  wire csr_regfile$EN_server_reset_request_put;
  wire csr_regfile$EN_server_reset_response_get;
  wire csr_regfile$RDY_server_reset_request_put;
  wire csr_regfile$RDY_server_reset_response_get;
  wire csr_regfile$access_permitted_1;
  wire [11:0] csr_regfile$access_permitted_1_csr_addr;
  wire [1:0] csr_regfile$access_permitted_1_priv;
  wire csr_regfile$access_permitted_1_read_not_write;
  wire csr_regfile$access_permitted_2;
  wire [11:0] csr_regfile$access_permitted_2_csr_addr;
  wire [1:0] csr_regfile$access_permitted_2_priv;
  wire csr_regfile$access_permitted_2_read_not_write;
  wire [11:0] csr_regfile$csr_counter_read_fault_csr_addr;
  wire [1:0] csr_regfile$csr_counter_read_fault_priv;
  wire [65:0] csr_regfile$csr_ret_actions;
  reg [1:0] csr_regfile$csr_ret_actions_from_priv;
  wire [97:0] csr_regfile$csr_trap_actions;
  wire [3:0] csr_regfile$csr_trap_actions_exc_code;
  wire [1:0] csr_regfile$csr_trap_actions_from_priv;
  wire csr_regfile$csr_trap_actions_interrupt;
  wire csr_regfile$csr_trap_actions_nmi;
  wire [31:0] csr_regfile$csr_trap_actions_pc;
  wire [31:0] csr_regfile$csr_trap_actions_xtval;
  wire [4:0] csr_regfile$interrupt_pending;
  wire [1:0] csr_regfile$interrupt_pending_cur_priv;
  wire csr_regfile$m_external_interrupt_req_set_not_clear;
  wire [11:0] csr_regfile$mav_csr_write_csr_addr;
  wire [31:0] csr_regfile$mav_csr_write_word;
  wire [11:0] csr_regfile$mav_read_csr_csr_addr;
  wire csr_regfile$nmi_pending;
  wire csr_regfile$nmi_req_set_not_clear;
  wire [32:0] csr_regfile$read_csr;
  wire [11:0] csr_regfile$read_csr_csr_addr;
  wire [63:0] csr_regfile$read_csr_mcycle;
  wire [63:0] csr_regfile$read_csr_minstret;
  wire [11:0] csr_regfile$read_csr_port2_csr_addr;
  wire [27:0] csr_regfile$read_misa;
  wire [31:0] csr_regfile$read_mstatus;
  wire [31:0] csr_regfile$read_satp;
  wire csr_regfile$s_external_interrupt_req_set_not_clear;
  wire csr_regfile$software_interrupt_req_set_not_clear;
  wire csr_regfile$timer_interrupt_req_set_not_clear;
  wire csr_regfile$wfi_resume;
  wire csr_regfile_interrupt_pending_rg_cur_priv_9_07_ETC___d779;
  wire [127:0] csr_regfile_read_csr_mcycle__8_MINUS_rg_start__ETC___d818;
  wire [3:0] cur_verbosity__h1827;
  wire [31:0] data_to_stage2_addr__h5215;
  wire [63:0] delta_CPI_cycles__h10741;
  wire [63:0] delta_CPI_instrs___1__h10778;
  wire [63:0] delta_CPI_instrs__h10742;
  wire [63:0] dmem_master_araddr;
  wire [1:0] dmem_master_arburst;
  wire [3:0] dmem_master_arcache;
  wire [3:0] dmem_master_arid;
  wire [7:0] dmem_master_arlen;
  wire dmem_master_arlock;
  wire [2:0] dmem_master_arprot;
  wire [3:0] dmem_master_arqos;
  wire dmem_master_arready;
  wire [3:0] dmem_master_arregion;
  wire [2:0] dmem_master_arsize;
  wire dmem_master_arvalid;
  wire [63:0] dmem_master_awaddr;
  wire [1:0] dmem_master_awburst;
  wire [3:0] dmem_master_awcache;
  wire [3:0] dmem_master_awid;
  wire [7:0] dmem_master_awlen;
  wire dmem_master_awlock;
  wire [2:0] dmem_master_awprot;
  wire [3:0] dmem_master_awqos;
  wire dmem_master_awready;
  wire [3:0] dmem_master_awregion;
  wire [2:0] dmem_master_awsize;
  wire dmem_master_awvalid;
  wire [3:0] dmem_master_bid;
  wire dmem_master_bready;
  wire [1:0] dmem_master_bresp;
  wire dmem_master_bvalid;
  wire [63:0] dmem_master_rdata;
  wire [3:0] dmem_master_rid;
  wire dmem_master_rlast;
  wire dmem_master_rready;
  wire [1:0] dmem_master_rresp;
  wire dmem_master_rvalid;
  wire [63:0] dmem_master_wdata;
  wire dmem_master_wlast;
  wire dmem_master_wready;
  wire [7:0] dmem_master_wstrb;
  wire dmem_master_wvalid;
  wire [31:0] eaddr__h5553;
  wire f_reset_reqs$CLR;
  wire f_reset_reqs$DEQ;
  wire f_reset_reqs$D_IN;
  wire f_reset_reqs$D_OUT;
  wire f_reset_reqs$EMPTY_N;
  wire f_reset_reqs$ENQ;
  wire f_reset_reqs$FULL_N;
  wire f_reset_rsps$CLR;
  wire f_reset_rsps$DEQ;
  wire f_reset_rsps$D_IN;
  wire f_reset_rsps$D_OUT;
  wire f_reset_rsps$EMPTY_N;
  wire f_reset_rsps$ENQ;
  wire f_reset_rsps$FULL_N;
  wire [31:0] fall_through_pc__h5175;
  wire gpr_regfile$EN_server_reset_request_put;
  wire gpr_regfile$EN_server_reset_response_get;
  wire gpr_regfile$EN_write_rd;
  wire gpr_regfile$RDY_server_reset_request_put;
  wire gpr_regfile$RDY_server_reset_response_get;
  wire [31:0] gpr_regfile$read_rs1;
  wire [4:0] gpr_regfile$read_rs1_port2_rs1;
  wire [4:0] gpr_regfile$read_rs1_rs1;
  wire [31:0] gpr_regfile$read_rs2;
  wire [4:0] gpr_regfile$read_rs2_rs2;
  wire [4:0] gpr_regfile$write_rd_rd;
  wire [31:0] gpr_regfile$write_rd_rd_val;
  wire gpr_regfile_RDY_server_reset_request_put__59_A_ETC___d671;
  wire gpr_regfile_RDY_server_reset_response_get__76__ETC___d688;
  wire hart0_server_reset_request_put;
  wire hart0_server_reset_response_get;
  wire [63:0] imem_master_araddr;
  wire [1:0] imem_master_arburst;
  wire [3:0] imem_master_arcache;
  wire [3:0] imem_master_arid;
  wire [7:0] imem_master_arlen;
  wire imem_master_arlock;
  wire [2:0] imem_master_arprot;
  wire [3:0] imem_master_arqos;
  wire imem_master_arready;
  wire [3:0] imem_master_arregion;
  wire [2:0] imem_master_arsize;
  wire imem_master_arvalid;
  wire [63:0] imem_master_awaddr;
  wire [1:0] imem_master_awburst;
  wire [3:0] imem_master_awcache;
  wire [3:0] imem_master_awid;
  wire [7:0] imem_master_awlen;
  wire imem_master_awlock;
  wire [2:0] imem_master_awprot;
  wire [3:0] imem_master_awqos;
  wire imem_master_awready;
  wire [3:0] imem_master_awregion;
  wire [2:0] imem_master_awsize;
  wire imem_master_awvalid;
  wire [3:0] imem_master_bid;
  wire imem_master_bready;
  wire [1:0] imem_master_bresp;
  wire imem_master_bvalid;
  wire [63:0] imem_master_rdata;
  wire [3:0] imem_master_rid;
  wire imem_master_rlast;
  wire imem_master_rready;
  wire [1:0] imem_master_rresp;
  wire imem_master_rvalid;
  wire [63:0] imem_master_wdata;
  wire imem_master_wlast;
  wire imem_master_wready;
  wire [7:0] imem_master_wstrb;
  wire imem_master_wvalid;
  wire m_external_interrupt_req_set_not_clear;
  wire near_mem$EN_dmem_req;
  wire near_mem$EN_imem_req;
  wire near_mem$EN_server_fence_i_request_put;
  wire near_mem$EN_server_fence_i_response_get;
  wire near_mem$EN_server_fence_request_put;
  wire near_mem$EN_server_fence_response_get;
  wire near_mem$EN_server_reset_request_put;
  wire near_mem$EN_server_reset_response_get;
  wire near_mem$EN_sfence_vma;
  wire near_mem$RDY_server_fence_i_request_put;
  wire near_mem$RDY_server_fence_i_response_get;
  wire near_mem$RDY_server_fence_request_put;
  wire near_mem$RDY_server_fence_response_get;
  wire near_mem$RDY_server_reset_request_put;
  wire near_mem$RDY_server_reset_response_get;
  wire near_mem$dmem_exc;
  wire [3:0] near_mem$dmem_exc_code;
  wire [63:0] near_mem$dmem_master_araddr;
  wire [1:0] near_mem$dmem_master_arburst;
  wire [3:0] near_mem$dmem_master_arcache;
  wire [3:0] near_mem$dmem_master_arid;
  wire [7:0] near_mem$dmem_master_arlen;
  wire near_mem$dmem_master_arlock;
  wire [2:0] near_mem$dmem_master_arprot;
  wire [3:0] near_mem$dmem_master_arqos;
  wire near_mem$dmem_master_arready;
  wire [3:0] near_mem$dmem_master_arregion;
  wire [2:0] near_mem$dmem_master_arsize;
  wire near_mem$dmem_master_arvalid;
  wire [63:0] near_mem$dmem_master_awaddr;
  wire [1:0] near_mem$dmem_master_awburst;
  wire [3:0] near_mem$dmem_master_awcache;
  wire [3:0] near_mem$dmem_master_awid;
  wire [7:0] near_mem$dmem_master_awlen;
  wire near_mem$dmem_master_awlock;
  wire [2:0] near_mem$dmem_master_awprot;
  wire [3:0] near_mem$dmem_master_awqos;
  wire near_mem$dmem_master_awready;
  wire [3:0] near_mem$dmem_master_awregion;
  wire [2:0] near_mem$dmem_master_awsize;
  wire near_mem$dmem_master_awvalid;
  wire [3:0] near_mem$dmem_master_bid;
  wire near_mem$dmem_master_bready;
  wire [1:0] near_mem$dmem_master_bresp;
  wire near_mem$dmem_master_bvalid;
  wire [63:0] near_mem$dmem_master_rdata;
  wire [3:0] near_mem$dmem_master_rid;
  wire near_mem$dmem_master_rlast;
  wire near_mem$dmem_master_rready;
  wire [1:0] near_mem$dmem_master_rresp;
  wire near_mem$dmem_master_rvalid;
  wire [63:0] near_mem$dmem_master_wdata;
  wire near_mem$dmem_master_wlast;
  wire near_mem$dmem_master_wready;
  wire [7:0] near_mem$dmem_master_wstrb;
  wire near_mem$dmem_master_wvalid;
  wire [31:0] near_mem$dmem_req_addr;
  wire [2:0] near_mem$dmem_req_f3;
  wire near_mem$dmem_req_mstatus_MXR;
  wire near_mem$dmem_req_op;
  wire [1:0] near_mem$dmem_req_priv;
  wire [31:0] near_mem$dmem_req_satp;
  wire near_mem$dmem_req_sstatus_SUM;
  wire [63:0] near_mem$dmem_req_store_value;
  wire near_mem$dmem_valid;
  wire [63:0] near_mem$dmem_word64;
  wire near_mem$imem_exc;
  wire [3:0] near_mem$imem_exc_code;
  wire [31:0] near_mem$imem_instr;
  wire near_mem$imem_is_i32_not_i16;
  wire [63:0] near_mem$imem_master_araddr;
  wire [1:0] near_mem$imem_master_arburst;
  wire [3:0] near_mem$imem_master_arcache;
  wire [3:0] near_mem$imem_master_arid;
  wire [7:0] near_mem$imem_master_arlen;
  wire near_mem$imem_master_arlock;
  wire [2:0] near_mem$imem_master_arprot;
  wire [3:0] near_mem$imem_master_arqos;
  wire near_mem$imem_master_arready;
  wire [3:0] near_mem$imem_master_arregion;
  wire [2:0] near_mem$imem_master_arsize;
  wire near_mem$imem_master_arvalid;
  wire [63:0] near_mem$imem_master_awaddr;
  wire [1:0] near_mem$imem_master_awburst;
  wire [3:0] near_mem$imem_master_awcache;
  wire [3:0] near_mem$imem_master_awid;
  wire [7:0] near_mem$imem_master_awlen;
  wire near_mem$imem_master_awlock;
  wire [2:0] near_mem$imem_master_awprot;
  wire [3:0] near_mem$imem_master_awqos;
  wire near_mem$imem_master_awready;
  wire [3:0] near_mem$imem_master_awregion;
  wire [2:0] near_mem$imem_master_awsize;
  wire near_mem$imem_master_awvalid;
  wire [3:0] near_mem$imem_master_bid;
  wire near_mem$imem_master_bready;
  wire [1:0] near_mem$imem_master_bresp;
  wire near_mem$imem_master_bvalid;
  wire [63:0] near_mem$imem_master_rdata;
  wire [3:0] near_mem$imem_master_rid;
  wire near_mem$imem_master_rlast;
  wire near_mem$imem_master_rready;
  wire [1:0] near_mem$imem_master_rresp;
  wire near_mem$imem_master_rvalid;
  wire [63:0] near_mem$imem_master_wdata;
  wire near_mem$imem_master_wlast;
  wire near_mem$imem_master_wready;
  wire [7:0] near_mem$imem_master_wstrb;
  wire near_mem$imem_master_wvalid;
  wire [31:0] near_mem$imem_pc;
  reg [31:0] near_mem$imem_req_addr;
  wire [2:0] near_mem$imem_req_f3;
  wire near_mem$imem_req_mstatus_MXR;
  wire [1:0] near_mem$imem_req_priv;
  wire [31:0] near_mem$imem_req_satp;
  wire near_mem$imem_req_sstatus_SUM;
  wire [31:0] near_mem$imem_tval;
  wire near_mem$imem_valid;
  wire [7:0] near_mem$server_fence_request_put;
  wire near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d578;
  wire near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d581;
  wire near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d584;
  wire near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d587;
  wire near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d590;
  wire near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d593;
  wire near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d596;
  wire near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d599;
  wire near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d602;
  wire near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d605;
  wire near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d608;
  wire near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d611;
  wire near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_0b_ETC___d328;
  wire near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_0b_ETC___d616;
  wire near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177;
  wire near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311;
  wire near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355;
  wire [11:0] near_memimem_instr_BITS_31_TO_20__q7;
  wire [11:0] near_memimem_instr_BITS_31_TO_25_CONCAT_near__ETC__q6;
  wire [12:0] near_memimem_instr_BIT_31_CONCAT_near_memime_ETC__q1;
  wire [20:0] near_memimem_instr_BIT_31_CONCAT_near_memime_ETC__q2;
  wire nmi_req_set_not_clear;
  wire [31:0] output_stage2___1_bypass_rd_val__h4960;
  wire [31:0] rd_val___1__h6550;
  wire [31:0] rd_val___1__h6558;
  wire [31:0] rd_val___1__h6565;
  wire [31:0] rd_val___1__h6572;
  wire [31:0] rd_val___1__h6579;
  wire [31:0] rd_val___1__h6586;
  wire [31:0] rd_val__h5072;
  wire [31:0] rd_val__h5132;
  wire [31:0] rd_val__h5523;
  wire [31:0] rd_val__h5537;
  wire [31:0] rd_val__h7278;
  wire [31:0] rd_val__h7330;
  wire [31:0] rd_val__h7352;
  reg [31:0] rg_csr_pc;
  wire [31:0] rg_csr_pc$D_IN;
  wire rg_csr_pc$EN;
  reg [31:0] rg_csr_val1;
  wire [31:0] rg_csr_val1$D_IN;
  wire rg_csr_val1$EN;
  reg [1:0] rg_cur_priv;
  reg [1:0] rg_cur_priv$D_IN;
  wire rg_cur_priv$EN;
  wire rg_cur_priv_9_EQ_0b11_75_OR_rg_cur_priv_9_EQ_0_ETC___d392;
  reg rg_mstatus_MXR;
  wire rg_mstatus_MXR$D_IN;
  wire rg_mstatus_MXR$EN;
  reg [31:0] rg_next_pc;
  reg [31:0] rg_next_pc$D_IN;
  wire rg_next_pc$EN;
  reg rg_retiring;
  wire rg_retiring$D_IN;
  wire rg_retiring$EN;
  reg rg_run_on_reset;
  wire rg_run_on_reset$D_IN;
  wire rg_run_on_reset$EN;
  reg rg_sstatus_SUM;
  wire rg_sstatus_SUM$D_IN;
  wire rg_sstatus_SUM$EN;
  reg [63:0] rg_start_CPI_cycles;
  wire [63:0] rg_start_CPI_cycles$D_IN;
  wire rg_start_CPI_cycles$EN;
  reg [63:0] rg_start_CPI_instrs;
  wire [63:0] rg_start_CPI_instrs$D_IN;
  wire rg_start_CPI_instrs$EN;
  reg [3:0] rg_state;
  reg [3:0] rg_state$D_IN;
  wire rg_state$EN;
  wire rg_state_8_EQ_3_97_AND_NOT_csr_regfile_interru_ETC___d793;
  reg [67:0] rg_trap_info;
  reg [67:0] rg_trap_info$D_IN;
  wire rg_trap_info$EN;
  wire rg_trap_info_04_BITS_67_TO_36_05_EQ_csr_regfil_ETC___d814;
  reg [31:0] rg_trap_instr;
  wire [31:0] rg_trap_instr$D_IN;
  wire rg_trap_instr$EN;
  reg rg_trap_interrupt;
  wire rg_trap_interrupt$D_IN;
  wire rg_trap_interrupt$EN;
  wire [31:0] rs1_val__h11213;
  reg [31:0] rs1_val__h11920;
  wire [31:0] rs1_val_bypassed__h3337;
  wire [31:0] rs2_val__h5339;
  reg s1_to_s2;
  wire s1_to_s2$D_IN;
  wire s1_to_s2$EN;
  reg s2_to_s3;
  wire s2_to_s3$D_IN;
  wire s2_to_s3$EN;
  reg s3_deq;
  wire s3_deq$D_IN;
  wire s3_deq$EN;
  wire s_external_interrupt_req_set_not_clear;
  wire [63:0] set_verbosity_logdelay;
  wire [3:0] set_verbosity_verbosity;
  wire [4:0] shamt__h5467;
  wire [63:0] soc_map$m_is_IO_addr_addr;
  wire [63:0] soc_map$m_is_mem_addr_addr;
  wire [63:0] soc_map$m_is_near_mem_IO_addr_addr;
  wire [63:0] soc_map$m_pc_reset_value;
  wire software_interrupt_req_set_not_clear;
  wire stage1_f_reset_reqs$CLR;
  wire stage1_f_reset_reqs$DEQ;
  wire stage1_f_reset_reqs$EMPTY_N;
  wire stage1_f_reset_reqs$ENQ;
  wire stage1_f_reset_reqs$FULL_N;
  wire stage1_f_reset_rsps$CLR;
  wire stage1_f_reset_rsps$DEQ;
  wire stage1_f_reset_rsps$EMPTY_N;
  wire stage1_f_reset_rsps$ENQ;
  wire stage1_f_reset_rsps$FULL_N;
  reg stage1_rg_full;
  reg stage1_rg_full$D_IN;
  wire stage1_rg_full$EN;
  wire stage2_f_reset_reqs$CLR;
  wire stage2_f_reset_reqs$DEQ;
  wire stage2_f_reset_reqs$EMPTY_N;
  wire stage2_f_reset_reqs$ENQ;
  wire stage2_f_reset_reqs$FULL_N;
  wire stage2_f_reset_rsps$CLR;
  wire stage2_f_reset_rsps$DEQ;
  wire stage2_f_reset_rsps$EMPTY_N;
  wire stage2_f_reset_rsps$ENQ;
  wire stage2_f_reset_rsps$FULL_N;
  reg stage2_rg_full;
  reg stage2_rg_full$D_IN;
  wire stage2_rg_full$EN;
  reg stage2_rg_resetting;
  wire stage2_rg_resetting$D_IN;
  wire stage2_rg_resetting$EN;
  reg [168:0] stage2_rg_stage2;
  wire [168:0] stage2_rg_stage2$D_IN;
  wire stage2_rg_stage2$EN;
  wire stage3_f_reset_reqs$CLR;
  wire stage3_f_reset_reqs$DEQ;
  wire stage3_f_reset_reqs$EMPTY_N;
  wire stage3_f_reset_reqs$ENQ;
  wire stage3_f_reset_reqs$FULL_N;
  wire stage3_f_reset_rsps$CLR;
  wire stage3_f_reset_rsps$DEQ;
  wire stage3_f_reset_rsps$EMPTY_N;
  wire stage3_f_reset_rsps$ENQ;
  wire stage3_f_reset_rsps$FULL_N;
  reg stage3_rg_full;
  reg stage3_rg_full$D_IN;
  wire stage3_rg_full$EN;
  reg [103:0] stage3_rg_stage3;
  wire [103:0] stage3_rg_stage3$D_IN;
  wire stage3_rg_stage3$EN;
  wire timer_interrupt_req_set_not_clear;
  wire [31:0] trap_info_tval__h6925;
  wire [31:0] val__h5074;
  wire [31:0] val__h5134;
  wire [31:0] value__h6967;
  wire [63:0] x__h10744;
  wire [3:0] x_exc_code__h15410;
  wire [31:0] x_out_bypass_rd_val__h4969;
  reg [31:0] x_out_data_to_stage2_addr__h5223;
  wire [4:0] x_out_data_to_stage2_rd__h5222;
  reg [31:0] x_out_data_to_stage2_val1__h5224;
  wire [31:0] x_out_data_to_stage2_val2__h5225;
  reg [4:0] x_out_data_to_stage3_rd__h4667;
  reg [31:0] x_out_data_to_stage3_rd_val__h4668;
  wire [31:0] x_out_next_pc__h5189;
  wire [3:0] x_out_trap_info_exc_code__h6928;
  wire [31:0] y__h12191;


  assign CAN_FIRE_dmem_master_m_arready = 1'b1;
  assign CAN_FIRE_dmem_master_m_awready = 1'b1;
  assign CAN_FIRE_dmem_master_m_bvalid = 1'b1;
  assign CAN_FIRE_dmem_master_m_rvalid = 1'b1;
  assign CAN_FIRE_dmem_master_m_wready = 1'b1;
  assign CAN_FIRE_imem_master_m_arready = 1'b1;
  assign CAN_FIRE_imem_master_m_awready = 1'b1;
  assign CAN_FIRE_imem_master_m_bvalid = 1'b1;
  assign CAN_FIRE_imem_master_m_rvalid = 1'b1;
  assign CAN_FIRE_imem_master_m_wready = 1'b1;
  assign CAN_FIRE_m_external_interrupt_req = 1'b1;
  assign CAN_FIRE_nmi_req = 1'b1;
  assign CAN_FIRE_s_external_interrupt_req = 1'b1;
  assign CAN_FIRE_set_verbosity = 1'b1;
  assign CAN_FIRE_software_interrupt_req = 1'b1;
  assign CAN_FIRE_timer_interrupt_req = 1'b1;
  assign RDY_set_verbosity = 1'b1;
  assign WILL_FIRE_dmem_master_m_arready = 1'b1;
  assign WILL_FIRE_dmem_master_m_awready = 1'b1;
  assign WILL_FIRE_dmem_master_m_bvalid = 1'b1;
  assign WILL_FIRE_dmem_master_m_rvalid = 1'b1;
  assign WILL_FIRE_dmem_master_m_wready = 1'b1;
  assign WILL_FIRE_imem_master_m_arready = 1'b1;
  assign WILL_FIRE_imem_master_m_awready = 1'b1;
  assign WILL_FIRE_imem_master_m_bvalid = 1'b1;
  assign WILL_FIRE_imem_master_m_rvalid = 1'b1;
  assign WILL_FIRE_imem_master_m_wready = 1'b1;
  assign WILL_FIRE_m_external_interrupt_req = 1'b1;
  assign WILL_FIRE_nmi_req = 1'b1;
  assign WILL_FIRE_s_external_interrupt_req = 1'b1;
  assign WILL_FIRE_software_interrupt_req = 1'b1;
  assign WILL_FIRE_timer_interrupt_req = 1'b1;
  assign csr_regfile$EN_debug = 1'b0;
  assign csr_regfile$EN_mav_read_csr = 1'b0;
  assign csr_regfile$access_permitted_1_read_not_write = 1'b0;
  assign csr_regfile$csr_counter_read_fault_csr_addr = 12'h000;
  assign csr_regfile$csr_counter_read_fault_priv = 2'h0;
  assign csr_regfile$mav_read_csr_csr_addr = 12'h000;
  assign csr_regfile$read_csr_port2_csr_addr = 12'h000;
  assign f_reset_reqs$CLR = 1'b0;
  assign f_reset_rsps$CLR = 1'b0;
  assign gpr_regfile$read_rs1_port2_rs1 = 5'h00;
  assign near_mem$dmem_req_sstatus_SUM = 1'b0;
  assign near_mem$imem_req_f3 = 3'h2;
  assign near_mem$server_fence_request_put = 8'haa;
  assign rg_retiring$D_IN = 1'b1;
  assign rg_sstatus_SUM$D_IN = 1'b0;
  assign soc_map$m_is_IO_addr_addr = 64'h0000000000000000;
  assign soc_map$m_is_mem_addr_addr = 64'h0000000000000000;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0000000000000000;
  assign stage1_f_reset_reqs$CLR = 1'b0;
  assign stage1_f_reset_rsps$CLR = 1'b0;
  assign stage2_f_reset_reqs$CLR = 1'b0;
  assign stage2_f_reset_rsps$CLR = 1'b0;
  assign stage3_f_reset_reqs$CLR = 1'b0;
  assign stage3_f_reset_rsps$CLR = 1'b0;

  assign CAN_FIRE_RL_rl_stage1_CSRR_W_2 = (rg_state == 4'h6);
  assign WILL_FIRE_RL_rl_stage1_CSRR_W_2 = (rg_state == 4'h6);
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2 = (rg_state == 4'h7);
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 = (rg_state == 4'h7);
  assign CAN_FIRE_RL_rl_stage1_restart_after_csrrx = (rg_state == 4'h8);
  assign CAN_FIRE_RL_rl_finish_SFENCE_VMA = (rg_state == 4'hb);
  assign CAN_FIRE_RL_rl_trap_fetch = (rg_state == 4'h5);
  assign MUX_rg_state$write_1__VAL_1 = (rg_run_on_reset ? 4'h3 : 4'h2);
  assign MUX_rg_state$write_1__VAL_2 = (csr_regfile$access_permitted_1 ? 4'h8 : 4'h4);
  assign MUX_rg_state$write_1__VAL_3 = (csr_regfile$access_permitted_2 ? 4'h8 : 4'h4);
  assign MUX_rg_trap_info$write_1__VAL_1 = {near_mem$imem_pc, 4'h2, value__h6967};
  assign MUX_rg_trap_info$write_1__VAL_2 = {stage2_rg_stage2[166:135], near_mem$dmem_exc_code, stage2_rg_stage2[95:64]};
  assign MUX_rg_trap_info$write_1__VAL_3 = {near_mem$imem_pc, IF_near_mem_imem_exc__78_THEN_near_mem_imem_ex_ETC___d799};
  assign MUX_rg_trap_info$write_1__VAL_4 = {near_mem$imem_pc, x_exc_code__h15410, 32'h00000000};
  assign rg_mstatus_MXR$D_IN = csr_regfile$read_mstatus[19];
  assign rg_trap_instr$D_IN = (MUX_rg_trap_instr$write_1__SEL_1 ? near_mem$imem_instr : stage2_rg_stage2[134:103]);
  assign rg_trap_interrupt$D_IN = (~|MUX_rg_trap_interrupt$write_1__SEL_1);
  assign stage2_rg_stage2$D_IN = {rg_cur_priv, near_mem$imem_pc, near_mem$imem_instr, IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d491, x_out_data_to_stage2_rd__h5222, x_out_data_to_stage2_addr__h5223, x_out_data_to_stage2_val1__h5224, x_out_data_to_stage2_val2__h5225};
  assign stage3_rg_stage3$D_IN = {stage2_rg_stage2[166:103], stage2_rg_stage2[168:167], ((stage2_rg_stage2[102:101] == 2'h0) | (near_mem$dmem_valid & (~|near_mem$dmem_exc))), x_out_data_to_stage3_rd__h4667, x_out_data_to_stage3_rd_val__h4668};
  assign csr_regfile$access_permitted_1_csr_addr = rg_trap_instr[31:20];
  assign csr_regfile$access_permitted_2_csr_addr = rg_trap_instr[31:20];
  assign csr_regfile$access_permitted_2_read_not_write = (rs1_val__h11920 == 32'h00000000);
  assign csr_regfile$csr_trap_actions_exc_code = rg_trap_info[35:32];
  assign csr_regfile$csr_trap_actions_pc = rg_trap_info[67:36];
  assign csr_regfile$csr_trap_actions_xtval = rg_trap_info[31:0];
  assign csr_regfile$mav_csr_write_csr_addr = rg_trap_instr[31:20];
  assign csr_regfile$mav_csr_write_word = (MUX_csr_regfile$mav_csr_write_1__SEL_1 ? rs1_val__h11213 : MUX_csr_regfile$mav_csr_write_2__VAL_2);
  assign csr_regfile$read_csr_csr_addr = rg_trap_instr[31:20];
  assign gpr_regfile$read_rs1_rs1 = near_mem$imem_instr[19:15];
  assign gpr_regfile$read_rs2_rs2 = near_mem$imem_instr[24:20];
  assign gpr_regfile$write_rd_rd = ((MUX_csr_regfile$mav_csr_write_1__SEL_1 | MUX_gpr_regfile$write_rd_1__SEL_3) ? rg_trap_instr[11:7] : stage3_rg_stage3[36:32]);
  assign gpr_regfile$write_rd_rd_val = ((MUX_csr_regfile$mav_csr_write_1__SEL_1 | MUX_gpr_regfile$write_rd_1__SEL_3) ? csr_regfile$read_csr[31:0] : stage3_rg_stage3[31:0]);
  assign near_mem$dmem_req_f3 = near_mem$imem_instr[14:12];
  assign near_mem$dmem_req_mstatus_MXR = csr_regfile$read_mstatus[19];
  assign near_mem$dmem_req_op = (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d491 != 2'h1);
  assign near_mem$dmem_req_priv = (csr_regfile$read_mstatus[17] ? csr_regfile$read_mstatus[12:11] : rg_cur_priv);
  assign near_mem$dmem_req_store_value = {32'h00000000, x_out_data_to_stage2_val2__h5225};
  assign near_mem$imem_req_mstatus_MXR = ((((MUX_near_mem$imem_req_1__SEL_1 | MUX_near_mem$imem_req_1__SEL_2) | WILL_FIRE_RL_rl_stage1_restart_after_csrrx) | MUX_near_mem$imem_req_1__SEL_5) ? csr_regfile$read_mstatus[19] : rg_mstatus_MXR);
  assign IF_IF_near_mem_imem_instr__59_BITS_6_TO_0_79_E_ETC___d655 = (((near_mem$imem_instr[6:0] == 7'h63) ? near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_0b_ETC___d616 : ((near_mem$imem_instr[6:0] == 7'h6f) | (near_mem$imem_instr[6:0] == 7'h67))) ? data_to_stage2_addr__h5215 : ((((((near_mem$imem_instr[6:0] == 7'h73) & (near_mem$imem_instr[14:12] == 3'h0)) & (near_mem$imem_instr[11:7] == 5'h00)) & (near_mem$imem_instr[19:15] == 5'h00)) & (near_mem$imem_instr[31:20] == 12'h001)) ? near_mem$imem_pc : 32'h00000000));
  assign IF_NOT_near_mem_imem_instr__59_BITS_14_TO_12_8_ETC___d362 = (NOT_near_mem_imem_instr__59_BITS_14_TO_12_81_E_ETC___d252 ? 4'hb : 4'h0);
  assign IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 = (near_mem$imem_exc ? 4'hb : IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d413);
  assign IF_near_mem_imem_exc__78_THEN_near_mem_imem_ex_ETC___d799 = (near_mem$imem_exc ? {near_mem$imem_exc_code, near_mem$imem_tval} : {alu_outputs_exc_code__h5862, trap_info_tval__h6925});
  assign IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d216 = (rs1_val_bypassed__h3337 == rs2_val__h5339);
  assign IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d218 = ((rs2_val__h5339 ^ 32'h80000000) > (rs1_val_bypassed__h3337 ^ 32'h80000000));
  assign IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d220 = (rs2_val__h5339 > rs1_val_bypassed__h3337);
  assign IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d274 = ((near_mem$imem_instr[6:0] == 7'h63) ? (((((((near_mem$imem_instr[14:12] != 3'h0) & (near_mem$imem_instr[14:12] != 3'h1)) & (near_mem$imem_instr[14:12] != 3'h4)) & (near_mem$imem_instr[14:12] != 3'h5)) & (near_mem$imem_instr[14:12] != 3'h6)) & (near_mem$imem_instr[14:12] != 3'h7)) | IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d227) : ((((near_mem$imem_instr[6:0] == 7'h13) | (near_mem$imem_instr[6:0] == 7'h33)) & ((near_mem$imem_instr[14:12] == 3'h1) | (near_mem$imem_instr[14:12] == 3'h5))) ? near_mem$imem_instr[25] : CASE_near_memimem_instr_BITS_6_TO_0_0b10011_N_ETC__q8));
  assign IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d343 = ((near_mem$imem_instr[6:0] == 7'h63) ? (((((((near_mem$imem_instr[14:12] == 3'h0) | (near_mem$imem_instr[14:12] == 3'h1)) | (near_mem$imem_instr[14:12] == 3'h4)) | (near_mem$imem_instr[14:12] == 3'h5)) | (near_mem$imem_instr[14:12] == 3'h6)) | (near_mem$imem_instr[14:12] == 3'h7)) & IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d291) : ((((near_mem$imem_instr[6:0] == 7'h13) | (near_mem$imem_instr[6:0] == 7'h33)) & ((near_mem$imem_instr[14:12] == 3'h1) | (near_mem$imem_instr[14:12] == 3'h5))) ? (~|near_mem$imem_instr[25]) : CASE_near_memimem_instr_BITS_6_TO_0_0b10011_n_ETC__q9));
  assign IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d571 = ((((near_mem$imem_instr[6:0] == 7'h13) | (near_mem$imem_instr[6:0] == 7'h33)) & ((near_mem$imem_instr[14:12] == 3'h1) | (near_mem$imem_instr[14:12] == 3'h5))) ? alu_outputs___1_val1__h5480 : IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d570);
  assign IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d649 = ((near_mem$imem_instr[6:0] == 7'h63) ? ((((((((near_mem$imem_instr[14:12] != 3'h0) & (near_mem$imem_instr[14:12] != 3'h1)) & (near_mem$imem_instr[14:12] != 3'h4)) & (near_mem$imem_instr[14:12] != 3'h5)) & (near_mem$imem_instr[14:12] != 3'h6)) & (near_mem$imem_instr[14:12] != 3'h7)) | IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d291) | (~|alu_outputs___1_val2__h5367[1])) : (((near_mem$imem_instr[6:0] != 7'h6f) & (near_mem$imem_instr[6:0] != 7'h67)) & (((((near_mem$imem_instr[6:0] != 7'h73) | (near_mem$imem_instr[14:12] != 3'h0)) | (near_mem$imem_instr[11:7] != 5'h00)) | (near_mem$imem_instr[19:15] != 5'h00)) | ((near_mem$imem_instr[31:20] != 12'h000) & (near_mem$imem_instr[31:20] != 12'h001)))));
  assign IF_rg_cur_priv_9_EQ_0b11_75_OR_rg_cur_priv_9_E_ETC___d394 = ((((rg_cur_priv == 2'h3) | ((rg_cur_priv == 2'h1) & (~|csr_regfile$read_mstatus[22]))) & (near_mem$imem_instr[31:20] == 12'h102)) ? 4'h8 : (rg_cur_priv_9_EQ_0b11_75_OR_rg_cur_priv_9_EQ_0_ETC___d392 ? 4'ha : 4'hb));
  assign IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d142 = (stage2_rg_full ? CASE_stage2_rg_stage2_BITS_102_TO_101_0_2_1_IF_ETC__q5 : 2'h0);
  assign IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d161 = (stage2_rg_stage2[100:96] == near_mem$imem_instr[19:15]);
  assign IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d163 = (stage2_rg_stage2[100:96] == near_mem$imem_instr[24:20]);
  assign IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 = (stage2_rg_full ? IF_stage2_rg_stage2_4_BITS_102_TO_101_5_EQ_0_6_ETC___d85 : 2'h0);
  assign IF_stage2_rg_stage2_4_BITS_100_TO_96_13_EQ_0_3_ETC___d137 = ((stage2_rg_stage2[100:96] == 5'h00) ? 2'h0 : ((near_mem$dmem_valid & (~|near_mem$dmem_exc)) ? 2'h2 : 2'h1));
  assign IF_stage2_rg_stage2_4_BITS_102_TO_101_5_EQ_0_6_ETC___d85 = ((stage2_rg_stage2[102:101] == 2'h0) ? 2'h2 : (near_mem$dmem_valid ? (near_mem$dmem_exc ? 2'h3 : 2'h2) : 2'h1));
  assign NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17 = (cur_verbosity__h1827 > 4'h1);
  assign SEXT_near_mem_imem_instr__59_BITS_31_TO_20_02___d303 = {{20{near_memimem_instr_BITS_31_TO_20__q7[11]}}, near_memimem_instr_BITS_31_TO_20__q7};
  assign _theResult_____1_fst__h6562 = ((((near_mem$imem_instr[14:12] == 3'h0) & (near_mem$imem_instr[6:0] == 7'h33)) & near_mem$imem_instr[30]) ? rd_val___1__h6558 : _theResult_____1_fst__h6569);
  assign _theResult____h10743 = ((delta_CPI_instrs__h10742 == 64'h0000000000000000) ? delta_CPI_instrs___1__h10778 : delta_CPI_instrs__h10742);
  assign _theResult___snd__h7382 = ((near_mem$imem_instr[6:0] == 7'h13) ? SEXT_near_mem_imem_instr__59_BITS_31_TO_20_02___d303 : rs2_val__h5339);
  assign alu_outputs___1_addr__h5365 = (IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d227 ? alu_outputs___1_val2__h5367 : alu_outputs___1_val1__h5386);
  assign alu_outputs___1_addr__h5385 = (near_mem$imem_pc + {{11{near_memimem_instr_BIT_31_CONCAT_near_memime_ETC__q2[20]}}, near_memimem_instr_BIT_31_CONCAT_near_memime_ETC__q2});
  assign alu_outputs___1_addr__h5410 = {eaddr__h5553[31:1], 1'b0};
  assign alu_outputs___1_addr__h5583 = (rs1_val_bypassed__h3337 + {{20{near_memimem_instr_BITS_31_TO_25_CONCAT_near__ETC__q6[11]}}, near_memimem_instr_BITS_31_TO_25_CONCAT_near__ETC__q6});
  assign alu_outputs___1_exc_code__h5362 = (near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_0b_ETC___d616 ? 4'h0 : 4'h2);
  assign alu_outputs___1_exc_code__h5843 = ((near_mem$imem_instr[14:12] == 3'h0) ? (((near_mem$imem_instr[11:7] == 5'h00) & (near_mem$imem_instr[19:15] == 5'h00)) ? CASE_near_memimem_instr_BITS_31_TO_20_0b0_CAS_ETC__q4 : 4'h2) : 4'h2);
  assign alu_outputs___1_val1__h5386 = (near_mem$imem_pc + 32'h00000004);
  assign alu_outputs___1_val1__h5480 = ((near_mem$imem_instr[14:12] == 3'h1) ? rd_val__h7278 : (near_mem$imem_instr[30] ? rd_val__h7352 : rd_val__h7330));
  assign alu_outputs___1_val1__h5516 = (((near_mem$imem_instr[14:12] == 3'h0) & ((near_mem$imem_instr[6:0] != 7'h33) | (~|near_mem$imem_instr[30]))) ? rd_val___1__h6550 : _theResult_____1_fst__h6562);
  assign alu_outputs___1_val1__h5847 = (near_mem$imem_instr[14] ? {27'h0000000, near_mem$imem_instr[19:15]} : rs1_val_bypassed__h3337);
  assign alu_outputs___1_val2__h5367 = (near_mem$imem_pc + {{19{near_memimem_instr_BIT_31_CONCAT_near_memime_ETC__q1[12]}}, near_memimem_instr_BIT_31_CONCAT_near_memime_ETC__q1});
  assign cpi__h10745 = (x__h10744 / 64'h000000000000000a);
  assign cpifrac__h10746 = (x__h10744 % 64'h000000000000000a);
  assign csr_regfile_read_csr_mcycle__8_MINUS_rg_start__ETC___d818 = ({64'h0000000000000000, delta_CPI_cycles__h10741} * 128'h0000000000000000000000000000000a);
  assign cur_verbosity__h1827 = ((cfg_logdelay > csr_regfile$read_csr_minstret) ? 4'h0 : cfg_verbosity);
  assign delta_CPI_cycles__h10741 = (csr_regfile$read_csr_mcycle - rg_start_CPI_cycles);
  assign delta_CPI_instrs___1__h10778 = (delta_CPI_instrs__h10742 + 64'h0000000000000001);
  assign delta_CPI_instrs__h10742 = (csr_regfile$read_csr_minstret - rg_start_CPI_instrs);
  assign eaddr__h5553 = (rs1_val_bypassed__h3337 + SEXT_near_mem_imem_instr__59_BITS_31_TO_20_02___d303);
  assign fall_through_pc__h5175 = (near_mem$imem_pc + (near_mem$imem_is_i32_not_i16 ? 32'h00000004 : 32'h00000002));
  assign near_memimem_instr_BITS_31_TO_20__q7 = near_mem$imem_instr[31:20];
  assign near_memimem_instr_BITS_31_TO_25_CONCAT_near__ETC__q6 = {near_mem$imem_instr[31:25], near_mem$imem_instr[11:7]};
  assign near_memimem_instr_BIT_31_CONCAT_near_memime_ETC__q1 = {near_mem$imem_instr[31], near_mem$imem_instr[7], near_mem$imem_instr[30:25], near_mem$imem_instr[11:8], 1'b0};
  assign near_memimem_instr_BIT_31_CONCAT_near_memime_ETC__q2 = {near_mem$imem_instr[31], near_mem$imem_instr[19:12], near_mem$imem_instr[20], near_mem$imem_instr[30:21], 1'b0};
  assign output_stage2___1_bypass_rd_val__h4960 = (((~|near_mem$dmem_valid) | (~|near_mem$dmem_exc)) ? ((stage2_rg_stage2[100:96] == 5'h00) ? stage2_rg_stage2[63:32] : near_mem$dmem_word64[31:0]) : stage2_rg_stage2[63:32]);
  assign rd_val___1__h6550 = (rs1_val_bypassed__h3337 + _theResult___snd__h7382);
  assign rd_val___1__h6558 = (rs1_val_bypassed__h3337 - _theResult___snd__h7382);
  assign rd_val___1__h6565 = (((_theResult___snd__h7382 ^ 32'h80000000) > (rs1_val_bypassed__h3337 ^ 32'h80000000)) ? 32'h00000001 : 32'h00000000);
  assign rd_val___1__h6572 = ((_theResult___snd__h7382 > rs1_val_bypassed__h3337) ? 32'h00000001 : 32'h00000000);
  assign rd_val__h5072 = (((stage3_rg_full & stage3_rg_stage3[37]) & (stage3_rg_stage3[36:32] == near_mem$imem_instr[19:15])) ? stage3_rg_stage3[31:0] : gpr_regfile$read_rs1);
  assign rd_val__h5132 = (((stage3_rg_full & stage3_rg_stage3[37]) & (stage3_rg_stage3[36:32] == near_mem$imem_instr[24:20])) ? stage3_rg_stage3[31:0] : gpr_regfile$read_rs2);
  assign rd_val__h5523 = {near_mem$imem_instr[31:12], 12'h000};
  assign rd_val__h5537 = (near_mem$imem_pc + rd_val__h5523);
  assign rd_val__h7278 = (rs1_val_bypassed__h3337 << shamt__h5467);
  assign rd_val__h7330 = (rs1_val_bypassed__h3337 >> shamt__h5467);
  assign rg_trap_info_04_BITS_67_TO_36_05_EQ_csr_regfil_ETC___d814 = (rg_trap_info[67:36] == csr_regfile$csr_trap_actions[97:66]);
  assign rs1_val__h11213 = ((rg_trap_instr[14:12] == 3'h1) ? rg_csr_val1 : {27'h0000000, rg_trap_instr[19:15]});
  assign rs1_val_bypassed__h3337 = ((near_mem$imem_instr[19:15] == 5'h00) ? 32'h00000000 : val__h5074);
  assign rs2_val__h5339 = ((near_mem$imem_instr[24:20] == 5'h00) ? 32'h00000000 : val__h5134);
  assign shamt__h5467 = ((near_mem$imem_instr[6:0] == 7'h13) ? near_mem$imem_instr[24:20] : rs2_val__h5339[4:0]);
  assign trap_info_tval__h6925 = (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d649 ? near_mem$imem_instr : IF_IF_near_mem_imem_instr__59_BITS_6_TO_0_79_E_ETC___d655);
  assign val__h5074 = (((IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d142 == 2'h2) & IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d161) ? x_out_bypass_rd_val__h4969 : rd_val__h5072);
  assign val__h5134 = (((IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d142 == 2'h2) & IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d163) ? x_out_bypass_rd_val__h4969 : rd_val__h5132);
  assign value__h6967 = (near_mem$imem_exc ? near_mem$imem_tval : trap_info_tval__h6925);
  assign x__h10744 = (csr_regfile_read_csr_mcycle__8_MINUS_rg_start__ETC___d818[63:0] / _theResult____h10743);
  assign x_exc_code__h15410 = ((csr_regfile$interrupt_pending[4] & (~|csr_regfile$nmi_pending)) ? csr_regfile$interrupt_pending[3:0] : 4'h0);
  assign x_out_bypass_rd_val__h4969 = ((stage2_rg_stage2[102:101] == 2'h0) ? stage2_rg_stage2[63:32] : output_stage2___1_bypass_rd_val__h4960);
  assign x_out_data_to_stage2_rd__h5222 = ((near_mem$imem_instr[6:0] == 7'h63) ? 5'h00 : near_mem$imem_instr[11:7]);
  assign x_out_data_to_stage2_val2__h5225 = ((near_mem$imem_instr[6:0] == 7'h63) ? alu_outputs___1_val2__h5367 : rs2_val__h5339);
  assign x_out_next_pc__h5189 = (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352 ? data_to_stage2_addr__h5215 : fall_through_pc__h5175);
  assign x_out_trap_info_exc_code__h6928 = (near_mem$imem_exc ? near_mem$imem_exc_code : alu_outputs_exc_code__h5862);
  assign RDY_hart0_server_reset_request_put = f_reset_reqs$FULL_N;
  assign CAN_FIRE_hart0_server_reset_request_put = f_reset_reqs$FULL_N;
  assign WILL_FIRE_hart0_server_reset_request_put = EN_hart0_server_reset_request_put;
  assign hart0_server_reset_response_get = f_reset_rsps$D_OUT;
  assign RDY_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N;
  assign CAN_FIRE_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N;
  assign WILL_FIRE_hart0_server_reset_response_get = EN_hart0_server_reset_response_get;
  assign imem_master_awvalid = near_mem$imem_master_awvalid;
  assign imem_master_awid = near_mem$imem_master_awid;
  assign imem_master_awaddr = near_mem$imem_master_awaddr;
  assign imem_master_awlen = near_mem$imem_master_awlen;
  assign imem_master_awsize = near_mem$imem_master_awsize;
  assign imem_master_awburst = near_mem$imem_master_awburst;
  assign imem_master_awlock = near_mem$imem_master_awlock;
  assign imem_master_awcache = near_mem$imem_master_awcache;
  assign imem_master_awprot = near_mem$imem_master_awprot;
  assign imem_master_awqos = near_mem$imem_master_awqos;
  assign imem_master_awregion = near_mem$imem_master_awregion;
  assign imem_master_wvalid = near_mem$imem_master_wvalid;
  assign imem_master_wdata = near_mem$imem_master_wdata;
  assign imem_master_wstrb = near_mem$imem_master_wstrb;
  assign imem_master_wlast = near_mem$imem_master_wlast;
  assign imem_master_bready = near_mem$imem_master_bready;
  assign imem_master_arvalid = near_mem$imem_master_arvalid;
  assign imem_master_arid = near_mem$imem_master_arid;
  assign imem_master_araddr = near_mem$imem_master_araddr;
  assign imem_master_arlen = near_mem$imem_master_arlen;
  assign imem_master_arsize = near_mem$imem_master_arsize;
  assign imem_master_arburst = near_mem$imem_master_arburst;
  assign imem_master_arlock = near_mem$imem_master_arlock;
  assign imem_master_arcache = near_mem$imem_master_arcache;
  assign imem_master_arprot = near_mem$imem_master_arprot;
  assign imem_master_arqos = near_mem$imem_master_arqos;
  assign imem_master_arregion = near_mem$imem_master_arregion;
  assign imem_master_rready = near_mem$imem_master_rready;
  assign dmem_master_awvalid = near_mem$dmem_master_awvalid;
  assign dmem_master_awid = near_mem$dmem_master_awid;
  assign dmem_master_awaddr = near_mem$dmem_master_awaddr;
  assign dmem_master_awlen = near_mem$dmem_master_awlen;
  assign dmem_master_awsize = near_mem$dmem_master_awsize;
  assign dmem_master_awburst = near_mem$dmem_master_awburst;
  assign dmem_master_awlock = near_mem$dmem_master_awlock;
  assign dmem_master_awcache = near_mem$dmem_master_awcache;
  assign dmem_master_awprot = near_mem$dmem_master_awprot;
  assign dmem_master_awqos = near_mem$dmem_master_awqos;
  assign dmem_master_awregion = near_mem$dmem_master_awregion;
  assign dmem_master_wvalid = near_mem$dmem_master_wvalid;
  assign dmem_master_wdata = near_mem$dmem_master_wdata;
  assign dmem_master_wstrb = near_mem$dmem_master_wstrb;
  assign dmem_master_wlast = near_mem$dmem_master_wlast;
  assign dmem_master_bready = near_mem$dmem_master_bready;
  assign dmem_master_arvalid = near_mem$dmem_master_arvalid;
  assign dmem_master_arid = near_mem$dmem_master_arid;
  assign dmem_master_araddr = near_mem$dmem_master_araddr;
  assign dmem_master_arlen = near_mem$dmem_master_arlen;
  assign dmem_master_arsize = near_mem$dmem_master_arsize;
  assign dmem_master_arburst = near_mem$dmem_master_arburst;
  assign dmem_master_arlock = near_mem$dmem_master_arlock;
  assign dmem_master_arcache = near_mem$dmem_master_arcache;
  assign dmem_master_arprot = near_mem$dmem_master_arprot;
  assign dmem_master_arqos = near_mem$dmem_master_arqos;
  assign dmem_master_arregion = near_mem$dmem_master_arregion;
  assign dmem_master_rready = near_mem$dmem_master_rready;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity;
  assign CAN_FIRE_RL_rl_show_pipe = (((NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17 & (rg_state != 4'h0)) & (rg_state != 4'h1)) & (rg_state != 4'hc));
  assign WILL_FIRE_RL_rl_show_pipe = CAN_FIRE_RL_rl_show_pipe;
  assign CAN_FIRE_RL_rl_reset_complete = MUX_rg_state$write_1__SEL_1;
  assign WILL_FIRE_RL_rl_reset_complete = MUX_rg_state$write_1__SEL_1;
  assign CAN_FIRE_RL_rl_pipe = (((((rg_state == 4'h3) & ((stage3_rg_full | (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)) | stage1_rg_full)) & (stage3_rg_full | (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h3))) & (((stage3_rg_full | (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)) | (~|stage1_rg_full)) | NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d702)) & ((NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d716 | (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)) | stage3_rg_full));
  assign WILL_FIRE_RL_rl_pipe = CAN_FIRE_RL_rl_pipe;
  assign CAN_FIRE_RL_rl_stage2_nonpipe = (((rg_state == 4'h3) & (~|stage3_rg_full)) & (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h3));
  assign WILL_FIRE_RL_rl_stage2_nonpipe = CAN_FIRE_RL_rl_stage2_nonpipe;
  assign CAN_FIRE_RL_rl_stage1_trap = (((rg_state_8_EQ_3_97_AND_NOT_csr_regfile_interru_ETC___d793 & stage1_rg_full) & near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'hb));
  assign WILL_FIRE_RL_rl_stage1_trap = CAN_FIRE_RL_rl_stage1_trap;
  assign CAN_FIRE_RL_rl_trap = ((rg_state == 4'h4) & ((~|stage1_rg_full) | near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177));
  assign WILL_FIRE_RL_rl_trap = CAN_FIRE_RL_rl_trap;
  assign CAN_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_9;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_9;
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C = MUX_rg_state$write_1__SEL_10;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C = MUX_rg_state$write_1__SEL_10;
  assign WILL_FIRE_RL_rl_stage1_restart_after_csrrx = CAN_FIRE_RL_rl_stage1_restart_after_csrrx;
  assign CAN_FIRE_RL_rl_stage1_xRET = (((rg_state_8_EQ_3_97_AND_NOT_csr_regfile_interru_ETC___d793 & stage1_rg_full) & near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311) & (((IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h7) | (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h8)) | (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h9)));
  assign WILL_FIRE_RL_rl_stage1_xRET = CAN_FIRE_RL_rl_stage1_xRET;
  assign CAN_FIRE_RL_rl_stage1_FENCE_I = ((((near_mem$RDY_server_fence_i_request_put & rg_state_8_EQ_3_97_AND_NOT_csr_regfile_interru_ETC___d793) & stage1_rg_full) & near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h5));
  assign WILL_FIRE_RL_rl_stage1_FENCE_I = CAN_FIRE_RL_rl_stage1_FENCE_I;
  assign CAN_FIRE_RL_rl_finish_FENCE_I = (near_mem$RDY_server_fence_i_response_get & (rg_state == 4'h9));
  assign WILL_FIRE_RL_rl_finish_FENCE_I = CAN_FIRE_RL_rl_finish_FENCE_I;
  assign CAN_FIRE_RL_rl_stage1_FENCE = ((((near_mem$RDY_server_fence_request_put & rg_state_8_EQ_3_97_AND_NOT_csr_regfile_interru_ETC___d793) & stage1_rg_full) & near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h4));
  assign WILL_FIRE_RL_rl_stage1_FENCE = CAN_FIRE_RL_rl_stage1_FENCE;
  assign CAN_FIRE_RL_rl_finish_FENCE = (near_mem$RDY_server_fence_response_get & (rg_state == 4'ha));
  assign WILL_FIRE_RL_rl_finish_FENCE = CAN_FIRE_RL_rl_finish_FENCE;
  assign CAN_FIRE_RL_rl_stage1_SFENCE_VMA = (((rg_state_8_EQ_3_97_AND_NOT_csr_regfile_interru_ETC___d793 & stage1_rg_full) & near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h6));
  assign WILL_FIRE_RL_rl_stage1_SFENCE_VMA = CAN_FIRE_RL_rl_stage1_SFENCE_VMA;
  assign WILL_FIRE_RL_rl_finish_SFENCE_VMA = CAN_FIRE_RL_rl_finish_SFENCE_VMA;
  assign CAN_FIRE_RL_rl_stage1_WFI = (((rg_state_8_EQ_3_97_AND_NOT_csr_regfile_interru_ETC___d793 & stage1_rg_full) & near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'ha));
  assign WILL_FIRE_RL_rl_stage1_WFI = CAN_FIRE_RL_rl_stage1_WFI;
  assign CAN_FIRE_RL_rl_WFI_resume = ((rg_state == 4'hc) & csr_regfile$wfi_resume);
  assign WILL_FIRE_RL_rl_WFI_resume = CAN_FIRE_RL_rl_WFI_resume;
  assign CAN_FIRE_RL_rl_reset_from_WFI = ((rg_state == 4'hc) & f_reset_reqs$EMPTY_N);
  assign WILL_FIRE_RL_rl_reset_from_WFI = MUX_rg_state$write_1__SEL_4;
  assign WILL_FIRE_RL_rl_trap_fetch = CAN_FIRE_RL_rl_trap_fetch;
  assign CAN_FIRE_RL_rl_stage1_interrupt = (((((((csr_regfile$interrupt_pending[4] | csr_regfile$nmi_pending) & (rg_state == 4'h3)) & stage1_rg_full) & near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) & IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d910) & (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h0)) & (~|stage3_rg_full));
  assign WILL_FIRE_RL_rl_stage1_interrupt = CAN_FIRE_RL_rl_stage1_interrupt;
  assign CAN_FIRE_RL_rl_reset_start = (gpr_regfile_RDY_server_reset_request_put__59_A_ETC___d671 & (rg_state == 4'h0));
  assign WILL_FIRE_RL_rl_reset_start = CAN_FIRE_RL_rl_reset_start;
  assign CAN_FIRE_RL_stage3_rl_reset = (stage3_f_reset_reqs$EMPTY_N & stage3_f_reset_rsps$FULL_N);
  assign WILL_FIRE_RL_stage3_rl_reset = CAN_FIRE_RL_stage3_rl_reset;
  assign CAN_FIRE_RL_stage2_rl_reset_end = (stage2_f_reset_rsps$FULL_N & stage2_rg_resetting);
  assign WILL_FIRE_RL_stage2_rl_reset_end = CAN_FIRE_RL_stage2_rl_reset_end;
  assign CAN_FIRE_RL_stage2_rl_reset_begin = stage2_f_reset_reqs$EMPTY_N;
  assign WILL_FIRE_RL_stage2_rl_reset_begin = stage2_f_reset_reqs$EMPTY_N;
  assign CAN_FIRE_RL_stage1_rl_reset = (stage1_f_reset_reqs$EMPTY_N & stage1_f_reset_rsps$FULL_N);
  assign WILL_FIRE_RL_stage1_rl_reset = CAN_FIRE_RL_stage1_rl_reset;
  assign MUX_csr_regfile$mav_csr_write_1__SEL_1 = (WILL_FIRE_RL_rl_stage1_CSRR_W_2 & csr_regfile$access_permitted_1);
  assign MUX_gpr_regfile$write_rd_1__SEL_3 = (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 & csr_regfile$access_permitted_2);
  assign MUX_near_mem$imem_req_1__SEL_1 = (WILL_FIRE_RL_rl_reset_complete & rg_run_on_reset);
  assign MUX_near_mem$imem_req_1__SEL_2 = ((WILL_FIRE_RL_rl_pipe & NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d716) & NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d756);
  assign MUX_near_mem$imem_req_1__SEL_5 = (((WILL_FIRE_RL_rl_WFI_resume | WILL_FIRE_RL_rl_finish_SFENCE_VMA) | WILL_FIRE_RL_rl_finish_FENCE) | WILL_FIRE_RL_rl_finish_FENCE_I);
  assign MUX_rg_next_pc$write_1__SEL_1 = (((((WILL_FIRE_RL_rl_stage1_WFI | WILL_FIRE_RL_rl_stage1_SFENCE_VMA) | WILL_FIRE_RL_rl_stage1_FENCE) | WILL_FIRE_RL_rl_stage1_FENCE_I) | WILL_FIRE_RL_rl_stage1_CSRR_S_or_C) | WILL_FIRE_RL_rl_stage1_CSRR_W);
  assign MUX_rg_retiring$write_1__SEL_1 = (WILL_FIRE_RL_rl_pipe & (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h2));
  assign MUX_rg_state$write_1__SEL_1 = (gpr_regfile_RDY_server_reset_response_get__76__ETC___d688 & (rg_state == 4'h1));
  assign MUX_rg_state$write_1__SEL_4 = (CAN_FIRE_RL_rl_reset_from_WFI & (~|WILL_FIRE_RL_rl_WFI_resume));
  assign MUX_rg_state$write_1__SEL_6 = (((((WILL_FIRE_RL_rl_trap_fetch | WILL_FIRE_RL_rl_WFI_resume) | WILL_FIRE_RL_rl_finish_SFENCE_VMA) | WILL_FIRE_RL_rl_finish_FENCE) | WILL_FIRE_RL_rl_finish_FENCE_I) | WILL_FIRE_RL_rl_stage1_restart_after_csrrx);
  assign MUX_rg_state$write_1__SEL_7 = ((WILL_FIRE_RL_rl_stage1_interrupt | WILL_FIRE_RL_rl_stage1_trap) | WILL_FIRE_RL_rl_stage2_nonpipe);
  assign MUX_rg_state$write_1__SEL_8 = (WILL_FIRE_RL_rl_stage1_xRET | WILL_FIRE_RL_rl_trap);
  assign MUX_rg_state$write_1__SEL_9 = (((rg_state_8_EQ_3_97_AND_NOT_csr_regfile_interru_ETC___d793 & stage1_rg_full) & near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h2));
  assign MUX_rg_state$write_1__SEL_10 = (((rg_state_8_EQ_3_97_AND_NOT_csr_regfile_interru_ETC___d793 & stage1_rg_full) & near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h3));
  assign MUX_rg_trap_info$write_1__SEL_1 = (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C | WILL_FIRE_RL_rl_stage1_CSRR_W);
  assign MUX_rg_trap_instr$write_1__SEL_1 = (((WILL_FIRE_RL_rl_stage1_interrupt | WILL_FIRE_RL_rl_stage1_CSRR_S_or_C) | WILL_FIRE_RL_rl_stage1_CSRR_W) | WILL_FIRE_RL_rl_stage1_trap);
  assign MUX_rg_trap_interrupt$write_1__SEL_1 = (((WILL_FIRE_RL_rl_stage1_CSRR_S_or_C | WILL_FIRE_RL_rl_stage1_CSRR_W) | WILL_FIRE_RL_rl_stage1_trap) | WILL_FIRE_RL_rl_stage2_nonpipe);
  assign MUX_s1_to_s2$write_1__VAL_1 = ((NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d773 & stage1_rg_full) & near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355);
  assign MUX_stage1_rg_full$write_1__VAL_10 = (NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d776 | ((csr_regfile_interrupt_pending_rg_cur_priv_9_07_ETC___d779 | NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d713) & stage1_rg_full));
  assign MUX_stage2_rg_full$write_1__VAL_3 = (NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d769 | ((IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h2) & (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)));
  assign cfg_logdelay$D_IN = set_verbosity_logdelay;
  assign cfg_logdelay$EN = EN_set_verbosity;
  assign cfg_verbosity$D_IN = set_verbosity_verbosity;
  assign cfg_verbosity$EN = EN_set_verbosity;
  assign rg_csr_pc$D_IN = near_mem$imem_pc;
  assign rg_csr_pc$EN = MUX_rg_trap_info$write_1__SEL_1;
  assign rg_csr_val1$D_IN = x_out_data_to_stage2_val1__h5224;
  assign rg_csr_val1$EN = MUX_rg_trap_info$write_1__SEL_1;
  assign rg_cur_priv$EN = ((WILL_FIRE_RL_rl_trap | WILL_FIRE_RL_rl_stage1_xRET) | WILL_FIRE_RL_rl_reset_start);
  assign rg_mstatus_MXR$EN = MUX_rg_state$write_1__SEL_8;
  assign rg_next_pc$EN = (((((((WILL_FIRE_RL_rl_stage1_WFI | WILL_FIRE_RL_rl_stage1_SFENCE_VMA) | WILL_FIRE_RL_rl_stage1_FENCE) | WILL_FIRE_RL_rl_stage1_FENCE_I) | WILL_FIRE_RL_rl_stage1_CSRR_S_or_C) | WILL_FIRE_RL_rl_stage1_CSRR_W) | WILL_FIRE_RL_rl_trap) | WILL_FIRE_RL_rl_stage1_xRET);
  assign rg_retiring$EN = ((((((((((WILL_FIRE_RL_rl_pipe & (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h2)) | (WILL_FIRE_RL_rl_stage1_CSRR_W_2 & csr_regfile$access_permitted_1)) | (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 & csr_regfile$access_permitted_2)) | WILL_FIRE_RL_rl_stage1_WFI) | WILL_FIRE_RL_rl_stage1_SFENCE_VMA) | WILL_FIRE_RL_rl_stage1_FENCE) | WILL_FIRE_RL_rl_stage1_FENCE_I) | WILL_FIRE_RL_rl_stage1_xRET) | WILL_FIRE_RL_rl_trap) | WILL_FIRE_RL_rl_reset_start);
  assign rg_run_on_reset$D_IN = f_reset_reqs$D_OUT;
  assign rg_run_on_reset$EN = CAN_FIRE_RL_rl_reset_start;
  assign rg_sstatus_SUM$EN = MUX_rg_state$write_1__SEL_8;
  assign rg_start_CPI_cycles$D_IN = csr_regfile$read_csr_mcycle;
  assign rg_start_CPI_cycles$EN = MUX_near_mem$imem_req_1__SEL_1;
  assign rg_start_CPI_instrs$D_IN = csr_regfile$read_csr_minstret;
  assign rg_start_CPI_instrs$EN = MUX_near_mem$imem_req_1__SEL_1;
  assign rg_state$EN = (((((((((((((((((((((WILL_FIRE_RL_rl_reset_complete | WILL_FIRE_RL_rl_stage1_CSRR_W_2) | WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2) | WILL_FIRE_RL_rl_reset_from_WFI) | WILL_FIRE_RL_rl_reset_start) | WILL_FIRE_RL_rl_trap_fetch) | WILL_FIRE_RL_rl_WFI_resume) | WILL_FIRE_RL_rl_finish_SFENCE_VMA) | WILL_FIRE_RL_rl_finish_FENCE) | WILL_FIRE_RL_rl_finish_FENCE_I) | WILL_FIRE_RL_rl_stage1_restart_after_csrrx) | WILL_FIRE_RL_rl_stage1_interrupt) | WILL_FIRE_RL_rl_stage1_trap) | WILL_FIRE_RL_rl_stage2_nonpipe) | WILL_FIRE_RL_rl_stage1_xRET) | WILL_FIRE_RL_rl_trap) | WILL_FIRE_RL_rl_stage1_CSRR_W) | WILL_FIRE_RL_rl_stage1_CSRR_S_or_C) | WILL_FIRE_RL_rl_stage1_FENCE_I) | WILL_FIRE_RL_rl_stage1_FENCE) | WILL_FIRE_RL_rl_stage1_SFENCE_VMA) | WILL_FIRE_RL_rl_stage1_WFI);
  assign rg_trap_info$EN = ((((WILL_FIRE_RL_rl_stage1_CSRR_S_or_C | WILL_FIRE_RL_rl_stage1_CSRR_W) | WILL_FIRE_RL_rl_stage2_nonpipe) | WILL_FIRE_RL_rl_stage1_trap) | WILL_FIRE_RL_rl_stage1_interrupt);
  assign rg_trap_instr$EN = ((((WILL_FIRE_RL_rl_stage1_interrupt | WILL_FIRE_RL_rl_stage1_CSRR_S_or_C) | WILL_FIRE_RL_rl_stage1_CSRR_W) | WILL_FIRE_RL_rl_stage1_trap) | WILL_FIRE_RL_rl_stage2_nonpipe);
  assign rg_trap_interrupt$EN = ((((WILL_FIRE_RL_rl_stage1_CSRR_S_or_C | WILL_FIRE_RL_rl_stage1_CSRR_W) | WILL_FIRE_RL_rl_stage1_trap) | WILL_FIRE_RL_rl_stage2_nonpipe) | WILL_FIRE_RL_rl_stage1_interrupt);
  assign s1_to_s2$D_IN = (WILL_FIRE_RL_rl_pipe & MUX_s1_to_s2$write_1__VAL_1);
  assign s1_to_s2$EN = (WILL_FIRE_RL_rl_pipe | WILL_FIRE_RL_rl_reset_start);
  assign s2_to_s3$D_IN = MUX_rg_retiring$write_1__SEL_1;
  assign s2_to_s3$EN = (WILL_FIRE_RL_rl_pipe | WILL_FIRE_RL_rl_reset_start);
  assign s3_deq$D_IN = (WILL_FIRE_RL_rl_pipe & stage3_rg_full);
  assign s3_deq$EN = (WILL_FIRE_RL_rl_pipe | WILL_FIRE_RL_rl_reset_start);
  assign stage1_rg_full$EN = (((((((((((WILL_FIRE_RL_rl_reset_complete & rg_run_on_reset) | WILL_FIRE_RL_rl_pipe) | WILL_FIRE_RL_rl_stage1_xRET) | WILL_FIRE_RL_rl_trap) | WILL_FIRE_RL_stage1_rl_reset) | WILL_FIRE_RL_rl_trap_fetch) | WILL_FIRE_RL_rl_WFI_resume) | WILL_FIRE_RL_rl_finish_SFENCE_VMA) | WILL_FIRE_RL_rl_finish_FENCE) | WILL_FIRE_RL_rl_finish_FENCE_I) | WILL_FIRE_RL_rl_stage1_restart_after_csrrx);
  assign stage2_rg_full$EN = ((((WILL_FIRE_RL_rl_reset_complete & rg_run_on_reset) | WILL_FIRE_RL_rl_pipe) | WILL_FIRE_RL_rl_trap) | stage2_f_reset_reqs$EMPTY_N);
  assign stage2_rg_resetting$D_IN = stage2_f_reset_reqs$EMPTY_N;
  assign stage2_rg_resetting$EN = (WILL_FIRE_RL_stage2_rl_reset_end | stage2_f_reset_reqs$EMPTY_N);
  assign stage2_rg_stage2$EN = (WILL_FIRE_RL_rl_pipe & NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d737);
  assign stage3_rg_full$EN = (((WILL_FIRE_RL_rl_reset_complete & rg_run_on_reset) | WILL_FIRE_RL_rl_pipe) | WILL_FIRE_RL_stage3_rl_reset);
  assign stage3_rg_stage3$EN = MUX_rg_retiring$write_1__SEL_1;
  assign csr_regfile$access_permitted_1_priv = rg_cur_priv;
  assign csr_regfile$access_permitted_2_priv = rg_cur_priv;
  assign csr_regfile$csr_trap_actions_from_priv = rg_cur_priv;
  assign csr_regfile$csr_trap_actions_interrupt = (rg_trap_interrupt & (~|csr_regfile$nmi_pending));
  assign csr_regfile$csr_trap_actions_nmi = (rg_trap_interrupt & csr_regfile$nmi_pending);
  assign csr_regfile$interrupt_pending_cur_priv = rg_cur_priv;
  assign csr_regfile$m_external_interrupt_req_set_not_clear = m_external_interrupt_req_set_not_clear;
  assign csr_regfile$nmi_req_set_not_clear = nmi_req_set_not_clear;
  assign csr_regfile$s_external_interrupt_req_set_not_clear = s_external_interrupt_req_set_not_clear;
  assign csr_regfile$software_interrupt_req_set_not_clear = software_interrupt_req_set_not_clear;
  assign csr_regfile$timer_interrupt_req_set_not_clear = timer_interrupt_req_set_not_clear;
  assign csr_regfile$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start;
  assign csr_regfile$EN_server_reset_response_get = MUX_rg_state$write_1__SEL_1;
  assign csr_regfile$EN_mav_csr_write = ((WILL_FIRE_RL_rl_stage1_CSRR_W_2 & csr_regfile$access_permitted_1) | ((WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 & csr_regfile$access_permitted_2) & (rg_trap_instr[19:15] != 5'h00)));
  assign csr_regfile$EN_csr_trap_actions = CAN_FIRE_RL_rl_trap;
  assign csr_regfile$EN_csr_ret_actions = CAN_FIRE_RL_rl_stage1_xRET;
  assign csr_regfile$EN_csr_minstret_incr = ((((((((WILL_FIRE_RL_rl_pipe & (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h2)) | (WILL_FIRE_RL_rl_stage1_CSRR_W_2 & csr_regfile$access_permitted_1)) | (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 & csr_regfile$access_permitted_2)) | WILL_FIRE_RL_rl_stage1_WFI) | WILL_FIRE_RL_rl_stage1_SFENCE_VMA) | WILL_FIRE_RL_rl_stage1_FENCE) | WILL_FIRE_RL_rl_stage1_FENCE_I) | WILL_FIRE_RL_rl_stage1_xRET);
  assign f_reset_reqs$D_IN = hart0_server_reset_request_put;
  assign f_reset_reqs$ENQ = EN_hart0_server_reset_request_put;
  assign f_reset_reqs$DEQ = (gpr_regfile_RDY_server_reset_request_put__59_A_ETC___d671 & (rg_state == 4'h0));
  assign f_reset_rsps$D_IN = rg_run_on_reset;
  assign f_reset_rsps$ENQ = MUX_rg_state$write_1__SEL_1;
  assign f_reset_rsps$DEQ = EN_hart0_server_reset_response_get;
  assign gpr_regfile$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start;
  assign gpr_regfile$EN_server_reset_response_get = MUX_rg_state$write_1__SEL_1;
  assign gpr_regfile$EN_write_rd = ((((WILL_FIRE_RL_rl_pipe & stage3_rg_full) & stage3_rg_stage3[37]) | (WILL_FIRE_RL_rl_stage1_CSRR_W_2 & csr_regfile$access_permitted_1)) | (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 & csr_regfile$access_permitted_2));
  assign near_mem$dmem_master_arready = dmem_master_arready;
  assign near_mem$dmem_master_awready = dmem_master_awready;
  assign near_mem$dmem_master_bid = dmem_master_bid;
  assign near_mem$dmem_master_bresp = dmem_master_bresp;
  assign near_mem$dmem_master_bvalid = dmem_master_bvalid;
  assign near_mem$dmem_master_rdata = dmem_master_rdata;
  assign near_mem$dmem_master_rid = dmem_master_rid;
  assign near_mem$dmem_master_rlast = dmem_master_rlast;
  assign near_mem$dmem_master_rresp = dmem_master_rresp;
  assign near_mem$dmem_master_rvalid = dmem_master_rvalid;
  assign near_mem$dmem_master_wready = dmem_master_wready;
  assign near_mem$dmem_req_addr = x_out_data_to_stage2_addr__h5223;
  assign near_mem$dmem_req_satp = csr_regfile$read_satp;
  assign near_mem$imem_master_arready = imem_master_arready;
  assign near_mem$imem_master_awready = imem_master_awready;
  assign near_mem$imem_master_bid = imem_master_bid;
  assign near_mem$imem_master_bresp = imem_master_bresp;
  assign near_mem$imem_master_bvalid = imem_master_bvalid;
  assign near_mem$imem_master_rdata = imem_master_rdata;
  assign near_mem$imem_master_rid = imem_master_rid;
  assign near_mem$imem_master_rlast = imem_master_rlast;
  assign near_mem$imem_master_rresp = imem_master_rresp;
  assign near_mem$imem_master_rvalid = imem_master_rvalid;
  assign near_mem$imem_master_wready = imem_master_wready;
  assign near_mem$imem_req_priv = rg_cur_priv;
  assign near_mem$imem_req_satp = csr_regfile$read_satp;
  assign near_mem$imem_req_sstatus_SUM = (WILL_FIRE_RL_rl_trap_fetch & rg_sstatus_SUM);
  assign near_mem$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start;
  assign near_mem$EN_server_reset_response_get = MUX_rg_state$write_1__SEL_1;
  assign near_mem$EN_imem_req = ((((((((WILL_FIRE_RL_rl_reset_complete & rg_run_on_reset) | ((WILL_FIRE_RL_rl_pipe & NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d716) & NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d756)) | WILL_FIRE_RL_rl_stage1_restart_after_csrrx) | WILL_FIRE_RL_rl_trap_fetch) | WILL_FIRE_RL_rl_WFI_resume) | WILL_FIRE_RL_rl_finish_SFENCE_VMA) | WILL_FIRE_RL_rl_finish_FENCE) | WILL_FIRE_RL_rl_finish_FENCE_I);
  assign near_mem$EN_dmem_req = ((WILL_FIRE_RL_rl_pipe & NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d737) & ((IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d491 == 2'h1) | (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d491 == 2'h2)));
  assign near_mem$EN_server_fence_i_request_put = CAN_FIRE_RL_rl_stage1_FENCE_I;
  assign near_mem$EN_server_fence_i_response_get = CAN_FIRE_RL_rl_finish_FENCE_I;
  assign near_mem$EN_server_fence_request_put = CAN_FIRE_RL_rl_stage1_FENCE;
  assign near_mem$EN_server_fence_response_get = CAN_FIRE_RL_rl_finish_FENCE;
  assign near_mem$EN_sfence_vma = CAN_FIRE_RL_rl_stage1_SFENCE_VMA;
  assign stage1_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start;
  assign stage1_f_reset_reqs$DEQ = CAN_FIRE_RL_stage1_rl_reset;
  assign stage1_f_reset_rsps$ENQ = CAN_FIRE_RL_stage1_rl_reset;
  assign stage1_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_1;
  assign stage2_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start;
  assign stage2_f_reset_reqs$DEQ = stage2_f_reset_reqs$EMPTY_N;
  assign stage2_f_reset_rsps$ENQ = CAN_FIRE_RL_stage2_rl_reset_end;
  assign stage2_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_1;
  assign stage3_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start;
  assign stage3_f_reset_reqs$DEQ = CAN_FIRE_RL_stage3_rl_reset;
  assign stage3_f_reset_rsps$ENQ = CAN_FIRE_RL_stage3_rl_reset;
  assign stage3_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_1;
  assign IF_csr_regfile_read_csr_rg_trap_instr_15_BITS__ETC___d868 = (csr_regfile$read_csr[31:0] | rs1_val__h11920);
  assign IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d285 = ((IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d227 & alu_outputs___1_val2__h5367[1]) | ((((((near_mem$imem_instr[14:12] != 3'h0) & (near_mem$imem_instr[14:12] != 3'h1)) & (near_mem$imem_instr[14:12] != 3'h4)) & (near_mem$imem_instr[14:12] != 3'h5)) & (near_mem$imem_instr[14:12] != 3'h6)) & (near_mem$imem_instr[14:12] != 3'h7)));
  assign IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d910 = (((IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d343 | IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352) | near_mem$imem_exc) | (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d274 & IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d308));
  assign NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d730 = (NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17 & ((stage2_rg_stage2[102:101] == 2'h0) | (near_mem$dmem_valid & (~|near_mem$dmem_exc))));
  assign NOT_IF_stage2_rg_full_3_THEN_IF_stage2_rg_stag_ETC___d109 = ((IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h3) & ((stage2_rg_stage2[102:101] == 2'h0) | (near_mem$dmem_valid & (~|near_mem$dmem_exc))));
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d716 = (((~|csr_regfile$interrupt_pending[4]) & (~|csr_regfile$nmi_pending)) | (((~|stage1_rg_full) | NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d713) & ((~|stage1_rg_full) | NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d702)));
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d734 = ((((~|csr_regfile$interrupt_pending[4]) & (~|csr_regfile$nmi_pending)) | near_mem$imem_exc) | (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d274 & IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d308));
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d737 = (((NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d734 & ((IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h2) | (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h0))) & stage1_rg_full) & near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355);
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d756 = (((NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d734 & ((IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h2) | (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h0))) & near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355) | (~|stage1_rg_full));
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d769 = (((((~|csr_regfile$interrupt_pending[4]) & (~|csr_regfile$nmi_pending)) | _0_OR_0_OR_near_mem_imem_exc__78_OR_IF_near_mem_ETC___d767) & stage1_rg_full) & near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355);
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d773 = ((((~|csr_regfile$interrupt_pending[4]) & (~|csr_regfile$nmi_pending)) | _0_OR_0_OR_near_mem_imem_exc__78_OR_IF_near_mem_ETC___d767) & ((IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h2) | (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h0)));
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d776 = (NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d716 & ((NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d773 & near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355) | (~|stage1_rg_full)));
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d790 = (((~|csr_regfile$interrupt_pending[4]) & (~|csr_regfile$nmi_pending)) | ((~|near_mem$imem_exc) & (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d343 | IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352)));
  assign NOT_near_mem_imem_exc__78_13_AND_IF_near_mem_i_ETC___d481 = (((((((((((((~|near_mem$imem_exc) & (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d343 | IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 != 4'h0)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 != 4'h1)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 != 4'h2)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 != 4'h3)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 != 4'h4)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 != 4'h5)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 != 4'h6)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 != 4'h7)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 != 4'h8)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 != 4'h9)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 != 4'ha));
  assign NOT_near_mem_imem_instr__59_BITS_14_TO_12_81_E_ETC___d252 = ((((((((near_mem$imem_instr[14:12] != 3'h0) | ((near_mem$imem_instr[6:0] == 7'h33) & near_mem$imem_instr[30])) & (((near_mem$imem_instr[14:12] != 3'h0) | (near_mem$imem_instr[6:0] != 7'h33)) | (~|near_mem$imem_instr[30]))) & (near_mem$imem_instr[14:12] != 3'h2)) & (near_mem$imem_instr[14:12] != 3'h3)) & (near_mem$imem_instr[14:12] != 3'h4)) & (near_mem$imem_instr[14:12] != 3'h6)) & (near_mem$imem_instr[14:12] != 3'h7));
  assign NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166 = ((~|near_mem$imem_valid) | ((IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d142 == 2'h1) & (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d161 | IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d163)));
  assign NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d702 = (NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166 | ((~|near_mem$imem_exc) & (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d343 | IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352)));
  assign NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d713 = ((NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166 | near_mem$imem_exc) | (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d274 & IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d308));
  assign _0_OR_0_OR_near_mem_imem_exc__78_OR_IF_near_mem_ETC___d767 = (near_mem$imem_exc | (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d274 & IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d308));
  assign _theResult_____1_fst__h6597 = (rs1_val_bypassed__h3337 & _theResult___snd__h7382);
  assign csr_regfile_interrupt_pending_rg_cur_priv_9_07_ETC___d779 = (((csr_regfile$interrupt_pending[4] | csr_regfile$nmi_pending) & (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d343 | IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352)) | ((IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h2) & (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)));
  assign data_to_stage2_addr__h5215 = x_out_data_to_stage2_addr__h5223;
  assign gpr_regfile_RDY_server_reset_request_put__59_A_ETC___d671 = ((((((gpr_regfile$RDY_server_reset_request_put & near_mem$RDY_server_reset_request_put) & csr_regfile$RDY_server_reset_request_put) & f_reset_reqs$EMPTY_N) & stage1_f_reset_reqs$FULL_N) & stage2_f_reset_reqs$FULL_N) & stage3_f_reset_reqs$FULL_N);
  assign gpr_regfile_RDY_server_reset_response_get__76__ETC___d688 = ((((((gpr_regfile$RDY_server_reset_response_get & near_mem$RDY_server_reset_response_get) & csr_regfile$RDY_server_reset_response_get) & stage1_f_reset_rsps$EMPTY_N) & stage2_f_reset_rsps$EMPTY_N) & stage3_f_reset_rsps$EMPTY_N) & f_reset_rsps$FULL_N);
  assign near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d578 = ((near_mem$imem_exc | (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d274 & IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d308)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h0));
  assign near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d581 = ((near_mem$imem_exc | (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d274 & IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d308)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h1));
  assign near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d584 = ((near_mem$imem_exc | (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d274 & IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d308)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h2));
  assign near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d587 = ((near_mem$imem_exc | (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d274 & IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d308)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h3));
  assign near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d590 = ((near_mem$imem_exc | (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d274 & IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d308)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h4));
  assign near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d593 = ((near_mem$imem_exc | (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d274 & IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d308)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h5));
  assign near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d596 = ((near_mem$imem_exc | (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d274 & IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d308)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h6));
  assign near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d599 = ((near_mem$imem_exc | (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d274 & IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d308)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h7));
  assign near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d602 = ((near_mem$imem_exc | (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d274 & IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d308)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h8));
  assign near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d605 = ((near_mem$imem_exc | (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d274 & IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d308)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h9));
  assign near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d608 = ((near_mem$imem_exc | (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d274 & IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d308)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'ha));
  assign near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d611 = ((((((((((((near_mem$imem_exc | (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d274 & IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d308)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 != 4'h0)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 != 4'h1)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 != 4'h2)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 != 4'h3)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 != 4'h4)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 != 4'h5)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 != 4'h6)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 != 4'h7)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 != 4'h8)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 != 4'h9)) & (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 != 4'ha));
  assign near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_0b_ETC___d328 = ((((((((near_mem$imem_instr[14:12] == 3'h0) & ((near_mem$imem_instr[6:0] != 7'h33) | (~|near_mem$imem_instr[30]))) | (((near_mem$imem_instr[14:12] == 3'h0) & (near_mem$imem_instr[6:0] == 7'h33)) & near_mem$imem_instr[30])) | (near_mem$imem_instr[14:12] == 3'h2)) | (near_mem$imem_instr[14:12] == 3'h3)) | (near_mem$imem_instr[14:12] == 3'h4)) | (near_mem$imem_instr[14:12] == 3'h6)) | (near_mem$imem_instr[14:12] == 3'h7));
  assign near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_0b_ETC___d616 = ((((((((near_mem$imem_instr[14:12] == 3'h0) | (near_mem$imem_instr[14:12] == 3'h1)) | (near_mem$imem_instr[14:12] == 3'h4)) | (near_mem$imem_instr[14:12] == 3'h5)) | (near_mem$imem_instr[14:12] == 3'h6)) | (near_mem$imem_instr[14:12] == 3'h7)) & IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d227) & alu_outputs___1_val2__h5367[1]);
  assign near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177 = (near_mem$imem_valid & ((IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d142 != 2'h1) | ((~|IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d161) & (~|IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d163))));
  assign near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311 = (near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177 & (near_mem$imem_exc | (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d274 & IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d308)));
  assign near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355 = ((near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177 & (~|near_mem$imem_exc)) & (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d343 | IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352));
  assign rd_val___1__h6579 = (rs1_val_bypassed__h3337 ^ _theResult___snd__h7382);
  assign rd_val___1__h6586 = (rs1_val_bypassed__h3337 | _theResult___snd__h7382);
  assign rd_val__h7352 = ((rs1_val_bypassed__h3337 >> shamt__h5467) | ((~ (32'hffffffff >> shamt__h5467)) & {32{rs1_val_bypassed__h3337[31]}}));
  assign rg_cur_priv_9_EQ_0b11_75_OR_rg_cur_priv_9_EQ_0_ETC___d392 = ((((rg_cur_priv == 2'h3) | ((rg_cur_priv == 2'h1) & (~|csr_regfile$read_mstatus[21]))) | ((rg_cur_priv == 2'h0) & csr_regfile$read_misa[13])) & (near_mem$imem_instr[31:20] == 12'h105));
  assign rg_state_8_EQ_3_97_AND_NOT_csr_regfile_interru_ETC___d793 = ((((rg_state == 4'h3) & NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d790) & (~|stage3_rg_full)) & (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h0));
  assign y__h12191 = (~ rs1_val__h11920);
  assign RTL__DOT__s3_deq$D_IN = s3_deq$D_IN;
  assign RTL__DOT__near_mem$dmem_exc = near_mem$dmem_exc;
  assign RTL__DOT__near_mem$imem_pc = near_mem$imem_pc;
  assign RTL__DOT__near_mem$imem_instr = near_mem$imem_instr;
  assign RTL__DOT__near_mem$dmem_req_addr = near_mem$dmem_req_addr;
  assign RTL__DOT__stage2_rg_stage2 = stage2_rg_stage2;
  assign RTL__DOT__rg_cur_priv = rg_cur_priv;
  assign RTL__DOT__near_mem$EN_dmem_req = near_mem$EN_dmem_req;
  assign RTL__DOT__near_mem$dmem_req_f3 = near_mem$dmem_req_f3;
  assign RTL__DOT__s1_to_s2$D_IN = s1_to_s2$D_IN;
  assign RTL__DOT__near_mem$dmem_word64 = near_mem$dmem_word64;
  assign RTL__DOT__stage3_rg_full = stage3_rg_full;
  assign RTL__DOT__rg_trap_instr = rg_trap_instr;
  assign RTL__DOT__near_mem$dmem_req_op = near_mem$dmem_req_op;
  assign RTL__DOT__s2_to_s3$D_IN = s2_to_s3$D_IN;
  assign RTL__DOT__rg_retiring$EN = rg_retiring$EN;
  assign RTL__DOT__rg_state = rg_state;
  assign RTL__DOT__s3_deq$EN = s3_deq$EN;
  assign RTL__DOT__s1_to_s2$EN = s1_to_s2$EN;
  assign RTL__DOT__s2_to_s3$EN = s2_to_s3$EN;
  assign RTL__DOT__rg_run_on_reset = rg_run_on_reset;
  assign RTL__DOT__stage1_rg_full = stage1_rg_full;
  assign RTL__DOT__stage2_rg_full = stage2_rg_full;
  assign RTL__DOT__near_mem$dmem_req_store_value = near_mem$dmem_req_store_value;

  always @(IF_csr_regfile_read_csr_rg_trap_instr_15_BITS__ETC___d868 or y__h12191 or csr_regfile$read_csr or rg_trap_instr) case (rg_trap_instr[14:12])
    3'h2: MUX_csr_regfile$mav_csr_write_2__VAL_2 = IF_csr_regfile_read_csr_rg_trap_instr_15_BITS__ETC___d868;
    3'h6: MUX_csr_regfile$mav_csr_write_2__VAL_2 = IF_csr_regfile_read_csr_rg_trap_instr_15_BITS__ETC___d868;
    default: MUX_csr_regfile$mav_csr_write_2__VAL_2 = (csr_regfile$read_csr[31:0] & y__h12191);
  endcase

  always @(WILL_FIRE_RL_rl_reset_start or csr_regfile$csr_ret_actions or WILL_FIRE_RL_rl_stage1_xRET or csr_regfile$csr_trap_actions or WILL_FIRE_RL_rl_trap) case (1'b1)
    WILL_FIRE_RL_rl_trap: rg_cur_priv$D_IN = csr_regfile$csr_trap_actions[1:0];
    WILL_FIRE_RL_rl_stage1_xRET: rg_cur_priv$D_IN = csr_regfile$csr_ret_actions[33:32];
    WILL_FIRE_RL_rl_reset_start: rg_cur_priv$D_IN = 2'h3;
    default: rg_cur_priv$D_IN = 2'h2;
  endcase

  always @(csr_regfile$csr_ret_actions or WILL_FIRE_RL_rl_stage1_xRET or csr_regfile$csr_trap_actions or WILL_FIRE_RL_rl_trap or x_out_next_pc__h5189 or MUX_rg_next_pc$write_1__SEL_1) case (1'b1)
    MUX_rg_next_pc$write_1__SEL_1: rg_next_pc$D_IN = x_out_next_pc__h5189;
    WILL_FIRE_RL_rl_trap: rg_next_pc$D_IN = csr_regfile$csr_trap_actions[97:66];
    WILL_FIRE_RL_rl_stage1_xRET: rg_next_pc$D_IN = csr_regfile$csr_ret_actions[65:34];
    default: rg_next_pc$D_IN = 32'haaaaaaaa;
  endcase

  always @(WILL_FIRE_RL_rl_stage1_WFI or WILL_FIRE_RL_rl_stage1_SFENCE_VMA or WILL_FIRE_RL_rl_stage1_FENCE or WILL_FIRE_RL_rl_stage1_FENCE_I or WILL_FIRE_RL_rl_stage1_CSRR_S_or_C or WILL_FIRE_RL_rl_stage1_CSRR_W or MUX_rg_state$write_1__SEL_8 or MUX_rg_state$write_1__SEL_7 or MUX_rg_state$write_1__SEL_6 or WILL_FIRE_RL_rl_reset_start or WILL_FIRE_RL_rl_reset_from_WFI or MUX_rg_state$write_1__VAL_3 or WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 or MUX_rg_state$write_1__VAL_2 or WILL_FIRE_RL_rl_stage1_CSRR_W_2 or MUX_rg_state$write_1__VAL_1 or WILL_FIRE_RL_rl_reset_complete) case (1'b1)
    WILL_FIRE_RL_rl_reset_complete: rg_state$D_IN = MUX_rg_state$write_1__VAL_1;
    WILL_FIRE_RL_rl_stage1_CSRR_W_2: rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
    WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2: rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
    WILL_FIRE_RL_rl_reset_from_WFI: rg_state$D_IN = 4'h0;
    WILL_FIRE_RL_rl_reset_start: rg_state$D_IN = 4'h1;
    MUX_rg_state$write_1__SEL_6: rg_state$D_IN = 4'h3;
    MUX_rg_state$write_1__SEL_7: rg_state$D_IN = 4'h4;
    MUX_rg_state$write_1__SEL_8: rg_state$D_IN = 4'h5;
    WILL_FIRE_RL_rl_stage1_CSRR_W: rg_state$D_IN = 4'h6;
    WILL_FIRE_RL_rl_stage1_CSRR_S_or_C: rg_state$D_IN = 4'h7;
    WILL_FIRE_RL_rl_stage1_FENCE_I: rg_state$D_IN = 4'h9;
    WILL_FIRE_RL_rl_stage1_FENCE: rg_state$D_IN = 4'ha;
    WILL_FIRE_RL_rl_stage1_SFENCE_VMA: rg_state$D_IN = 4'hb;
    WILL_FIRE_RL_rl_stage1_WFI: rg_state$D_IN = 4'hc;
    default: rg_state$D_IN = 4'ha;
  endcase

  always @(MUX_rg_trap_info$write_1__VAL_4 or WILL_FIRE_RL_rl_stage1_interrupt or MUX_rg_trap_info$write_1__VAL_3 or WILL_FIRE_RL_rl_stage1_trap or MUX_rg_trap_info$write_1__VAL_2 or WILL_FIRE_RL_rl_stage2_nonpipe or MUX_rg_trap_info$write_1__VAL_1 or MUX_rg_trap_info$write_1__SEL_1) case (1'b1)
    MUX_rg_trap_info$write_1__SEL_1: rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_1;
    WILL_FIRE_RL_rl_stage2_nonpipe: rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_2;
    WILL_FIRE_RL_rl_stage1_trap: rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_3;
    WILL_FIRE_RL_rl_stage1_interrupt: rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_4;
    default: rg_trap_info$D_IN = 68'haaaaaaaaaaaaaaaaa;
  endcase

  always @(MUX_near_mem$imem_req_1__SEL_1 or MUX_stage1_rg_full$write_1__VAL_10 or WILL_FIRE_RL_rl_pipe or WILL_FIRE_RL_rl_trap or WILL_FIRE_RL_rl_stage1_restart_after_csrrx or WILL_FIRE_RL_rl_stage1_xRET or WILL_FIRE_RL_rl_finish_FENCE_I or WILL_FIRE_RL_rl_finish_FENCE or WILL_FIRE_RL_rl_finish_SFENCE_VMA or WILL_FIRE_RL_rl_WFI_resume or WILL_FIRE_RL_rl_trap_fetch or WILL_FIRE_RL_stage1_rl_reset) case (1'b1)
    WILL_FIRE_RL_stage1_rl_reset: stage1_rg_full$D_IN = 1'b0;
    ((((WILL_FIRE_RL_rl_trap_fetch || WILL_FIRE_RL_rl_WFI_resume) || WILL_FIRE_RL_rl_finish_SFENCE_VMA) || WILL_FIRE_RL_rl_finish_FENCE) || WILL_FIRE_RL_rl_finish_FENCE_I): stage1_rg_full$D_IN = 1'b1;
    WILL_FIRE_RL_rl_stage1_xRET: stage1_rg_full$D_IN = 1'b0;
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx: stage1_rg_full$D_IN = 1'b1;
    WILL_FIRE_RL_rl_trap: stage1_rg_full$D_IN = 1'b0;
    WILL_FIRE_RL_rl_pipe: stage1_rg_full$D_IN = MUX_stage1_rg_full$write_1__VAL_10;
    MUX_near_mem$imem_req_1__SEL_1: stage1_rg_full$D_IN = 1'b1;
    default: stage1_rg_full$D_IN = 1'b0;
  endcase

  always @(MUX_near_mem$imem_req_1__SEL_1 or MUX_stage2_rg_full$write_1__VAL_3 or WILL_FIRE_RL_rl_pipe or WILL_FIRE_RL_rl_trap or stage2_f_reset_reqs$EMPTY_N) case (1'b1)
    (stage2_f_reset_reqs$EMPTY_N || WILL_FIRE_RL_rl_trap): stage2_rg_full$D_IN = 1'b0;
    WILL_FIRE_RL_rl_pipe: stage2_rg_full$D_IN = MUX_stage2_rg_full$write_1__VAL_3;
    MUX_near_mem$imem_req_1__SEL_1: stage2_rg_full$D_IN = 1'b0;
    default: stage2_rg_full$D_IN = 1'b0;
  endcase

  always @(MUX_near_mem$imem_req_1__SEL_1 or IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 or WILL_FIRE_RL_rl_pipe or WILL_FIRE_RL_stage3_rl_reset) case (1'b1)
    WILL_FIRE_RL_stage3_rl_reset: stage3_rg_full$D_IN = 1'b0;
    WILL_FIRE_RL_rl_pipe: stage3_rg_full$D_IN = (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h2);
    MUX_near_mem$imem_req_1__SEL_1: stage3_rg_full$D_IN = 1'b0;
    default: stage3_rg_full$D_IN = 1'b0;
  endcase

  always @(IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415) case (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415)
    4'h7: csr_regfile$csr_ret_actions_from_priv = 2'h3;
    4'h8: csr_regfile$csr_ret_actions_from_priv = 2'h1;
    default: csr_regfile$csr_ret_actions_from_priv = 2'h0;
  endcase

  always @(WILL_FIRE_RL_rl_stage1_restart_after_csrrx or x_out_next_pc__h5189 or MUX_near_mem$imem_req_1__SEL_2 or rg_next_pc or MUX_near_mem$imem_req_1__SEL_5 or WILL_FIRE_RL_rl_trap_fetch or soc_map$m_pc_reset_value or MUX_near_mem$imem_req_1__SEL_1) case (1'b1)
    MUX_near_mem$imem_req_1__SEL_1: near_mem$imem_req_addr = soc_map$m_pc_reset_value[31:0];
    (WILL_FIRE_RL_rl_trap_fetch || MUX_near_mem$imem_req_1__SEL_5): near_mem$imem_req_addr = rg_next_pc;
    MUX_near_mem$imem_req_1__SEL_2: near_mem$imem_req_addr = x_out_next_pc__h5189;
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx: near_mem$imem_req_addr = x_out_next_pc__h5189;
    default: near_mem$imem_req_addr = 32'haaaaaaaa;
  endcase

  always @(stage2_rg_stage2) case (stage2_rg_stage2[102:101])
    2'h0: x_out_data_to_stage3_rd__h4667 = stage2_rg_stage2[100:96];
    2'h1: x_out_data_to_stage3_rd__h4667 = stage2_rg_stage2[100:96];
    default: x_out_data_to_stage3_rd__h4667 = 5'h00;
  endcase

  always @(near_mem$dmem_word64 or stage2_rg_stage2) case (stage2_rg_stage2[102:101])
    2'h0: x_out_data_to_stage3_rd_val__h4668 = stage2_rg_stage2[63:32];
    2'h1: x_out_data_to_stage3_rd_val__h4668 = near_mem$dmem_word64[31:0];
    default: x_out_data_to_stage3_rd_val__h4668 = stage2_rg_stage2[63:32];
  endcase

  always @(rg_csr_val1 or rg_trap_instr) case (rg_trap_instr[14:12])
    3'h2: rs1_val__h11920 = rg_csr_val1;
    3'h3: rs1_val__h11920 = rg_csr_val1;
    default: rs1_val__h11920 = {27'h0000000, rg_trap_instr[19:15]};
  endcase

  always @(rg_cur_priv) case (rg_cur_priv)
    2'h0: CASE_rg_cur_priv_0b0_8_0b1_9_11__q3 = 4'h8;
    2'h1: CASE_rg_cur_priv_0b0_8_0b1_9_11__q3 = 4'h9;
    default: CASE_rg_cur_priv_0b0_8_0b1_9_11__q3 = 4'hb;
  endcase

  always @(CASE_rg_cur_priv_0b0_8_0b1_9_11__q3 or near_mem$imem_instr) case (near_mem$imem_instr[31:20])
    12'h000: CASE_near_memimem_instr_BITS_31_TO_20_0b0_CAS_ETC__q4 = CASE_rg_cur_priv_0b0_8_0b1_9_11__q3;
    12'h001: CASE_near_memimem_instr_BITS_31_TO_20_0b0_CAS_ETC__q4 = 4'h3;
    default: CASE_near_memimem_instr_BITS_31_TO_20_0b0_CAS_ETC__q4 = 4'h2;
  endcase

  always @(IF_stage2_rg_stage2_4_BITS_100_TO_96_13_EQ_0_3_ETC___d137 or near_mem$dmem_exc or near_mem$dmem_valid or stage2_rg_stage2) case (stage2_rg_stage2[102:101])
    2'h0: CASE_stage2_rg_stage2_BITS_102_TO_101_0_2_1_IF_ETC__q5 = 2'h2;
    2'h1: CASE_stage2_rg_stage2_BITS_102_TO_101_0_2_1_IF_ETC__q5 = (((!near_mem$dmem_valid) || (!near_mem$dmem_exc)) ? IF_stage2_rg_stage2_4_BITS_100_TO_96_13_EQ_0_3_ETC___d137 : 2'h0);
    default: CASE_stage2_rg_stage2_BITS_102_TO_101_0_2_1_IF_ETC__q5 = 2'h0;
  endcase

  always @(IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d218 or IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d216 or IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d220 or near_mem$imem_instr) case (near_mem$imem_instr[14:12])
    3'h0: IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d227 = IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d216;
    3'h1: IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d227 = (!IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d216);
    3'h4: IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d227 = IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d218;
    3'h5: IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d227 = (!IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d218);
    3'h6: IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d227 = IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d220;
    default: IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d227 = ((near_mem$imem_instr[14:12] == 3'h7) && (!IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d220));
  endcase

  always @(alu_outputs___1_addr__h5385 or alu_outputs___1_addr__h5410 or alu_outputs___1_addr__h5365 or eaddr__h5553 or alu_outputs___1_addr__h5583 or near_mem$imem_instr) case (near_mem$imem_instr[6:0])
    7'h03: x_out_data_to_stage2_addr__h5223 = eaddr__h5553;
    7'h63: x_out_data_to_stage2_addr__h5223 = alu_outputs___1_addr__h5365;
    7'h67: x_out_data_to_stage2_addr__h5223 = alu_outputs___1_addr__h5410;
    7'h6f: x_out_data_to_stage2_addr__h5223 = alu_outputs___1_addr__h5385;
    default: x_out_data_to_stage2_addr__h5223 = alu_outputs___1_addr__h5583;
  endcase

  always @(rd_val___1__h6586 or rd_val___1__h6579 or rd_val___1__h6572 or rd_val___1__h6565 or _theResult_____1_fst__h6597 or near_mem$imem_instr) case (near_mem$imem_instr[14:12])
    3'h2: _theResult_____1_fst__h6569 = rd_val___1__h6565;
    3'h3: _theResult_____1_fst__h6569 = rd_val___1__h6572;
    3'h4: _theResult_____1_fst__h6569 = rd_val___1__h6579;
    3'h6: _theResult_____1_fst__h6569 = rd_val___1__h6586;
    default: _theResult_____1_fst__h6569 = _theResult_____1_fst__h6597;
  endcase

  always @(IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d218 or IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d216 or IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d220 or near_mem$imem_instr) case (near_mem$imem_instr[14:12])
    3'h0: IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d291 = (!IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d216);
    3'h1: IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d291 = IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d216;
    3'h4: IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d291 = (!IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d218);
    3'h5: IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d291 = IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d218;
    3'h6: IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d291 = (!IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d220);
    default: IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d291 = ((near_mem$imem_instr[14:12] != 3'h7) || IF_near_mem_imem_instr__59_BITS_19_TO_15_60_EQ_ETC___d220);
  endcase

  always @(NOT_near_mem_imem_instr__59_BITS_14_TO_12_81_E_ETC___d252 or near_mem$imem_instr) case (near_mem$imem_instr[6:0])
    7'h13: CASE_near_memimem_instr_BITS_6_TO_0_0b10011_N_ETC__q8 = NOT_near_mem_imem_instr__59_BITS_14_TO_12_81_E_ETC___d252;
    7'h33: CASE_near_memimem_instr_BITS_6_TO_0_0b10011_N_ETC__q8 = NOT_near_mem_imem_instr__59_BITS_14_TO_12_81_E_ETC___d252;
    default: CASE_near_memimem_instr_BITS_6_TO_0_0b10011_N_ETC__q8 = (((near_mem$imem_instr[6:0] != 7'h37) && (near_mem$imem_instr[6:0] != 7'h17)) && ((near_mem$imem_instr[6:0] == 7'h03) ? (((((near_mem$imem_instr[14:12] != 3'h0) && (near_mem$imem_instr[14:12] != 3'h4)) && (near_mem$imem_instr[14:12] != 3'h1)) && (near_mem$imem_instr[14:12] != 3'h5)) && (near_mem$imem_instr[14:12] != 3'h2)) : ((near_mem$imem_instr[6:0] != 7'h23) || (((near_mem$imem_instr[14:12] != 3'h0) && (near_mem$imem_instr[14:12] != 3'h1)) && (near_mem$imem_instr[14:12] != 3'h2)))));
  endcase

  always @(alu_outputs___1_addr__h5385 or IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d291 or IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d285 or eaddr__h5553 or near_mem$imem_instr) case (near_mem$imem_instr[6:0])
    7'h63: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d308 = (IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d285 || IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d291);
    7'h6f: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d308 = alu_outputs___1_addr__h5385[1];
    default: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d308 = ((near_mem$imem_instr[6:0] != 7'h67) || eaddr__h5553[1]);
  endcase

  always @(near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_0b_ETC___d328 or near_mem$imem_instr) case (near_mem$imem_instr[6:0])
    7'h13: CASE_near_memimem_instr_BITS_6_TO_0_0b10011_n_ETC__q9 = near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_0b_ETC___d328;
    7'h33: CASE_near_memimem_instr_BITS_6_TO_0_0b10011_n_ETC__q9 = near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_0b_ETC___d328;
    default: CASE_near_memimem_instr_BITS_6_TO_0_0b10011_n_ETC__q9 = (((near_mem$imem_instr[6:0] == 7'h37) || (near_mem$imem_instr[6:0] == 7'h17)) || ((near_mem$imem_instr[6:0] == 7'h03) ? (((((near_mem$imem_instr[14:12] == 3'h0) || (near_mem$imem_instr[14:12] == 3'h4)) || (near_mem$imem_instr[14:12] == 3'h1)) || (near_mem$imem_instr[14:12] == 3'h5)) || (near_mem$imem_instr[14:12] == 3'h2)) : ((near_mem$imem_instr[6:0] == 7'h23) && (((near_mem$imem_instr[14:12] == 3'h0) || (near_mem$imem_instr[14:12] == 3'h1)) || (near_mem$imem_instr[14:12] == 3'h2)))));
  endcase

  always @(alu_outputs___1_addr__h5385 or IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d227 or alu_outputs___1_val2__h5367 or IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d291 or eaddr__h5553 or near_mem$imem_instr) case (near_mem$imem_instr[6:0])
    7'h63: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352 = (((IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d291 || (!alu_outputs___1_val2__h5367[1])) && ((((((near_mem$imem_instr[14:12] == 3'h0) || (near_mem$imem_instr[14:12] == 3'h1)) || (near_mem$imem_instr[14:12] == 3'h4)) || (near_mem$imem_instr[14:12] == 3'h5)) || (near_mem$imem_instr[14:12] == 3'h6)) || (near_mem$imem_instr[14:12] == 3'h7))) && IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d227);
    7'h6f: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352 = (!alu_outputs___1_addr__h5385[1]);
    default: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352 = ((near_mem$imem_instr[6:0] == 7'h67) && (!eaddr__h5553[1]));
  endcase

  always @(IF_rg_cur_priv_9_EQ_0b11_75_OR_rg_cur_priv_9_E_ETC___d394 or rg_cur_priv or near_mem$imem_instr) case (near_mem$imem_instr[31:20])
    12'h000: IF_near_mem_imem_instr__59_BITS_31_TO_20_02_EQ_ETC___d396 = 4'hb;
    12'h001: IF_near_mem_imem_instr__59_BITS_31_TO_20_02_EQ_ETC___d396 = 4'hb;
    default: IF_near_mem_imem_instr__59_BITS_31_TO_20_02_EQ_ETC___d396 = (((rg_cur_priv == 2'h3) && (near_mem$imem_instr[31:20] == 12'h302)) ? 4'h7 : IF_rg_cur_priv_9_EQ_0b11_75_OR_rg_cur_priv_9_E_ETC___d394);
  endcase

  always @(near_mem$imem_instr) case (near_mem$imem_instr[14:12])
    3'h0: CASE_near_memimem_instr_BITS_14_TO_12_0b0_0_0_ETC__q10 = 4'h0;
    3'h1: CASE_near_memimem_instr_BITS_14_TO_12_0b0_0_0_ETC__q10 = 4'h0;
    3'h2: CASE_near_memimem_instr_BITS_14_TO_12_0b0_0_0_ETC__q10 = 4'h0;
    3'h4: CASE_near_memimem_instr_BITS_14_TO_12_0b0_0_0_ETC__q10 = 4'h0;
    3'h5: CASE_near_memimem_instr_BITS_14_TO_12_0b0_0_0_ETC__q10 = 4'h0;
    default: CASE_near_memimem_instr_BITS_14_TO_12_0b0_0_0_ETC__q10 = 4'hb;
  endcase

  always @(near_mem$imem_instr) case (near_mem$imem_instr[14:12])
    3'h0: CASE_near_memimem_instr_BITS_14_TO_12_0b0_4_0_ETC__q11 = 4'h4;
    3'h1: CASE_near_memimem_instr_BITS_14_TO_12_0b0_4_0_ETC__q11 = 4'h5;
    default: CASE_near_memimem_instr_BITS_14_TO_12_0b0_4_0_ETC__q11 = 4'hb;
  endcase

  always @(near_mem$imem_instr) case (near_mem$imem_instr[14:12])
    3'h0: CASE_near_memimem_instr_BITS_14_TO_12_0b0_0_0_ETC__q12 = 4'h0;
    3'h1: CASE_near_memimem_instr_BITS_14_TO_12_0b0_0_0_ETC__q12 = 4'h0;
    3'h2: CASE_near_memimem_instr_BITS_14_TO_12_0b0_0_0_ETC__q12 = 4'h0;
    default: CASE_near_memimem_instr_BITS_14_TO_12_0b0_0_0_ETC__q12 = 4'hb;
  endcase

  always @(IF_near_mem_imem_instr__59_BITS_31_TO_20_02_EQ_ETC___d396 or near_mem$imem_instr) case (near_mem$imem_instr[14:12])
    3'h0: CASE_near_memimem_instr_BITS_14_TO_12_0b0_IF__ETC__q13 = (((near_mem$imem_instr[11:7] == 5'h00) && (near_mem$imem_instr[19:15] == 5'h00)) ? IF_near_mem_imem_instr__59_BITS_31_TO_20_02_EQ_ETC___d396 : 4'hb);
    3'h1: CASE_near_memimem_instr_BITS_14_TO_12_0b0_IF__ETC__q13 = 4'h2;
    3'h5: CASE_near_memimem_instr_BITS_14_TO_12_0b0_IF__ETC__q13 = 4'h2;
    3'h2: CASE_near_memimem_instr_BITS_14_TO_12_0b0_IF__ETC__q13 = 4'h3;
    3'h3: CASE_near_memimem_instr_BITS_14_TO_12_0b0_IF__ETC__q13 = 4'h3;
    3'h6: CASE_near_memimem_instr_BITS_14_TO_12_0b0_IF__ETC__q13 = 4'h3;
    3'h7: CASE_near_memimem_instr_BITS_14_TO_12_0b0_IF__ETC__q13 = 4'h3;
    3'h4: CASE_near_memimem_instr_BITS_14_TO_12_0b0_IF__ETC__q13 = 4'hb;
  endcase

  always @(CASE_near_memimem_instr_BITS_14_TO_12_0b0_IF__ETC__q13 or CASE_near_memimem_instr_BITS_14_TO_12_0b0_0_0_ETC__q12 or IF_NOT_near_mem_imem_instr__59_BITS_14_TO_12_8_ETC___d362 or CASE_near_memimem_instr_BITS_14_TO_12_0b0_4_0_ETC__q11 or CASE_near_memimem_instr_BITS_14_TO_12_0b0_0_0_ETC__q10 or near_mem$imem_instr) case (near_mem$imem_instr[6:0])
    7'h03: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d409 = CASE_near_memimem_instr_BITS_14_TO_12_0b0_0_0_ETC__q10;
    7'h0f: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d409 = CASE_near_memimem_instr_BITS_14_TO_12_0b0_4_0_ETC__q11;
    7'h13: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d409 = IF_NOT_near_mem_imem_instr__59_BITS_14_TO_12_8_ETC___d362;
    7'h33: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d409 = IF_NOT_near_mem_imem_instr__59_BITS_14_TO_12_8_ETC___d362;
    7'h17: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d409 = 4'h0;
    7'h37: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d409 = 4'h0;
    7'h23: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d409 = CASE_near_memimem_instr_BITS_14_TO_12_0b0_0_0_ETC__q12;
    7'h73: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d409 = CASE_near_memimem_instr_BITS_14_TO_12_0b0_IF__ETC__q13;
    default: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d409 = 4'hb;
  endcase

  always @(alu_outputs___1_addr__h5385 or eaddr__h5553 or IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d227 or IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d285 or IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d409 or near_mem$imem_instr) case (near_mem$imem_instr[6:0])
    7'h63: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d413 = (IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d285 ? 4'hb : (IF_near_mem_imem_instr__59_BITS_14_TO_12_81_EQ_ETC___d227 ? 4'h1 : 4'h0));
    7'h67: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d413 = (eaddr__h5553[1] ? 4'hb : 4'h1);
    7'h6f: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d413 = (alu_outputs___1_addr__h5385[1] ? 4'hb : 4'h1);
    default: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d413 = ((((near_mem$imem_instr[6:0] == 7'h13) || (near_mem$imem_instr[6:0] == 7'h33)) && ((near_mem$imem_instr[14:12] == 3'h1) || (near_mem$imem_instr[14:12] == 3'h5))) ? (near_mem$imem_instr[25] ? 4'hb : 4'h0) : IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d409);
  endcase

  always @(near_mem$imem_instr) case (near_mem$imem_instr[6:0])
    7'h03: IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d491 = 2'h1;
    7'h13: IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d491 = 2'h0;
    7'h17: IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d491 = 2'h0;
    7'h33: IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d491 = 2'h0;
    7'h37: IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d491 = 2'h0;
    7'h63: IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d491 = 2'h0;
    7'h67: IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d491 = 2'h0;
    7'h6f: IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d491 = 2'h0;
    default: IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d491 = 2'h2;
  endcase

  always @(alu_outputs___1_exc_code__h5843 or alu_outputs___1_exc_code__h5362 or near_mem$imem_instr) case (near_mem$imem_instr[6:0])
    7'h03: alu_outputs_exc_code__h5862 = 4'h2;
    7'h0f: alu_outputs_exc_code__h5862 = 4'h2;
    7'h13: alu_outputs_exc_code__h5862 = 4'h2;
    7'h17: alu_outputs_exc_code__h5862 = 4'h2;
    7'h23: alu_outputs_exc_code__h5862 = 4'h2;
    7'h33: alu_outputs_exc_code__h5862 = 4'h2;
    7'h37: alu_outputs_exc_code__h5862 = 4'h2;
    7'h63: alu_outputs_exc_code__h5862 = alu_outputs___1_exc_code__h5362;
    7'h67: alu_outputs_exc_code__h5862 = 4'h0;
    7'h6f: alu_outputs_exc_code__h5862 = 4'h0;
    7'h73: alu_outputs_exc_code__h5862 = alu_outputs___1_exc_code__h5843;
    default: alu_outputs_exc_code__h5862 = 4'h2;
  endcase

  always @(rd_val__h5523 or rd_val__h5537 or alu_outputs___1_val1__h5516 or alu_outputs___1_val1__h5847 or near_mem$imem_instr) case (near_mem$imem_instr[6:0])
    7'h13: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d570 = alu_outputs___1_val1__h5516;
    7'h33: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d570 = alu_outputs___1_val1__h5516;
    7'h17: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d570 = rd_val__h5537;
    7'h37: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d570 = rd_val__h5523;
    default: IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d570 = alu_outputs___1_val1__h5847;
  endcase

  always @(alu_outputs___1_val1__h5386 or IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d571 or near_mem$imem_instr) case (near_mem$imem_instr[6:0])
    7'h67: x_out_data_to_stage2_val1__h5224 = alu_outputs___1_val1__h5386;
    7'h6f: x_out_data_to_stage2_val1__h5224 = alu_outputs___1_val1__h5386;
    default: x_out_data_to_stage2_val1__h5224 = IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d571;
  endcase

  always @(posedge CLK) begin
    if ((RST_N == 1'b0)) begin
      cfg_logdelay <= 64'h0000000000000000;
      cfg_verbosity <= 4'h0;
      rg_cur_priv <= 2'h3;
      rg_retiring <= 1'b0;
      rg_run_on_reset <= 1'b0;
      rg_state <= 4'h0;
      s1_to_s2 <= 1'b0;
      s2_to_s3 <= 1'b0;
      s3_deq <= 1'b0;
      stage1_rg_full <= 1'b0;
      stage2_rg_full <= 1'b0;
      stage2_rg_resetting <= 1'b0;
      stage3_rg_full <= 1'b0;
    end
    else begin
      if (cfg_logdelay$EN) cfg_logdelay <= cfg_logdelay$D_IN;
      if (cfg_verbosity$EN) cfg_verbosity <= cfg_verbosity$D_IN;
      if (rg_cur_priv$EN) rg_cur_priv <= rg_cur_priv$D_IN;
      if (rg_retiring$EN) rg_retiring <= rg_retiring$D_IN;
      if (rg_run_on_reset$EN) rg_run_on_reset <= rg_run_on_reset$D_IN;
      if (rg_state$EN) rg_state <= rg_state$D_IN;
      if (s1_to_s2$EN) s1_to_s2 <= s1_to_s2$D_IN;
      if (s2_to_s3$EN) s2_to_s3 <= s2_to_s3$D_IN;
      if (s3_deq$EN) s3_deq <= s3_deq$D_IN;
      if (stage1_rg_full$EN) stage1_rg_full <= stage1_rg_full$D_IN;
      if (stage2_rg_full$EN) stage2_rg_full <= stage2_rg_full$D_IN;
      if (stage2_rg_resetting$EN) stage2_rg_resetting <= stage2_rg_resetting$D_IN;
      if (stage3_rg_full$EN) stage3_rg_full <= stage3_rg_full$D_IN;
    end
    if (rg_csr_pc$EN) rg_csr_pc <= rg_csr_pc$D_IN;
    if (rg_csr_val1$EN) rg_csr_val1 <= rg_csr_val1$D_IN;
    if (rg_mstatus_MXR$EN) rg_mstatus_MXR <= rg_mstatus_MXR$D_IN;
    if (rg_next_pc$EN) rg_next_pc <= rg_next_pc$D_IN;
    if (rg_sstatus_SUM$EN) rg_sstatus_SUM <= rg_sstatus_SUM$D_IN;
    if (rg_start_CPI_cycles$EN) rg_start_CPI_cycles <= rg_start_CPI_cycles$D_IN;
    if (rg_start_CPI_instrs$EN) rg_start_CPI_instrs <= rg_start_CPI_instrs$D_IN;
    if (rg_trap_info$EN) rg_trap_info <= rg_trap_info$D_IN;
    if (rg_trap_instr$EN) rg_trap_instr <= rg_trap_instr$D_IN;
    if (rg_trap_interrupt$EN) rg_trap_interrupt <= rg_trap_interrupt$D_IN;
    if (stage2_rg_stage2$EN) stage2_rg_stage2 <= stage2_rg_stage2$D_IN;
    if (stage3_rg_stage3$EN) stage3_rg_stage3 <= stage3_rg_stage3$D_IN;
  end

  always @(negedge CLK) begin
    #0;
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $display("================================================================");
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $display("%0d: Pipeline State:  minstret:%0d  cur_priv:%0d  mstatus:%0x", csr_regfile$read_csr_mcycle, csr_regfile$read_csr_minstret, rg_cur_priv, csr_regfile$read_mstatus);
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write("    ");
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write("MStatus{", "sd:%0d", ((csr_regfile$read_mstatus[14:13] == 2'h3) || (csr_regfile$read_mstatus[16:15] == 2'h3)));
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (csr_regfile$read_misa[27:26] == 2'h2))) $write(" sxl:%0d uxl:%0d", 2'h0, 2'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (csr_regfile$read_misa[27:26] != 2'h2))) $write("");
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write(" tsr:%0d", csr_regfile$read_mstatus[22]);
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write(" tw:%0d", csr_regfile$read_mstatus[21]);
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write(" tvm:%0d", csr_regfile$read_mstatus[20]);
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write(" mxr:%0d", csr_regfile$read_mstatus[19]);
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write(" sum:%0d", csr_regfile$read_mstatus[18]);
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write(" mprv:%0d", csr_regfile$read_mstatus[17]);
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write(" xs:%0d", csr_regfile$read_mstatus[16:15]);
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write(" fs:%0d", csr_regfile$read_mstatus[14:13]);
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write(" mpp:%0d", csr_regfile$read_mstatus[12:11]);
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write(" spp:%0d", csr_regfile$read_mstatus[8]);
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write(" pies:%0d_%0d%0d", csr_regfile$read_mstatus[7], csr_regfile$read_mstatus[5], csr_regfile$read_mstatus[4]);
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write(" ies:%0d_%0d%0d", csr_regfile$read_mstatus[3], csr_regfile$read_mstatus[1], csr_regfile$read_mstatus[0]);
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write("    Stage3: ");
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write("Output_Stage3");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && stage3_rg_full)) $write(" PIPE");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage3_rg_full))) $write(" EMPTY");
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && ((!stage3_rg_full) || (!stage3_rg_stage3[37])))) $write("Rd -");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage3_rg_full) && stage3_rg_stage3[37])) $write("Rd %0d ", stage3_rg_stage3[36:32], "rd_val:%h", stage3_rg_stage3[31:0]);
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $display("    Stage2: pc 0x%08h instr 0x%08h priv %0d", stage2_rg_stage2[166:135], stage2_rg_stage2[134:103], stage2_rg_stage2[168:167]);
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h0))) $write("Output_Stage2", " EMPTY");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h1))) $write("Output_Stage2", " BUSY: pc:%0h", stage2_rg_stage2[166:135]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h3))) $write("Output_Stage2", " NONPIPE: ");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h1)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h3))) $write("Output_Stage2", " PIPE: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h0))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h1))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h3))) $write("");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h1)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h3))) $write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n", stage2_rg_stage2[166:135], stage2_rg_stage2[134:103], stage2_rg_stage2[168:167]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h0))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h1))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h3))) $write("");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h1)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h3))) $write("        rd_valid:");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h0))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h1))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h3))) $write("");
    if ((RST_N != 1'b0)) if ((((((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h1)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h3)) && (stage2_rg_stage2[102:101] != 2'h0)) && ((!near_mem$dmem_valid) || near_mem$dmem_exc))) $write("False");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h1)) && NOT_IF_stage2_rg_full_3_THEN_IF_stage2_rg_stag_ETC___d109)) $write("True");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h0))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h1))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h3))) $write("");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h1)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h3))) $write("  grd:%0d  rd_val:%h\n", x_out_data_to_stage3_rd__h4667, x_out_data_to_stage3_rd_val__h4668);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h0))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h1))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h3))) $write("Trap_Info { ", "epc: ");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h1)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h3))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h0))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h1))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h3))) $write("'h%h", stage2_rg_stage2[166:135]);
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h1)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h3))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h0))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h1))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h3))) $write(", ", "exc_code: ");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h1)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h3))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h0))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h1))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h3))) $write("'h%h", near_mem$dmem_exc_code);
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h1)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h3))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h0))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h1))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h3))) $write(", ", "tval: ");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h1)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h3))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h0))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h1))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h3))) $write("'h%h", stage2_rg_stage2[95:64], " }");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h1)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h3))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h0))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h1))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h3))) $write(" ");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h1)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h3))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h0))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h1))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h3))) $write("Trap_Info { ", "epc: ");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h1)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h3))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h0))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h1))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h3))) $write("'h%h", stage2_rg_stage2[166:135]);
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h1)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h3))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h0))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h1))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h3))) $write(", ", "exc_code: ");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h1)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h3))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h0))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h1))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h3))) $write("'h%h", near_mem$dmem_exc_code);
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h1)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h3))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h0))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h1))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h3))) $write(", ", "tval: ");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h1)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h3))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h0))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h1))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h3))) $write("'h%h", stage2_rg_stage2[95:64], " }");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h0)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h1)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 != 2'h3))) $write("");
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d142 == 2'h0))) $write("Rd -");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d142 != 2'h0))) $write("Rd %0d ", stage2_rg_stage2[100:96]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d142 == 2'h0))) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d142 == 2'h1))) $write("-");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d142 != 2'h0)) && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d142 != 2'h1))) $write("rd_val:%h", x_out_bypass_rd_val__h4969);
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $display("    Stage1: pc 0x%08h instr 0x%08h priv %0d", near_mem$imem_pc, near_mem$imem_instr, rg_cur_priv);
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("Output_Stage1", " BUSY pc:%h", near_mem$imem_pc);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311)) $write("Output_Stage1", " NONPIPE: pc:%h", near_mem$imem_pc);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355)) $write("Output_Stage1");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("Output_Stage1", " EMPTY");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355)) $write(" PIPE: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311)) $write("");
    if ((RST_N != 1'b0)) if ((((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && (!near_mem$imem_exc)) && (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d343 || IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352)) && (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h0))) $write("CONTROL_STRAIGHT");
    if ((RST_N != 1'b0)) if ((((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && (!near_mem$imem_exc)) && (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d343 || IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352)) && (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h1))) $write("CONTROL_BRANCH");
    if ((RST_N != 1'b0)) if ((((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && (!near_mem$imem_exc)) && (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d343 || IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352)) && (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h2))) $write("CONTROL_CSRR_W");
    if ((RST_N != 1'b0)) if ((((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && (!near_mem$imem_exc)) && (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d343 || IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352)) && (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h3))) $write("CONTROL_CSRR_S_or_C");
    if ((RST_N != 1'b0)) if ((((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && (!near_mem$imem_exc)) && (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d343 || IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352)) && (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h4))) $write("CONTROL_FENCE");
    if ((RST_N != 1'b0)) if ((((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && (!near_mem$imem_exc)) && (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d343 || IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352)) && (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h5))) $write("CONTROL_FENCE_I");
    if ((RST_N != 1'b0)) if ((((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && (!near_mem$imem_exc)) && (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d343 || IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352)) && (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h6))) $write("CONTROL_SFENCE_VMA");
    if ((RST_N != 1'b0)) if ((((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && (!near_mem$imem_exc)) && (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d343 || IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352)) && (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h7))) $write("CONTROL_MRET");
    if ((RST_N != 1'b0)) if ((((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && (!near_mem$imem_exc)) && (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d343 || IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352)) && (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h8))) $write("CONTROL_SRET");
    if ((RST_N != 1'b0)) if ((((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && (!near_mem$imem_exc)) && (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d343 || IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352)) && (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'h9))) $write("CONTROL_URET");
    if ((RST_N != 1'b0)) if ((((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && (!near_mem$imem_exc)) && (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d343 || IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352)) && (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d415 == 4'ha))) $write("CONTROL_WFI");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && NOT_near_mem_imem_exc__78_13_AND_IF_near_mem_i_ETC___d481)) $write("CONTROL_TRAP");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355)) $write(" ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311)) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311)) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311)) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311)) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355)) $write("}");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355)) $write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n", near_mem$imem_pc, near_mem$imem_instr, rg_cur_priv);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355)) $write("            op_stage2:");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311)) $write("");
    if ((RST_N != 1'b0)) if ((((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && (!near_mem$imem_exc)) && (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d343 || IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352)) && (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d491 == 2'h0))) $write("OP_Stage2_ALU");
    if ((RST_N != 1'b0)) if ((((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && (!near_mem$imem_exc)) && (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d343 || IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352)) && (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d491 == 2'h1))) $write("OP_Stage2_LD");
    if ((RST_N != 1'b0)) if (((((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && (!near_mem$imem_exc)) && (IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d343 || IF_near_mem_imem_instr__59_BITS_6_TO_0_79_EQ_0_ETC___d352)) && (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d491 != 2'h0)) && (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d491 != 2'h1))) $write("OP_Stage2_ST");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355)) $write("  rd:%0d\n", x_out_data_to_stage2_rd__h5222);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355)) $write("            addr:%h  val1:%h  val2:%h}", x_out_data_to_stage2_addr__h5223, x_out_data_to_stage2_val1__h5224, x_out_data_to_stage2_val2__h5225);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311)) $write(" ");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355)) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d578)) $write("CONTROL_STRAIGHT");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d581)) $write("CONTROL_BRANCH");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d584)) $write("CONTROL_CSRR_W");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d587)) $write("CONTROL_CSRR_S_or_C");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d590)) $write("CONTROL_FENCE");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d593)) $write("CONTROL_FENCE_I");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d596)) $write("CONTROL_SFENCE_VMA");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d599)) $write("CONTROL_MRET");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d602)) $write("CONTROL_SRET");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d605)) $write("CONTROL_URET");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d608)) $write("CONTROL_WFI");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d177) && near_mem_imem_exc__78_OR_IF_near_mem_imem_inst_ETC___d611)) $write("CONTROL_TRAP");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355)) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311)) $write(" ");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355)) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311)) $write("Trap_Info { ", "epc: ");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355)) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311)) $write("'h%h", near_mem$imem_pc);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355)) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311)) $write(", ", "exc_code: ");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355)) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311)) $write("'h%h", x_out_trap_info_exc_code__h6928);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355)) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311)) $write(", ", "tval: ");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355)) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d311)) $write("'h%h", value__h6967, " }");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && near_mem_imem_valid__57_AND_NOT_IF_stage2_rg_f_ETC___d355)) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_show_pipe && stage1_rg_full) && NOT_near_mem_imem_valid__57_58_OR_IF_stage2_rg_ETC___d166)) $write("");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_show_pipe && (!stage1_rg_full))) $write("");
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_show_pipe) $display("----------------");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset) && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("    CPU_Stage1.enq: 0x%08h", soc_map$m_pc_reset_value[31:0]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset)) $display("%0d: %m.rl_reset_complete: restart at PC = 0x%0h", csr_regfile$read_csr_mcycle, soc_map$m_pc_reset_value[31:0]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_reset_complete && (!rg_run_on_reset))) $display("%0d: %m.rl_reset_complete: entering DEBUG_MODE", csr_regfile$read_csr_mcycle);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_pipe && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("%0d: %m.rl_pipe", csr_regfile$read_csr_mcycle);
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_pipe && stage3_rg_full) && stage3_rg_stage3[37]) && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("    S3.fa_deq: write GRd 0x%0h, rd_val 0x%0h", stage3_rg_stage3[36:32], stage3_rg_stage3[31:0]);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h2)) && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $write("    S3.enq: ");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h2)) && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n", stage2_rg_stage2[166:135], stage2_rg_stage2[134:103], stage2_rg_stage2[168:167]);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h2)) && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $write("        rd_valid:");
    if ((RST_N != 1'b0)) if (((((WILL_FIRE_RL_rl_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h2)) && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17) && (stage2_rg_stage2[102:101] != 2'h0)) && ((!near_mem$dmem_valid) || near_mem$dmem_exc))) $write("False");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h2)) && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d730)) $write("True");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h2)) && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $write("  grd:%0d  rd_val:%h\n", x_out_data_to_stage3_rd__h4667, x_out_data_to_stage3_rd_val__h4668);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h2)) && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $write("\n");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_pipe && (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d86 == 2'h2)) && (cur_verbosity__h1827 == 4'h1))) $display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d", csr_regfile$read_csr_minstret, stage2_rg_stage2[166:135], stage2_rg_stage2[134:103], rg_cur_priv);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_pipe && NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d737) && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $write("    CPU_Stage2.enq (Data_Stage1_to_Stage2) ");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_pipe && NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d737) && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n", near_mem$imem_pc, near_mem$imem_instr, rg_cur_priv);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_pipe && NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d737) && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $write("            op_stage2:");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_pipe && NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d737) && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17) && (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d491 == 2'h0))) $write("OP_Stage2_ALU");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_pipe && NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d737) && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17) && (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d491 == 2'h1))) $write("OP_Stage2_LD");
    if ((RST_N != 1'b0)) if (((((WILL_FIRE_RL_rl_pipe && NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d737) && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17) && (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d491 != 2'h0)) && (IF_NOT_stage1_rg_full_55_56_OR_NOT_near_mem_im_ETC___d491 != 2'h1))) $write("OP_Stage2_ST");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_pipe && NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d737) && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $write("  rd:%0d\n", x_out_data_to_stage2_rd__h5222);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_pipe && NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d737) && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $write("            addr:%h  val1:%h  val2:%h}", x_out_data_to_stage2_addr__h5223, x_out_data_to_stage2_val1__h5224, x_out_data_to_stage2_val2__h5225);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_pipe && NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d737) && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $write("\n");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_pipe && NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d716) && NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d756) && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("    CPU_Stage1.enq: 0x%08h", x_out_next_pc__h5189);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage2_nonpipe && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("%0d: %m.rl_stage2_nonpipe", csr_regfile$read_csr_mcycle);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage1_trap && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("%0d: %m.rl_stage1_trap", csr_regfile$read_csr_mcycle);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_trap && rg_trap_info_04_BITS_67_TO_36_05_EQ_csr_regfil_ETC___d814)) $display("%0d: %m.rl_stage1_trap: Tight infinite trap loop: pc 0x%0x instr 0x%08x", csr_regfile$read_csr_mcycle, csr_regfile$csr_trap_actions[97:66], rg_trap_instr);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_trap && rg_trap_info_04_BITS_67_TO_36_05_EQ_csr_regfil_ETC___d814)) $display("CPI: %0d.%0d = (%0d/%0d) since last 'continue'", cpi__h10745, cpifrac__h10746, delta_CPI_cycles__h10741, _theResult____h10743);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_trap && rg_trap_info_04_BITS_67_TO_36_05_EQ_csr_regfil_ETC___d814)) $finish(32'h00000000);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_trap && (cur_verbosity__h1827 == 4'h1))) $display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d", csr_regfile$read_csr_minstret, rg_trap_info[67:36], rg_trap_instr, rg_cur_priv);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_trap && (cur_verbosity__h1827 != 4'h0))) $display("    mcause:0x%0h  epc 0x%0h  tval:0x%0h  next_pc 0x%0h, new_priv %0d new_mstatus 0x%0h", csr_regfile$csr_trap_actions[33:2], rg_trap_info[67:36], rg_trap_info[31:0], csr_regfile$csr_trap_actions[97:66], csr_regfile$csr_trap_actions[1:0], csr_regfile$csr_trap_actions[65:34]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage1_CSRR_W && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("%0d: %m.rl_stage1_CSRR_W", csr_regfile$read_csr_mcycle);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage1_CSRR_W_2 && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("%0d: %m.rl_stage1_CSRR_W_2", csr_regfile$read_csr_mcycle);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_stage1_CSRR_W_2 && csr_regfile$access_permitted_1) && (cur_verbosity__h1827 == 4'h1))) $display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d", csr_regfile$read_csr_minstret, rg_csr_pc, rg_trap_instr, rg_cur_priv);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_stage1_CSRR_W_2 && csr_regfile$access_permitted_1) && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("    S1: write CSRRW/CSRRWI Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d", rg_trap_instr[19:15], rs1_val__h11213, rg_trap_instr[31:20], csr_regfile$read_csr[31:0], rg_trap_instr[11:7]);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_stage1_CSRR_W_2 && (!csr_regfile$access_permitted_1)) && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("    rl_stage1_CSRR_W: Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d", rg_trap_instr[19:15], rs1_val__h11213, rg_trap_instr[31:20], rg_trap_instr[11:7]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage1_CSRR_S_or_C && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("%0d: %m.rl_stage1_CSRR_S_or_C", csr_regfile$read_csr_mcycle);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("%0d: %m.rl_stage1_CSRR_S_or_C_2", csr_regfile$read_csr_mcycle);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 && csr_regfile$access_permitted_2) && (cur_verbosity__h1827 == 4'h1))) $display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d", csr_regfile$read_csr_minstret, rg_csr_pc, rg_trap_instr, rg_cur_priv);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 && csr_regfile$access_permitted_2) && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("    S1: write CSRR_S_or_C: Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d", rg_trap_instr[19:15], rs1_val__h11920, rg_trap_instr[31:20], csr_regfile$read_csr[31:0], rg_trap_instr[11:7]);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 && (!csr_regfile$access_permitted_2)) && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("    rl_stage1_CSRR_S_or_C: Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d", rg_trap_instr[19:15], rs1_val__h11920, rg_trap_instr[31:20], rg_trap_instr[11:7]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage1_restart_after_csrrx && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("    CPU_Stage1.enq: 0x%08h", x_out_next_pc__h5189);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage1_restart_after_csrrx && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("%0d: rl_stage1_restart_after_csrrx: minstret:%0d  pc:%0x  cur_priv:%0d", csr_regfile$read_csr_mcycle, csr_regfile$read_csr_minstret, x_out_next_pc__h5189, rg_cur_priv);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage1_xRET && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("%0d: %m.rl_stage1_xRET", csr_regfile$read_csr_mcycle);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage1_xRET && (cur_verbosity__h1827 == 4'h1))) $display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d", csr_regfile$read_csr_minstret, near_mem$imem_pc, near_mem$imem_instr, rg_cur_priv);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage1_xRET && (cur_verbosity__h1827 != 4'h0))) $display("    xRET: next_pc:0x%0h  new mstatus:0x%0h  new priv:%0d", csr_regfile$csr_ret_actions[65:34], csr_regfile$csr_ret_actions[31:0], csr_regfile$csr_ret_actions[33:32]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage1_FENCE_I && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("%0d: %m.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage1_FENCE_I && (cur_verbosity__h1827 == 4'h1))) $display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d", csr_regfile$read_csr_minstret, near_mem$imem_pc, near_mem$imem_instr, rg_cur_priv);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage1_FENCE_I && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("%0d: %m.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_finish_FENCE_I && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("%0d: %m.rl_finish_FENCE_I", csr_regfile$read_csr_mcycle);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_finish_FENCE_I && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_finish_FENCE_I && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("    CPU.rl_finish_FENCE_I");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage1_FENCE && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("%0d: %m.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage1_FENCE && (cur_verbosity__h1827 == 4'h1))) $display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d", csr_regfile$read_csr_minstret, near_mem$imem_pc, near_mem$imem_instr, rg_cur_priv);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage1_FENCE && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("%0d: %m.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_finish_FENCE && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("%0d: %m.rl_finish_FENCE", csr_regfile$read_csr_mcycle);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_finish_FENCE && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_finish_FENCE && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("    CPU.rl_finish_FENCE");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage1_SFENCE_VMA && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("%0d: %m.rl_stage1_SFENCE_VMA", csr_regfile$read_csr_mcycle);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage1_SFENCE_VMA && (cur_verbosity__h1827 == 4'h1))) $display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d", csr_regfile$read_csr_minstret, near_mem$imem_pc, near_mem$imem_instr, rg_cur_priv);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage1_SFENCE_VMA && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("%0d: %m.rl_stage1_SFENCE_VMA", csr_regfile$read_csr_mcycle);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_finish_SFENCE_VMA && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("%0d: %m.rl_finish_SFENCE_VMA", csr_regfile$read_csr_mcycle);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_finish_SFENCE_VMA && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_finish_SFENCE_VMA && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("    CPU.rl_finish_SFENCE_VMA");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage1_WFI && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("%0d: %m.rl_stage1_WFI", csr_regfile$read_csr_mcycle);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage1_WFI && (cur_verbosity__h1827 == 4'h1))) $display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d", csr_regfile$read_csr_minstret, near_mem$imem_pc, near_mem$imem_instr, rg_cur_priv);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage1_WFI && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("    CPU.rl_stage1_WFI");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_WFI_resume && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("%0d: %m.rl_WFI_resume", csr_regfile$read_csr_mcycle);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_WFI_resume && (cur_verbosity__h1827 != 4'h0))) $display("    WFI resume");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_WFI_resume && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_reset_from_WFI && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("%0d: %m.rl_reset_from_WFI", csr_regfile$read_csr_mcycle);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_trap_fetch && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_stage1_interrupt && NOT_IF_csr_regfile_read_csr_minstret__1_ULT_cf_ETC___d17)) $display("%0d: %m.rl_stage1_interrupt", csr_regfile$read_csr_mcycle);
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_reset_start) $display("================================================================");
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_reset_start) $write("CPU: Bluespec  RISC-V  Piccolo  v3.0");
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_reset_start) $display(" (RV32)");
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_reset_start) $display("Copyright (c) 2016-2019 Bluespec, Inc. All Rights Reserved.");
    if ((RST_N != 1'b0)) if (WILL_FIRE_RL_rl_reset_start) $display("================================================================");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_reset_start && (cur_verbosity__h1827 != 4'h0))) $display("%0d: %m.rl_reset_start", csr_regfile$read_csr_mcycle);
  end

  mkCSR_RegFile csr_regfile(CLK, RST_N, csr_regfile$EN_server_reset_request_put, csr_regfile$RDY_server_reset_request_put, csr_regfile$EN_server_reset_response_get, csr_regfile$RDY_server_reset_response_get, csr_regfile$read_csr_csr_addr, csr_regfile$read_csr, csr_regfile$read_csr_port2_csr_addr, /* Empty */, csr_regfile$mav_read_csr_csr_addr, csr_regfile$EN_mav_read_csr, /* Empty */, csr_regfile$mav_csr_write_csr_addr, csr_regfile$mav_csr_write_word, csr_regfile$EN_mav_csr_write, /* Empty */, csr_regfile$read_misa, csr_regfile$read_mstatus, /* Empty */, csr_regfile$read_satp, csr_regfile$csr_trap_actions_from_priv, csr_regfile$csr_trap_actions_pc, csr_regfile$csr_trap_actions_nmi, csr_regfile$csr_trap_actions_interrupt, csr_regfile$csr_trap_actions_exc_code, csr_regfile$csr_trap_actions_xtval, csr_regfile$EN_csr_trap_actions, csr_regfile$csr_trap_actions, /* Empty */, csr_regfile$csr_ret_actions_from_priv, csr_regfile$EN_csr_ret_actions, csr_regfile$csr_ret_actions, /* Empty */, csr_regfile$read_csr_minstret, csr_regfile$EN_csr_minstret_incr, csr_regfile$read_csr_mcycle, /* Empty */, csr_regfile$access_permitted_1_priv, csr_regfile$access_permitted_1_csr_addr, csr_regfile$access_permitted_1_read_not_write, csr_regfile$access_permitted_1, csr_regfile$access_permitted_2_priv, csr_regfile$access_permitted_2_csr_addr, csr_regfile$access_permitted_2_read_not_write, csr_regfile$access_permitted_2, csr_regfile$csr_counter_read_fault_priv, csr_regfile$csr_counter_read_fault_csr_addr, /* Empty */, /* Empty */, csr_regfile$m_external_interrupt_req_set_not_clear, csr_regfile$s_external_interrupt_req_set_not_clear, csr_regfile$timer_interrupt_req_set_not_clear, csr_regfile$software_interrupt_req_set_not_clear, csr_regfile$interrupt_pending_cur_priv, csr_regfile$interrupt_pending, csr_regfile$wfi_resume, csr_regfile$nmi_req_set_not_clear, csr_regfile$nmi_pending, csr_regfile$EN_debug, /* Empty */, RTL__DOT__csr_regfile__DOT__rg_nmi, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__csr_regfile__DOT__rg_state);

  \FIFO2[wrapper.RTL.f_reset_reqs]  f_reset_reqs(CLK, RST_N, f_reset_reqs$D_IN, f_reset_reqs$ENQ, f_reset_reqs$FULL_N, f_reset_reqs$D_OUT, f_reset_reqs$DEQ, f_reset_reqs$EMPTY_N, f_reset_reqs$CLR, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__f_reset_reqs__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__f_reset_reqs__DOT__empty_reg, /* Empty */, /* Empty */);

  \FIFO2[wrapper.RTL.f_reset_rsps]  f_reset_rsps(CLK, RST_N, f_reset_rsps$D_IN, f_reset_rsps$ENQ, f_reset_rsps$FULL_N, f_reset_rsps$D_OUT, f_reset_rsps$DEQ, f_reset_rsps$EMPTY_N, f_reset_rsps$CLR, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__f_reset_rsps__DOT__empty_reg, /* Empty */, /* Empty */, RTL__DOT__f_reset_rsps__DOT__full_reg);

  mkGPR_RegFile gpr_regfile(CLK, RST_N, gpr_regfile$EN_server_reset_request_put, gpr_regfile$RDY_server_reset_request_put, gpr_regfile$EN_server_reset_response_get, gpr_regfile$RDY_server_reset_response_get, gpr_regfile$read_rs1_rs1, gpr_regfile$read_rs1, gpr_regfile$read_rs1_port2_rs1, /* Empty */, gpr_regfile$read_rs2_rs2, gpr_regfile$read_rs2, gpr_regfile$write_rd_rd, gpr_regfile$write_rd_rd_val, gpr_regfile$EN_write_rd, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_2_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_24_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_30_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_26_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_13_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_19_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_5_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_20_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_28_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_4_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_11_, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_8_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_3_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_9_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_14_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_16_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_17_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_18_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_21_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_22_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_23_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_25_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_27_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_29_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_31_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_6_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_1_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_10_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_7_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_12_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_15_);

  mkNear_Mem near_mem(CLK, RST_N, near_mem$EN_server_reset_request_put, near_mem$RDY_server_reset_request_put, near_mem$EN_server_reset_response_get, near_mem$RDY_server_reset_response_get, near_mem$imem_req_f3, near_mem$imem_req_addr, near_mem$imem_req_priv, near_mem$imem_req_sstatus_SUM, near_mem$imem_req_mstatus_MXR, near_mem$imem_req_satp, near_mem$EN_imem_req, near_mem$imem_valid, near_mem$imem_is_i32_not_i16, near_mem$imem_pc, near_mem$imem_instr, near_mem$imem_exc, near_mem$imem_exc_code, near_mem$imem_tval, near_mem$imem_master_awvalid, near_mem$imem_master_awid, near_mem$imem_master_awaddr, near_mem$imem_master_awlen, near_mem$imem_master_awsize, near_mem$imem_master_awburst, near_mem$imem_master_awlock, near_mem$imem_master_awcache, near_mem$imem_master_awprot, near_mem$imem_master_awqos, near_mem$imem_master_awregion, near_mem$imem_master_awready, near_mem$imem_master_wvalid, near_mem$imem_master_wdata, near_mem$imem_master_wstrb, near_mem$imem_master_wlast, near_mem$imem_master_wready, near_mem$imem_master_bvalid, near_mem$imem_master_bid, near_mem$imem_master_bresp, near_mem$imem_master_bready, near_mem$imem_master_arvalid, near_mem$imem_master_arid, near_mem$imem_master_araddr, near_mem$imem_master_arlen, near_mem$imem_master_arsize, near_mem$imem_master_arburst, near_mem$imem_master_arlock, near_mem$imem_master_arcache, near_mem$imem_master_arprot, near_mem$imem_master_arqos, near_mem$imem_master_arregion, near_mem$imem_master_arready, near_mem$imem_master_rvalid, near_mem$imem_master_rid, near_mem$imem_master_rdata, near_mem$imem_master_rresp, near_mem$imem_master_rlast, near_mem$imem_master_rready, near_mem$dmem_req_op, near_mem$dmem_req_f3, near_mem$dmem_req_addr, near_mem$dmem_req_store_value, near_mem$dmem_req_priv, near_mem$dmem_req_sstatus_SUM, near_mem$dmem_req_mstatus_MXR, near_mem$dmem_req_satp, near_mem$EN_dmem_req, near_mem$dmem_valid, near_mem$dmem_word64, /* Empty */, near_mem$dmem_exc, near_mem$dmem_exc_code, near_mem$dmem_master_awvalid, near_mem$dmem_master_awid, near_mem$dmem_master_awaddr, near_mem$dmem_master_awlen, near_mem$dmem_master_awsize, near_mem$dmem_master_awburst, near_mem$dmem_master_awlock, near_mem$dmem_master_awcache, near_mem$dmem_master_awprot, near_mem$dmem_master_awqos, near_mem$dmem_master_awregion, near_mem$dmem_master_awready, near_mem$dmem_master_wvalid, near_mem$dmem_master_wdata, near_mem$dmem_master_wstrb, near_mem$dmem_master_wlast, near_mem$dmem_master_wready, near_mem$dmem_master_bvalid, near_mem$dmem_master_bid, near_mem$dmem_master_bresp, near_mem$dmem_master_bready, near_mem$dmem_master_arvalid, near_mem$dmem_master_arid, near_mem$dmem_master_araddr, near_mem$dmem_master_arlen, near_mem$dmem_master_arsize, near_mem$dmem_master_arburst, near_mem$dmem_master_arlock, near_mem$dmem_master_arcache, near_mem$dmem_master_arprot, near_mem$dmem_master_arqos, near_mem$dmem_master_arregion, near_mem$dmem_master_arready, near_mem$dmem_master_rvalid, near_mem$dmem_master_rid, near_mem$dmem_master_rdata, near_mem$dmem_master_rresp, near_mem$dmem_master_rlast, near_mem$dmem_master_rready, near_mem$EN_server_fence_i_request_put, near_mem$RDY_server_fence_i_request_put, near_mem$EN_server_fence_i_response_get, near_mem$RDY_server_fence_i_response_get, near_mem$server_fence_request_put, near_mem$EN_server_fence_request_put, near_mem$RDY_server_fence_request_put, near_mem$EN_server_fence_response_get, near_mem$RDY_server_fence_response_get, near_mem$EN_sfence_vma, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__rg_pa, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__rg_addr, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg);

  mkSoC_Map soc_map(CLK, RST_N, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, soc_map$m_is_mem_addr_addr, /* Empty */, soc_map$m_is_IO_addr_addr, /* Empty */, soc_map$m_is_near_mem_IO_addr_addr, /* Empty */, soc_map$m_pc_reset_value, /* Empty */, /* Empty */);

  \FIFO20[wrapper.RTL.stage1_f_reset_reqs]  stage1_f_reset_reqs(CLK, RST_N, stage1_f_reset_reqs$ENQ, stage1_f_reset_reqs$FULL_N, stage1_f_reset_reqs$DEQ, stage1_f_reset_reqs$EMPTY_N, stage1_f_reset_reqs$CLR, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__stage1_f_reset_reqs__DOT__full_reg, RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */);

  \FIFO20[wrapper.RTL.stage1_f_reset_rsps]  stage1_f_reset_rsps(CLK, RST_N, stage1_f_reset_rsps$ENQ, stage1_f_reset_rsps$FULL_N, stage1_f_reset_rsps$DEQ, stage1_f_reset_rsps$EMPTY_N, stage1_f_reset_rsps$CLR, /* Empty */, RTL__DOT__stage1_f_reset_rsps__DOT__full_reg, RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */);

  \FIFO20[wrapper.RTL.stage2_f_reset_reqs]  stage2_f_reset_reqs(CLK, RST_N, stage2_f_reset_reqs$ENQ, stage2_f_reset_reqs$FULL_N, stage2_f_reset_reqs$DEQ, stage2_f_reset_reqs$EMPTY_N, stage2_f_reset_reqs$CLR, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__stage2_f_reset_reqs__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */);

  \FIFO20[wrapper.RTL.stage2_f_reset_rsps]  stage2_f_reset_rsps(CLK, RST_N, stage2_f_reset_rsps$ENQ, stage2_f_reset_rsps$FULL_N, stage2_f_reset_rsps$DEQ, stage2_f_reset_rsps$EMPTY_N, stage2_f_reset_rsps$CLR, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage2_f_reset_rsps__DOT__full_reg);

  \FIFO20[wrapper.RTL.stage3_f_reset_reqs]  stage3_f_reset_reqs(CLK, RST_N, stage3_f_reset_reqs$ENQ, stage3_f_reset_reqs$FULL_N, stage3_f_reset_reqs$DEQ, stage3_f_reset_reqs$EMPTY_N, stage3_f_reset_reqs$CLR, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__stage3_f_reset_reqs__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */);

  \FIFO20[wrapper.RTL.stage3_f_reset_rsps]  stage3_f_reset_rsps(CLK, RST_N, stage3_f_reset_rsps$ENQ, stage3_f_reset_rsps$FULL_N, stage3_f_reset_rsps$DEQ, stage3_f_reset_rsps$EMPTY_N, stage3_f_reset_rsps$CLR, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__stage3_f_reset_rsps__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg, /* Empty */, /* Empty */);
endmodule  /* mkCPU */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 9876. */
module mkCSR_RegFile(CLK, RST_N, EN_server_reset_request_put, RDY_server_reset_request_put, EN_server_reset_response_get, RDY_server_reset_response_get, read_csr_csr_addr, read_csr, read_csr_port2_csr_addr, read_csr_port2, mav_read_csr_csr_addr, EN_mav_read_csr, mav_read_csr, mav_csr_write_csr_addr, mav_csr_write_word, EN_mav_csr_write, mav_csr_write, read_misa, read_mstatus, read_ustatus, read_satp, csr_trap_actions_from_priv, csr_trap_actions_pc, csr_trap_actions_nmi, csr_trap_actions_interrupt, csr_trap_actions_exc_code, csr_trap_actions_xtval, EN_csr_trap_actions, csr_trap_actions, RDY_csr_trap_actions, csr_ret_actions_from_priv, EN_csr_ret_actions, csr_ret_actions, RDY_csr_ret_actions, read_csr_minstret, EN_csr_minstret_incr, read_csr_mcycle, read_csr_mtime, access_permitted_1_priv, access_permitted_1_csr_addr, access_permitted_1_read_not_write, access_permitted_1, access_permitted_2_priv, access_permitted_2_csr_addr, access_permitted_2_read_not_write, access_permitted_2, csr_counter_read_fault_priv, csr_counter_read_fault_csr_addr, csr_counter_read_fault, csr_mip_read, m_external_interrupt_req_set_not_clear, s_external_interrupt_req_set_not_clear, timer_interrupt_req_set_not_clear, software_interrupt_req_set_not_clear, interrupt_pending_cur_priv, interrupt_pending, wfi_resume, nmi_req_set_not_clear, nmi_pending, EN_debug, RDY_debug, RTL__DOT__csr_regfile__DOT__rg_nmi, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__csr_regfile__DOT__rg_state);
  input CLK;
  input RST_N;
  input EN_server_reset_request_put;
  output RDY_server_reset_request_put;
  input EN_server_reset_response_get;
  output RDY_server_reset_response_get;
  input [11:0] read_csr_csr_addr;
  output [32:0] read_csr;
  input [11:0] read_csr_port2_csr_addr;
  output [32:0] read_csr_port2;
  input [11:0] mav_read_csr_csr_addr;
  input EN_mav_read_csr;
  output [32:0] mav_read_csr;
  input [11:0] mav_csr_write_csr_addr;
  input [31:0] mav_csr_write_word;
  input EN_mav_csr_write;
  output [31:0] mav_csr_write;
  output [27:0] read_misa;
  output [31:0] read_mstatus;
  output [31:0] read_ustatus;
  output [31:0] read_satp;
  input [1:0] csr_trap_actions_from_priv;
  input [31:0] csr_trap_actions_pc;
  input csr_trap_actions_nmi;
  input csr_trap_actions_interrupt;
  input [3:0] csr_trap_actions_exc_code;
  input [31:0] csr_trap_actions_xtval;
  input EN_csr_trap_actions;
  output [97:0] csr_trap_actions;
  output RDY_csr_trap_actions;
  input [1:0] csr_ret_actions_from_priv;
  input EN_csr_ret_actions;
  output [65:0] csr_ret_actions;
  output RDY_csr_ret_actions;
  output [63:0] read_csr_minstret;
  input EN_csr_minstret_incr;
  output [63:0] read_csr_mcycle;
  output [63:0] read_csr_mtime;
  input [1:0] access_permitted_1_priv;
  input [11:0] access_permitted_1_csr_addr;
  input access_permitted_1_read_not_write;
  output access_permitted_1;
  input [1:0] access_permitted_2_priv;
  input [11:0] access_permitted_2_csr_addr;
  input access_permitted_2_read_not_write;
  output access_permitted_2;
  input [1:0] csr_counter_read_fault_priv;
  input [11:0] csr_counter_read_fault_csr_addr;
  output csr_counter_read_fault;
  output [31:0] csr_mip_read;
  input m_external_interrupt_req_set_not_clear;
  input s_external_interrupt_req_set_not_clear;
  input timer_interrupt_req_set_not_clear;
  input software_interrupt_req_set_not_clear;
  input [1:0] interrupt_pending_cur_priv;
  output [4:0] interrupt_pending;
  output wfi_resume;
  input nmi_req_set_not_clear;
  output nmi_pending;
  input EN_debug;
  output RDY_debug;
  output RTL__DOT__csr_regfile__DOT__rg_nmi;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__csr_regfile__DOT__rg_state;

  wire CAN_FIRE_RL_rl_mcycle_incr;
  wire CAN_FIRE_RL_rl_reset_start;
  wire CAN_FIRE_RL_rl_upd_minstret_csrrx;
  wire CAN_FIRE_RL_rl_upd_minstret_incr;
  wire CAN_FIRE_csr_minstret_incr;
  wire CAN_FIRE_csr_ret_actions;
  wire CAN_FIRE_csr_trap_actions;
  wire CAN_FIRE_debug;
  wire CAN_FIRE_m_external_interrupt_req;
  wire CAN_FIRE_mav_csr_write;
  wire CAN_FIRE_mav_read_csr;
  wire CAN_FIRE_nmi_req;
  wire CAN_FIRE_s_external_interrupt_req;
  wire CAN_FIRE_server_reset_request_put;
  wire CAN_FIRE_server_reset_response_get;
  wire CAN_FIRE_software_interrupt_req;
  wire CAN_FIRE_timer_interrupt_req;
  wire CLK;
  wire EN_csr_minstret_incr;
  wire EN_csr_ret_actions;
  wire EN_csr_trap_actions;
  wire EN_debug;
  wire EN_mav_csr_write;
  wire EN_mav_read_csr;
  wire EN_server_reset_request_put;
  wire EN_server_reset_response_get;
  wire [3:0] IF_NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_N_ETC___d1370;
  wire [3:0] IF_NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_N_ETC___d1372;
  wire [3:0] IF_NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_N_ETC___d1374;
  wire [3:0] IF_NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_N_ETC___d1376;
  wire [31:0] IF_csr_ret_actions_from_priv_EQ_0b11_029_THEN__ETC___d1050;
  wire [33:0] IF_csr_ret_actions_from_priv_EQ_0b11_029_THEN__ETC___d1068;
  reg [31:0] IF_mav_csr_write_csr_addr_EQ_0x300_91_THEN_0_C_ETC___d769;
  reg [31:0] IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574;
  reg [31:0] IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220;
  reg [31:0] IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397;
  wire MUX_csr_mstatus_rg_mstatus$write_1__SEL_2;
  wire [31:0] MUX_csr_mstatus_rg_mstatus$write_1__VAL_3;
  wire MUX_rg_mcause$write_1__SEL_2;
  wire [4:0] MUX_rg_mcause$write_1__VAL_2;
  wire [4:0] MUX_rg_mcause$write_1__VAL_3;
  wire MUX_rg_mcounteren$write_1__SEL_1;
  wire MUX_rg_mepc$write_1__SEL_1;
  wire [63:0] MUX_rg_minstret$write_1__VAL_1;
  wire [63:0] MUX_rg_minstret$write_1__VAL_2;
  wire MUX_rg_mtval$write_1__SEL_1;
  wire MUX_rg_mtvec$write_1__SEL_1;
  wire [30:0] MUX_rg_mtvec$write_1__VAL_1;
  wire [30:0] MUX_rg_mtvec$write_1__VAL_2;
  wire MUX_rg_state$write_1__SEL_2;
  wire MUX_rg_tdata1$write_1__SEL_1;
  wire MUX_rw_minstret$wset_1__SEL_1;
  wire [63:0] MUX_rw_minstret$wset_1__VAL_1;
  wire NOT_access_permitted_1_csr_addr_ULT_0xC03_069__ETC___d1155;
  wire NOT_access_permitted_2_csr_addr_ULT_0xC03_160__ETC___d1245;
  wire NOT_cfg_verbosity_read__31_ULE_1_32___d733;
  wire NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1334;
  wire NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1339;
  wire NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1344;
  wire NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1349;
  wire NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1354;
  wire NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1359;
  wire NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1364;
  wire NOT_csr_trap_actions_nmi_97_AND_csr_trap_actio_ETC___d974;
  wire NOT_mav_csr_write_csr_addr_ULT_0xB03_77_35_AND_ETC___d746;
  wire RDY_csr_ret_actions;
  wire RDY_csr_trap_actions;
  wire RDY_debug;
  wire RDY_server_reset_request_put;
  wire RDY_server_reset_response_get;
  wire RST_N;
  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__csr_regfile__DOT__rg_nmi;
  wire RTL__DOT__csr_regfile__DOT__rg_state;
  wire WILL_FIRE_RL_rl_mcycle_incr;
  wire WILL_FIRE_RL_rl_reset_start;
  wire WILL_FIRE_RL_rl_upd_minstret_csrrx;
  wire WILL_FIRE_RL_rl_upd_minstret_incr;
  wire WILL_FIRE_csr_minstret_incr;
  wire WILL_FIRE_csr_ret_actions;
  wire WILL_FIRE_csr_trap_actions;
  wire WILL_FIRE_debug;
  wire WILL_FIRE_m_external_interrupt_req;
  wire WILL_FIRE_mav_csr_write;
  wire WILL_FIRE_mav_read_csr;
  wire WILL_FIRE_nmi_req;
  wire WILL_FIRE_s_external_interrupt_req;
  wire WILL_FIRE_server_reset_request_put;
  wire WILL_FIRE_server_reset_response_get;
  wire WILL_FIRE_software_interrupt_req;
  wire WILL_FIRE_timer_interrupt_req;
  wire [31:0] _theResult___fst__h8211;
  wire [31:0] _theResult___fst__h8412;
  wire access_permitted_1;
  wire [11:0] access_permitted_1_csr_addr;
  wire [1:0] access_permitted_1_priv;
  wire access_permitted_1_read_not_write;
  wire access_permitted_2;
  wire [11:0] access_permitted_2_csr_addr;
  wire [1:0] access_permitted_2_priv;
  wire access_permitted_2_read_not_write;
  wire b__h8248;
  reg [3:0] cfg_verbosity;
  wire [3:0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;
  wire csr_counter_read_fault;
  wire [11:0] csr_counter_read_fault_csr_addr;
  wire [1:0] csr_counter_read_fault_priv;
  wire csr_mie$EN_fav_write;
  wire csr_mie$EN_reset;
  wire [31:0] csr_mie$fav_write;
  wire [27:0] csr_mie$fav_write_misa;
  wire [31:0] csr_mie$fav_write_wordxl;
  wire [31:0] csr_mie$fv_read;
  wire csr_mip$EN_fav_write;
  wire csr_mip$EN_reset;
  wire [31:0] csr_mip$fav_write;
  wire [27:0] csr_mip$fav_write_misa;
  wire [31:0] csr_mip$fav_write_wordxl;
  wire [31:0] csr_mip$fv_read;
  wire csr_mip$m_external_interrupt_req_req;
  wire csr_mip$s_external_interrupt_req_req;
  wire csr_mip$software_interrupt_req_req;
  wire csr_mip$timer_interrupt_req_req;
  wire csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1288;
  wire csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1293;
  wire csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1298;
  wire csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1303;
  wire csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1308;
  wire csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1313;
  wire csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1318;
  wire csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1323;
  wire [31:0] csr_mip_read;
  reg [31:0] csr_mstatus_rg_mstatus;
  reg [31:0] csr_mstatus_rg_mstatus$D_IN;
  wire csr_mstatus_rg_mstatus$EN;
  wire [31:0] csr_mstatus_rg_mstatus_76_AND_INV_1_SL_0_CONCA_ETC___d1043;
  wire [65:0] csr_ret_actions;
  wire [1:0] csr_ret_actions_from_priv;
  wire [97:0] csr_trap_actions;
  wire [3:0] csr_trap_actions_exc_code;
  wire [1:0] csr_trap_actions_from_priv;
  wire csr_trap_actions_interrupt;
  wire csr_trap_actions_nmi;
  wire csr_trap_actions_nmi_OR_NOT_csr_trap_actions_i_ETC___d1025;
  wire [31:0] csr_trap_actions_pc;
  wire [31:0] csr_trap_actions_xtval;
  wire [3:0] exc_code__h7909;
  wire [31:0] exc_pc___1__h7296;
  wire [31:0] exc_pc__h7032;
  wire [31:0] exc_pc__h7243;
  wire f_reset_rsps$CLR;
  wire f_reset_rsps$DEQ;
  wire f_reset_rsps$EMPTY_N;
  wire f_reset_rsps$ENQ;
  wire f_reset_rsps$FULL_N;
  wire [22:0] fixed_up_val_23__h4079;
  wire [22:0] fixed_up_val_23__h6471;
  wire [22:0] fixed_up_val_23__h8130;
  wire [5:0] ie_from_x__h8195;
  wire [4:0] interrupt_pending;
  wire [1:0] interrupt_pending_cur_priv;
  wire m_external_interrupt_req_set_not_clear;
  wire [31:0] mask__h8232;
  wire [31:0] mask__h8249;
  wire [31:0] mav_csr_write;
  wire [11:0] mav_csr_write_csr_addr;
  wire mav_csr_write_csr_addr_ULE_0x33F___d586;
  wire mav_csr_write_csr_addr_ULE_0xB1F___d578;
  wire mav_csr_write_csr_addr_ULE_0xB9F___d582;
  wire mav_csr_write_csr_addr_ULT_0x323_85_OR_NOT_mav_ETC___d728;
  wire mav_csr_write_csr_addr_ULT_0x323___d585;
  wire mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d590;
  wire mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d642;
  wire mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d730;
  wire mav_csr_write_csr_addr_ULT_0xB03___d577;
  wire mav_csr_write_csr_addr_ULT_0xB83___d581;
  wire [31:0] mav_csr_write_word;
  wire [32:0] mav_read_csr;
  wire [11:0] mav_read_csr_csr_addr;
  wire [1:0] mpp__h7337;
  wire nmi_pending;
  wire nmi_req_set_not_clear;
  wire [5:0] pie_from_x__h8196;
  wire [32:0] read_csr;
  wire [11:0] read_csr_csr_addr;
  wire [63:0] read_csr_mcycle;
  wire [63:0] read_csr_minstret;
  wire [63:0] read_csr_mtime;
  wire [32:0] read_csr_port2;
  wire [11:0] read_csr_port2_csr_addr;
  wire [27:0] read_misa;
  wire [31:0] read_mstatus;
  wire [31:0] read_satp;
  wire [31:0] read_ustatus;
  wire [31:0] result__h4701;
  wire [31:0] result__h5357;
  reg [31:0] rg_dcsr;
  wire [31:0] rg_dcsr$D_IN;
  wire rg_dcsr$EN;
  reg [31:0] rg_dpc;
  wire [31:0] rg_dpc$D_IN;
  wire rg_dpc$EN;
  reg [31:0] rg_dscratch0;
  wire [31:0] rg_dscratch0$D_IN;
  wire rg_dscratch0$EN;
  reg [31:0] rg_dscratch1;
  wire [31:0] rg_dscratch1$D_IN;
  wire rg_dscratch1$EN;
  reg [4:0] rg_mcause;
  reg [4:0] rg_mcause$D_IN;
  wire rg_mcause$EN;
  reg [2:0] rg_mcounteren;
  wire [2:0] rg_mcounteren$D_IN;
  wire rg_mcounteren$EN;
  reg [63:0] rg_mcycle;
  wire [63:0] rg_mcycle$D_IN;
  wire rg_mcycle$EN;
  reg [31:0] rg_mepc;
  wire [31:0] rg_mepc$D_IN;
  wire rg_mepc$EN;
  reg [63:0] rg_minstret;
  wire [63:0] rg_minstret$D_IN;
  wire rg_minstret$EN;
  reg [31:0] rg_mscratch;
  wire [31:0] rg_mscratch$D_IN;
  wire rg_mscratch$EN;
  reg [31:0] rg_mtval;
  wire [31:0] rg_mtval$D_IN;
  wire rg_mtval$EN;
  reg [30:0] rg_mtvec;
  wire [30:0] rg_mtvec$D_IN;
  wire rg_mtvec$EN;
  reg rg_nmi;
  wire rg_nmi$D_IN;
  wire rg_nmi$EN;
  reg [31:0] rg_nmi_vector;
  wire [31:0] rg_nmi_vector$D_IN;
  wire rg_nmi_vector$EN;
  reg rg_state;
  wire rg_state$D_IN;
  wire rg_state$EN;
  reg [31:0] rg_tdata1;
  wire [31:0] rg_tdata1$D_IN;
  wire rg_tdata1$EN;
  reg [31:0] rg_tdata2;
  wire [31:0] rg_tdata2$D_IN;
  wire rg_tdata2$EN;
  reg [31:0] rg_tdata3;
  wire [31:0] rg_tdata3$D_IN;
  wire rg_tdata3$EN;
  reg [31:0] rg_tselect;
  wire [31:0] rg_tselect$D_IN;
  wire rg_tselect$EN;
  wire s_external_interrupt_req_set_not_clear;
  wire [63:0] soc_map$m_is_IO_addr_addr;
  wire [63:0] soc_map$m_is_mem_addr_addr;
  wire [63:0] soc_map$m_is_near_mem_IO_addr_addr;
  wire [63:0] soc_map$m_mtvec_reset_value;
  wire [63:0] soc_map$m_nmivec_reset_value;
  wire software_interrupt_req_set_not_clear;
  wire timer_interrupt_req_set_not_clear;
  wire [1:0] to_y__h8411;
  wire [31:0] v__h4509;
  wire [31:0] v__h4571;
  wire [31:0] v__h4742;
  wire [31:0] val__h8250;
  wire [31:0] vector_offset__h7244;
  wire wfi_resume;
  wire [31:0] wordxl1__h4038;
  wire [63:0] x__h5174;
  wire [63:0] x__h5282;
  wire [31:0] x__h5843;
  wire [31:0] x__h8067;
  wire [31:0] x__h8068;
  wire [31:0] x__h8085;
  wire [31:0] x__h8231;
  wire [31:0] x__h8244;
  wire [31:0] x__h8261;
  wire [31:0] y__h8245;
  wire [31:0] y__h8262;


  assign CAN_FIRE_RL_rl_mcycle_incr = 1'b1;
  assign CAN_FIRE_csr_minstret_incr = 1'b1;
  assign CAN_FIRE_csr_ret_actions = 1'b1;
  assign CAN_FIRE_csr_trap_actions = 1'b1;
  assign CAN_FIRE_debug = 1'b1;
  assign CAN_FIRE_m_external_interrupt_req = 1'b1;
  assign CAN_FIRE_mav_csr_write = 1'b1;
  assign CAN_FIRE_mav_read_csr = 1'b1;
  assign CAN_FIRE_nmi_req = 1'b1;
  assign CAN_FIRE_s_external_interrupt_req = 1'b1;
  assign CAN_FIRE_software_interrupt_req = 1'b1;
  assign CAN_FIRE_timer_interrupt_req = 1'b1;
  assign RDY_csr_ret_actions = 1'b1;
  assign RDY_csr_trap_actions = 1'b1;
  assign RDY_debug = 1'b1;
  assign WILL_FIRE_RL_rl_mcycle_incr = 1'b1;
  assign WILL_FIRE_m_external_interrupt_req = 1'b1;
  assign WILL_FIRE_nmi_req = 1'b1;
  assign WILL_FIRE_s_external_interrupt_req = 1'b1;
  assign WILL_FIRE_software_interrupt_req = 1'b1;
  assign WILL_FIRE_timer_interrupt_req = 1'b1;
  assign cfg_verbosity$D_IN = 4'h0;
  assign cfg_verbosity$EN = 1'b0;
  assign csr_mie$fav_write_misa = 28'h4100100;
  assign csr_mip$fav_write_misa = 28'h4100100;
  assign f_reset_rsps$CLR = 1'b0;
  assign read_misa = 28'h4100100;
  assign read_satp = 32'haaaaaaaa;
  assign rg_dcsr$D_IN = 32'h00000000;
  assign rg_dcsr$EN = 1'b0;
  assign rg_dpc$D_IN = 32'h00000000;
  assign rg_dpc$EN = 1'b0;
  assign rg_dscratch0$D_IN = 32'h00000000;
  assign rg_dscratch0$EN = 1'b0;
  assign rg_dscratch1$D_IN = 32'h00000000;
  assign rg_dscratch1$EN = 1'b0;
  assign rg_mcycle$EN = 1'b1;
  assign rg_nmi$EN = 1'b1;
  assign rg_tselect$D_IN = 32'h00000000;
  assign soc_map$m_is_IO_addr_addr = 64'h0000000000000000;
  assign soc_map$m_is_mem_addr_addr = 64'h0000000000000000;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0000000000000000;

  assign read_csr = {((((((((((((((((((((((((((((((((read_csr_csr_addr >= 12'hc03) & (12'hc1f >= read_csr_csr_addr)) | ((read_csr_csr_addr >= 12'hc83) & (12'hc9f >= read_csr_csr_addr))) | ((read_csr_csr_addr >= 12'hb03) & (12'hb1f >= read_csr_csr_addr))) | ((read_csr_csr_addr >= 12'hb83) & (12'hb9f >= read_csr_csr_addr))) | ((read_csr_csr_addr >= 12'h323) & (12'h33f >= read_csr_csr_addr))) | (read_csr_csr_addr == 12'hc00)) | (read_csr_csr_addr == 12'hc02)) | (read_csr_csr_addr == 12'hc80)) | (read_csr_csr_addr == 12'hc82)) | (read_csr_csr_addr == 12'hf11)) | (read_csr_csr_addr == 12'hf12)) | (read_csr_csr_addr == 12'hf13)) | (read_csr_csr_addr == 12'hf14)) | (read_csr_csr_addr == 12'h300)) | (read_csr_csr_addr == 12'h301)) | (read_csr_csr_addr == 12'h304)) | (read_csr_csr_addr == 12'h305)) | (read_csr_csr_addr == 12'h306)) | (read_csr_csr_addr == 12'h340)) | (read_csr_csr_addr == 12'h341)) | (read_csr_csr_addr == 12'h342)) | (read_csr_csr_addr == 12'h343)) | (read_csr_csr_addr == 12'h344)) | (read_csr_csr_addr == 12'hb00)) | (read_csr_csr_addr == 12'hb02)) | (read_csr_csr_addr == 12'hb80)) | (read_csr_csr_addr == 12'hb82)) | (read_csr_csr_addr == 12'h7a0)) | (read_csr_csr_addr == 12'h7a1)) | (read_csr_csr_addr == 12'h7a2)) | (read_csr_csr_addr == 12'h7a3)), (((((((read_csr_csr_addr >= 12'hc03) & (12'hc1f >= read_csr_csr_addr)) | ((read_csr_csr_addr >= 12'hc83) & (12'hc9f >= read_csr_csr_addr))) | ((read_csr_csr_addr >= 12'hb03) & (12'hb1f >= read_csr_csr_addr))) | ((read_csr_csr_addr >= 12'hb83) & (12'hb9f >= read_csr_csr_addr))) | ((read_csr_csr_addr >= 12'h323) & (12'h33f >= read_csr_csr_addr))) ? 32'h00000000 : IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220)};
  assign read_csr_port2 = {((((((((((((((((((((((((((((((((read_csr_port2_csr_addr >= 12'hc03) & (12'hc1f >= read_csr_port2_csr_addr)) | ((read_csr_port2_csr_addr >= 12'hc83) & (12'hc9f >= read_csr_port2_csr_addr))) | ((read_csr_port2_csr_addr >= 12'hb03) & (12'hb1f >= read_csr_port2_csr_addr))) | ((read_csr_port2_csr_addr >= 12'hb83) & (12'hb9f >= read_csr_port2_csr_addr))) | ((read_csr_port2_csr_addr >= 12'h323) & (12'h33f >= read_csr_port2_csr_addr))) | (read_csr_port2_csr_addr == 12'hc00)) | (read_csr_port2_csr_addr == 12'hc02)) | (read_csr_port2_csr_addr == 12'hc80)) | (read_csr_port2_csr_addr == 12'hc82)) | (read_csr_port2_csr_addr == 12'hf11)) | (read_csr_port2_csr_addr == 12'hf12)) | (read_csr_port2_csr_addr == 12'hf13)) | (read_csr_port2_csr_addr == 12'hf14)) | (read_csr_port2_csr_addr == 12'h300)) | (read_csr_port2_csr_addr == 12'h301)) | (read_csr_port2_csr_addr == 12'h304)) | (read_csr_port2_csr_addr == 12'h305)) | (read_csr_port2_csr_addr == 12'h306)) | (read_csr_port2_csr_addr == 12'h340)) | (read_csr_port2_csr_addr == 12'h341)) | (read_csr_port2_csr_addr == 12'h342)) | (read_csr_port2_csr_addr == 12'h343)) | (read_csr_port2_csr_addr == 12'h344)) | (read_csr_port2_csr_addr == 12'hb00)) | (read_csr_port2_csr_addr == 12'hb02)) | (read_csr_port2_csr_addr == 12'hb80)) | (read_csr_port2_csr_addr == 12'hb82)) | (read_csr_port2_csr_addr == 12'h7a0)) | (read_csr_port2_csr_addr == 12'h7a1)) | (read_csr_port2_csr_addr == 12'h7a2)) | (read_csr_port2_csr_addr == 12'h7a3)), (((((((read_csr_port2_csr_addr >= 12'hc03) & (12'hc1f >= read_csr_port2_csr_addr)) | ((read_csr_port2_csr_addr >= 12'hc83) & (12'hc9f >= read_csr_port2_csr_addr))) | ((read_csr_port2_csr_addr >= 12'hb03) & (12'hb1f >= read_csr_port2_csr_addr))) | ((read_csr_port2_csr_addr >= 12'hb83) & (12'hb9f >= read_csr_port2_csr_addr))) | ((read_csr_port2_csr_addr >= 12'h323) & (12'h33f >= read_csr_port2_csr_addr))) ? 32'h00000000 : IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397)};
  assign mav_read_csr = {((((((((((((((((((((((((((((((((mav_read_csr_csr_addr >= 12'hc03) & (12'hc1f >= mav_read_csr_csr_addr)) | ((mav_read_csr_csr_addr >= 12'hc83) & (12'hc9f >= mav_read_csr_csr_addr))) | ((mav_read_csr_csr_addr >= 12'hb03) & (12'hb1f >= mav_read_csr_csr_addr))) | ((mav_read_csr_csr_addr >= 12'hb83) & (12'hb9f >= mav_read_csr_csr_addr))) | ((mav_read_csr_csr_addr >= 12'h323) & (12'h33f >= mav_read_csr_csr_addr))) | (mav_read_csr_csr_addr == 12'hc00)) | (mav_read_csr_csr_addr == 12'hc02)) | (mav_read_csr_csr_addr == 12'hc80)) | (mav_read_csr_csr_addr == 12'hc82)) | (mav_read_csr_csr_addr == 12'hf11)) | (mav_read_csr_csr_addr == 12'hf12)) | (mav_read_csr_csr_addr == 12'hf13)) | (mav_read_csr_csr_addr == 12'hf14)) | (mav_read_csr_csr_addr == 12'h300)) | (mav_read_csr_csr_addr == 12'h301)) | (mav_read_csr_csr_addr == 12'h304)) | (mav_read_csr_csr_addr == 12'h305)) | (mav_read_csr_csr_addr == 12'h306)) | (mav_read_csr_csr_addr == 12'h340)) | (mav_read_csr_csr_addr == 12'h341)) | (mav_read_csr_csr_addr == 12'h342)) | (mav_read_csr_csr_addr == 12'h343)) | (mav_read_csr_csr_addr == 12'h344)) | (mav_read_csr_csr_addr == 12'hb00)) | (mav_read_csr_csr_addr == 12'hb02)) | (mav_read_csr_csr_addr == 12'hb80)) | (mav_read_csr_csr_addr == 12'hb82)) | (mav_read_csr_csr_addr == 12'h7a0)) | (mav_read_csr_csr_addr == 12'h7a1)) | (mav_read_csr_csr_addr == 12'h7a2)) | (mav_read_csr_csr_addr == 12'h7a3)), (((((((mav_read_csr_csr_addr >= 12'hc03) & (12'hc1f >= mav_read_csr_csr_addr)) | ((mav_read_csr_csr_addr >= 12'hc83) & (12'hc9f >= mav_read_csr_csr_addr))) | ((mav_read_csr_csr_addr >= 12'hb03) & (12'hb1f >= mav_read_csr_csr_addr))) | ((mav_read_csr_csr_addr >= 12'hb83) & (12'hb9f >= mav_read_csr_csr_addr))) | ((mav_read_csr_csr_addr >= 12'h323) & (12'h33f >= mav_read_csr_csr_addr))) ? 32'h00000000 : IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574)};
  assign mav_csr_write = (NOT_mav_csr_write_csr_addr_ULT_0xB03_77_35_AND_ETC___d746 ? 32'h00000000 : IF_mav_csr_write_csr_addr_EQ_0x300_91_THEN_0_C_ETC___d769);
  assign read_ustatus = {27'h0000000, csr_mstatus_rg_mstatus[4], 3'h0, csr_mstatus_rg_mstatus[0]};
  assign csr_trap_actions = {x__h5843, x__h8067, x__h8068, 2'h3};
  assign csr_ret_actions = {x__h8085, IF_csr_ret_actions_from_priv_EQ_0b11_029_THEN__ETC___d1068};
  assign interrupt_pending = {csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1323, (NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1364 ? 4'h4 : IF_NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_N_ETC___d1376)};
  assign wfi_resume = ((csr_mip$fv_read & csr_mie$fv_read) != 32'h00000000);
  assign CAN_FIRE_RL_rl_reset_start = (~|rg_state);
  assign MUX_csr_mstatus_rg_mstatus$write_1__VAL_3 = {9'h000, fixed_up_val_23__h8130};
  assign MUX_rg_mcause$write_1__VAL_2 = {mav_csr_write_word[31], mav_csr_write_word[3:0]};
  assign MUX_rg_mcause$write_1__VAL_3 = {((~|csr_trap_actions_nmi) & csr_trap_actions_interrupt), exc_code__h7909};
  assign MUX_rg_minstret$write_1__VAL_1 = (MUX_rw_minstret$wset_1__SEL_1 ? MUX_rw_minstret$wset_1__VAL_1 : 64'h0000000000000000);
  assign MUX_rg_minstret$write_1__VAL_2 = (rg_minstret + 64'h0000000000000001);
  assign MUX_rg_mtvec$write_1__VAL_1 = {mav_csr_write_word[31:2], mav_csr_write_word[0]};
  assign MUX_rg_mtvec$write_1__VAL_2 = {soc_map$m_mtvec_reset_value[31:2], soc_map$m_mtvec_reset_value[0]};
  assign MUX_rw_minstret$wset_1__VAL_1 = ((mav_csr_write_csr_addr == 12'hb02) ? x__h5174 : x__h5282);
  assign rg_mcounteren$D_IN = (MUX_rg_mcounteren$write_1__SEL_1 ? mav_csr_write_word[2:0] : 3'h0);
  assign rg_mcycle$D_IN = (rg_mcycle + 64'h0000000000000001);
  assign rg_mepc$D_IN = (MUX_rg_mepc$write_1__SEL_1 ? result__h4701 : csr_trap_actions_pc);
  assign rg_minstret$D_IN = (WILL_FIRE_RL_rl_upd_minstret_csrrx ? MUX_rg_minstret$write_1__VAL_1 : MUX_rg_minstret$write_1__VAL_2);
  assign rg_mtval$D_IN = (MUX_rg_mtval$write_1__SEL_1 ? mav_csr_write_word : csr_trap_actions_xtval);
  assign rg_mtvec$D_IN = (MUX_rg_mtvec$write_1__SEL_1 ? MUX_rg_mtvec$write_1__VAL_1 : MUX_rg_mtvec$write_1__VAL_2);
  assign rg_nmi_vector$D_IN = soc_map$m_nmivec_reset_value[31:0];
  assign rg_state$D_IN = (~|EN_server_reset_request_put);
  assign rg_tdata1$D_IN = (MUX_rg_tdata1$write_1__SEL_1 ? result__h5357 : 32'h00000000);
  assign IF_NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_N_ETC___d1370 = ((((~|csr_mip$fv_read[11]) | (~|csr_mie$fv_read[11])) | ((interrupt_pending_cur_priv == 2'h3) & (~|csr_mstatus_rg_mstatus[3]))) ? 4'h3 : 4'hb);
  assign IF_NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_N_ETC___d1372 = (NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1339 ? 4'h9 : (NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1334 ? 4'h7 : IF_NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_N_ETC___d1370));
  assign IF_NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_N_ETC___d1374 = (NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1349 ? 4'h5 : (NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1344 ? 4'h1 : IF_NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_N_ETC___d1372));
  assign IF_NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_N_ETC___d1376 = (NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1359 ? 4'h0 : (NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1354 ? 4'h8 : IF_NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_N_ETC___d1374));
  assign IF_csr_ret_actions_from_priv_EQ_0b11_029_THEN__ETC___d1050 = ((csr_ret_actions_from_priv == 2'h3) ? _theResult___fst__h8211 : _theResult___fst__h8412);
  assign IF_csr_ret_actions_from_priv_EQ_0b11_029_THEN__ETC___d1068 = ((csr_ret_actions_from_priv == 2'h3) ? {csr_mstatus_rg_mstatus_76_AND_INV_1_SL_0_CONCA_ETC___d1043[12:11], _theResult___fst__h8211} : {to_y__h8411, _theResult___fst__h8412});
  assign NOT_cfg_verbosity_read__31_ULE_1_32___d733 = (cfg_verbosity > 4'h1);
  assign _theResult___fst__h8211 = {csr_mstatus_rg_mstatus_76_AND_INV_1_SL_0_CONCA_ETC___d1043[31:13], 2'h0, csr_mstatus_rg_mstatus_76_AND_INV_1_SL_0_CONCA_ETC___d1043[10:0]};
  assign _theResult___fst__h8412 = {csr_mstatus_rg_mstatus_76_AND_INV_1_SL_0_CONCA_ETC___d1043[31:9], 1'b0, csr_mstatus_rg_mstatus_76_AND_INV_1_SL_0_CONCA_ETC___d1043[7:0]};
  assign b__h8248 = csr_mstatus_rg_mstatus[{3'h1, csr_ret_actions_from_priv}];
  assign exc_code__h7909 = (csr_trap_actions_nmi ? 4'h0 : csr_trap_actions_exc_code);
  assign exc_pc___1__h7296 = (exc_pc__h7243 + vector_offset__h7244);
  assign exc_pc__h7032 = {rg_mtvec[30:1], 2'h0};
  assign exc_pc__h7243 = (csr_trap_actions_nmi ? rg_nmi_vector : exc_pc__h7032);
  assign fixed_up_val_23__h4079 = {mav_csr_write_word[22:17], 4'h0, ((mav_csr_write_word[12:11] == 2'h3) ? mav_csr_write_word[12:11] : 2'h0), mav_csr_write_word[10:9], 1'b0, mav_csr_write_word[7:6], 2'h0, mav_csr_write_word[3:2], 2'h0};
  assign fixed_up_val_23__h6471 = {csr_mstatus_rg_mstatus[22:17], 4'h0, mpp__h7337, csr_mstatus_rg_mstatus[10:9], 1'b0, csr_mstatus_rg_mstatus[3], csr_mstatus_rg_mstatus[6], 3'h0, csr_mstatus_rg_mstatus[2], 2'h0};
  assign fixed_up_val_23__h8130 = {IF_csr_ret_actions_from_priv_EQ_0b11_029_THEN__ETC___d1050[22:17], 4'h0, ((IF_csr_ret_actions_from_priv_EQ_0b11_029_THEN__ETC___d1050[12:11] == 2'h3) ? IF_csr_ret_actions_from_priv_EQ_0b11_029_THEN__ETC___d1050[12:11] : 2'h0), IF_csr_ret_actions_from_priv_EQ_0b11_029_THEN__ETC___d1050[10:9], 1'b0, IF_csr_ret_actions_from_priv_EQ_0b11_029_THEN__ETC___d1050[7:6], 2'h0, IF_csr_ret_actions_from_priv_EQ_0b11_029_THEN__ETC___d1050[3:2], 2'h0};
  assign ie_from_x__h8195 = {4'h0, csr_ret_actions_from_priv};
  assign mask__h8232 = (32'h00000001 << pie_from_x__h8196);
  assign mask__h8249 = (32'h00000001 << ie_from_x__h8195);
  assign mav_csr_write_csr_addr_ULE_0x33F___d586 = (12'h33f >= mav_csr_write_csr_addr);
  assign mav_csr_write_csr_addr_ULE_0xB1F___d578 = (12'hb1f >= mav_csr_write_csr_addr);
  assign mav_csr_write_csr_addr_ULE_0xB9F___d582 = (12'hb9f >= mav_csr_write_csr_addr);
  assign mav_csr_write_csr_addr_ULT_0x323___d585 = (12'h323 > mav_csr_write_csr_addr);
  assign mav_csr_write_csr_addr_ULT_0xB03___d577 = (12'hb03 > mav_csr_write_csr_addr);
  assign mav_csr_write_csr_addr_ULT_0xB83___d581 = (12'hb83 > mav_csr_write_csr_addr);
  assign mpp__h7337 = ((csr_trap_actions_from_priv == 2'h3) ? csr_trap_actions_from_priv : 2'h0);
  assign pie_from_x__h8196 = {4'h1, csr_ret_actions_from_priv};
  assign result__h4701 = {mav_csr_write_word[31:2], 2'h0};
  assign result__h5357 = {4'h0, mav_csr_write_word[27:0]};
  assign to_y__h8411 = {1'b0, csr_mstatus_rg_mstatus_76_AND_INV_1_SL_0_CONCA_ETC___d1043[8]};
  assign v__h4509 = {mav_csr_write_word[31:2], 1'b0, mav_csr_write_word[0]};
  assign v__h4571 = {29'h00000000, mav_csr_write_word[2:0]};
  assign v__h4742 = {mav_csr_write_word[31], 27'h0000000, mav_csr_write_word[3:0]};
  assign val__h8250 = ({31'h00000000, b__h8248} << ie_from_x__h8195);
  assign vector_offset__h7244 = {26'h0000000, csr_trap_actions_exc_code, 2'h0};
  assign wordxl1__h4038 = {9'h000, fixed_up_val_23__h4079};
  assign x__h5174 = {rg_minstret[63:32], mav_csr_write_word};
  assign x__h5282 = {mav_csr_write_word, rg_minstret[31:0]};
  assign x__h5843 = (((csr_trap_actions_interrupt & (~|csr_trap_actions_nmi)) & rg_mtvec[0]) ? exc_pc___1__h7296 : exc_pc__h7243);
  assign x__h8067 = {9'h000, fixed_up_val_23__h6471};
  assign x__h8068 = {((~|csr_trap_actions_nmi) & csr_trap_actions_interrupt), 27'h0000000, exc_code__h7909};
  assign x__h8085 = {rg_mepc[31:2], 1'b0, rg_mepc[0]};
  assign RDY_server_reset_request_put = f_reset_rsps$FULL_N;
  assign CAN_FIRE_server_reset_request_put = f_reset_rsps$FULL_N;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put;
  assign RDY_server_reset_response_get = (rg_state & f_reset_rsps$EMPTY_N);
  assign CAN_FIRE_server_reset_response_get = (rg_state & f_reset_rsps$EMPTY_N);
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get;
  assign WILL_FIRE_mav_read_csr = EN_mav_read_csr;
  assign WILL_FIRE_mav_csr_write = EN_mav_csr_write;
  assign read_mstatus = csr_mstatus_rg_mstatus;
  assign WILL_FIRE_csr_trap_actions = EN_csr_trap_actions;
  assign WILL_FIRE_csr_ret_actions = EN_csr_ret_actions;
  assign read_csr_minstret = rg_minstret;
  assign WILL_FIRE_csr_minstret_incr = EN_csr_minstret_incr;
  assign read_csr_mcycle = rg_mcycle;
  assign read_csr_mtime = rg_mcycle;
  assign access_permitted_1 = (NOT_access_permitted_1_csr_addr_ULT_0xC03_069__ETC___d1155 & (access_permitted_1_read_not_write | (access_permitted_1_csr_addr[11:10] != 2'h3)));
  assign access_permitted_2 = (NOT_access_permitted_2_csr_addr_ULT_0xC03_160__ETC___d1245 & (access_permitted_2_read_not_write | (access_permitted_2_csr_addr[11:10] != 2'h3)));
  assign csr_counter_read_fault = (((csr_counter_read_fault_priv == 2'h1) | (csr_counter_read_fault_priv == 2'h0)) & ((((((csr_counter_read_fault_csr_addr == 12'hc00) & (~|rg_mcounteren[0])) | ((csr_counter_read_fault_csr_addr == 12'hc01) & (~|rg_mcounteren[1]))) | ((csr_counter_read_fault_csr_addr == 12'hc02) & (~|rg_mcounteren[2]))) | ((csr_counter_read_fault_csr_addr >= 12'hc03) & (12'hc1f >= csr_counter_read_fault_csr_addr))) | ((csr_counter_read_fault_csr_addr >= 12'hc83) & (12'hc9f >= csr_counter_read_fault_csr_addr))));
  assign csr_mip_read = csr_mip$fv_read;
  assign nmi_pending = rg_nmi;
  assign WILL_FIRE_debug = EN_debug;
  assign WILL_FIRE_RL_rl_reset_start = MUX_rg_state$write_1__SEL_2;
  assign CAN_FIRE_RL_rl_upd_minstret_csrrx = (MUX_rw_minstret$wset_1__SEL_1 | WILL_FIRE_RL_rl_reset_start);
  assign WILL_FIRE_RL_rl_upd_minstret_csrrx = CAN_FIRE_RL_rl_upd_minstret_csrrx;
  assign CAN_FIRE_RL_rl_upd_minstret_incr = ((~|CAN_FIRE_RL_rl_upd_minstret_csrrx) & EN_csr_minstret_incr);
  assign WILL_FIRE_RL_rl_upd_minstret_incr = CAN_FIRE_RL_rl_upd_minstret_incr;
  assign MUX_csr_mstatus_rg_mstatus$write_1__SEL_2 = ((EN_mav_csr_write & mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d590) & (mav_csr_write_csr_addr == 12'h300));
  assign MUX_rg_mcause$write_1__SEL_2 = ((EN_mav_csr_write & mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d590) & (mav_csr_write_csr_addr == 12'h342));
  assign MUX_rg_mcounteren$write_1__SEL_1 = ((EN_mav_csr_write & mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d590) & (mav_csr_write_csr_addr == 12'h306));
  assign MUX_rg_mepc$write_1__SEL_1 = ((EN_mav_csr_write & mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d590) & (mav_csr_write_csr_addr == 12'h341));
  assign MUX_rg_mtval$write_1__SEL_1 = ((EN_mav_csr_write & mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d590) & (mav_csr_write_csr_addr == 12'h343));
  assign MUX_rg_mtvec$write_1__SEL_1 = ((EN_mav_csr_write & mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d590) & (mav_csr_write_csr_addr == 12'h305));
  assign MUX_rg_state$write_1__SEL_2 = (CAN_FIRE_RL_rl_reset_start & (~|EN_mav_csr_write));
  assign MUX_rg_tdata1$write_1__SEL_1 = ((EN_mav_csr_write & mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d590) & (mav_csr_write_csr_addr == 12'h7a1));
  assign MUX_rw_minstret$wset_1__SEL_1 = ((EN_mav_csr_write & mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d642) & ((mav_csr_write_csr_addr == 12'hb02) | (mav_csr_write_csr_addr == 12'hb82)));
  assign csr_mstatus_rg_mstatus$EN = (((((EN_mav_csr_write & mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d590) & (mav_csr_write_csr_addr == 12'h300)) | EN_csr_trap_actions) | EN_csr_ret_actions) | WILL_FIRE_RL_rl_reset_start);
  assign rg_mcause$EN = ((((EN_mav_csr_write & mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d590) & (mav_csr_write_csr_addr == 12'h342)) | EN_csr_trap_actions) | WILL_FIRE_RL_rl_reset_start);
  assign rg_mcounteren$EN = (((EN_mav_csr_write & mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d590) & (mav_csr_write_csr_addr == 12'h306)) | WILL_FIRE_RL_rl_reset_start);
  assign rg_mepc$EN = (((EN_mav_csr_write & mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d590) & (mav_csr_write_csr_addr == 12'h341)) | EN_csr_trap_actions);
  assign rg_minstret$EN = (WILL_FIRE_RL_rl_upd_minstret_csrrx | WILL_FIRE_RL_rl_upd_minstret_incr);
  assign rg_mscratch$D_IN = mav_csr_write_word;
  assign rg_mscratch$EN = ((EN_mav_csr_write & mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d590) & (mav_csr_write_csr_addr == 12'h340));
  assign rg_mtval$EN = (((EN_mav_csr_write & mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d590) & (mav_csr_write_csr_addr == 12'h343)) | EN_csr_trap_actions);
  assign rg_mtvec$EN = (((EN_mav_csr_write & mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d590) & (mav_csr_write_csr_addr == 12'h305)) | WILL_FIRE_RL_rl_reset_start);
  assign rg_nmi$D_IN = ((~|WILL_FIRE_RL_rl_reset_start) & nmi_req_set_not_clear);
  assign rg_nmi_vector$EN = MUX_rg_state$write_1__SEL_2;
  assign rg_state$EN = (EN_server_reset_request_put | WILL_FIRE_RL_rl_reset_start);
  assign rg_tdata1$EN = (((EN_mav_csr_write & mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d590) & (mav_csr_write_csr_addr == 12'h7a1)) | WILL_FIRE_RL_rl_reset_start);
  assign rg_tdata2$D_IN = mav_csr_write_word;
  assign rg_tdata2$EN = ((EN_mav_csr_write & mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d590) & (mav_csr_write_csr_addr == 12'h7a2));
  assign rg_tdata3$D_IN = mav_csr_write_word;
  assign rg_tdata3$EN = ((EN_mav_csr_write & mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d590) & (mav_csr_write_csr_addr == 12'h7a3));
  assign rg_tselect$EN = (((EN_mav_csr_write & mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d590) & (mav_csr_write_csr_addr == 12'h7a0)) | WILL_FIRE_RL_rl_reset_start);
  assign csr_mie$fav_write_wordxl = mav_csr_write_word;
  assign csr_mie$EN_reset = MUX_rg_state$write_1__SEL_2;
  assign csr_mie$EN_fav_write = ((EN_mav_csr_write & mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d590) & (mav_csr_write_csr_addr == 12'h304));
  assign csr_mip$fav_write_wordxl = mav_csr_write_word;
  assign csr_mip$m_external_interrupt_req_req = m_external_interrupt_req_set_not_clear;
  assign csr_mip$s_external_interrupt_req_req = s_external_interrupt_req_set_not_clear;
  assign csr_mip$software_interrupt_req_req = software_interrupt_req_set_not_clear;
  assign csr_mip$timer_interrupt_req_req = timer_interrupt_req_set_not_clear;
  assign csr_mip$EN_reset = MUX_rg_state$write_1__SEL_2;
  assign csr_mip$EN_fav_write = ((EN_mav_csr_write & mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d590) & (mav_csr_write_csr_addr == 12'h344));
  assign f_reset_rsps$ENQ = EN_server_reset_request_put;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get;
  assign NOT_access_permitted_1_csr_addr_ULT_0xC03_069__ETC___d1155 = (((((((((((((((((((((((((((((((((((access_permitted_1_csr_addr >= 12'hc03) & (12'hc1f >= access_permitted_1_csr_addr)) | ((access_permitted_1_csr_addr >= 12'hb03) & (12'hb1f >= access_permitted_1_csr_addr))) | ((access_permitted_1_csr_addr >= 12'hc83) & (12'hc9f >= access_permitted_1_csr_addr))) | ((access_permitted_1_csr_addr >= 12'hb83) & (12'hb9f >= access_permitted_1_csr_addr))) | ((access_permitted_1_csr_addr >= 12'h323) & (12'h33f >= access_permitted_1_csr_addr))) | (access_permitted_1_csr_addr == 12'hc00)) | (access_permitted_1_csr_addr == 12'hc02)) | (access_permitted_1_csr_addr == 12'hc80)) | (access_permitted_1_csr_addr == 12'hc81)) | (access_permitted_1_csr_addr == 12'hc82)) | (access_permitted_1_csr_addr == 12'hf11)) | (access_permitted_1_csr_addr == 12'hf12)) | (access_permitted_1_csr_addr == 12'hf13)) | (access_permitted_1_csr_addr == 12'hf14)) | (access_permitted_1_csr_addr == 12'h300)) | (access_permitted_1_csr_addr == 12'h301)) | (access_permitted_1_csr_addr == 12'h304)) | (access_permitted_1_csr_addr == 12'h305)) | (access_permitted_1_csr_addr == 12'h306)) | (access_permitted_1_csr_addr == 12'h340)) | (access_permitted_1_csr_addr == 12'h341)) | (access_permitted_1_csr_addr == 12'h342)) | (access_permitted_1_csr_addr == 12'h343)) | (access_permitted_1_csr_addr == 12'h344)) | (access_permitted_1_csr_addr == 12'hb00)) | (access_permitted_1_csr_addr == 12'hb02)) | (access_permitted_1_csr_addr == 12'hb80)) | (access_permitted_1_csr_addr == 12'hb82)) | (access_permitted_1_csr_addr == 12'h7a0)) | (access_permitted_1_csr_addr == 12'h7a1)) | (access_permitted_1_csr_addr == 12'h7a2)) | (access_permitted_1_csr_addr == 12'h7a3)) & (access_permitted_1_priv >= access_permitted_1_csr_addr[9:8])) & ((access_permitted_1_csr_addr != 12'h180) | (~|csr_mstatus_rg_mstatus[20])));
  assign NOT_access_permitted_2_csr_addr_ULT_0xC03_160__ETC___d1245 = (((((((((((((((((((((((((((((((((((access_permitted_2_csr_addr >= 12'hc03) & (12'hc1f >= access_permitted_2_csr_addr)) | ((access_permitted_2_csr_addr >= 12'hb03) & (12'hb1f >= access_permitted_2_csr_addr))) | ((access_permitted_2_csr_addr >= 12'hc83) & (12'hc9f >= access_permitted_2_csr_addr))) | ((access_permitted_2_csr_addr >= 12'hb83) & (12'hb9f >= access_permitted_2_csr_addr))) | ((access_permitted_2_csr_addr >= 12'h323) & (12'h33f >= access_permitted_2_csr_addr))) | (access_permitted_2_csr_addr == 12'hc00)) | (access_permitted_2_csr_addr == 12'hc02)) | (access_permitted_2_csr_addr == 12'hc80)) | (access_permitted_2_csr_addr == 12'hc81)) | (access_permitted_2_csr_addr == 12'hc82)) | (access_permitted_2_csr_addr == 12'hf11)) | (access_permitted_2_csr_addr == 12'hf12)) | (access_permitted_2_csr_addr == 12'hf13)) | (access_permitted_2_csr_addr == 12'hf14)) | (access_permitted_2_csr_addr == 12'h300)) | (access_permitted_2_csr_addr == 12'h301)) | (access_permitted_2_csr_addr == 12'h304)) | (access_permitted_2_csr_addr == 12'h305)) | (access_permitted_2_csr_addr == 12'h306)) | (access_permitted_2_csr_addr == 12'h340)) | (access_permitted_2_csr_addr == 12'h341)) | (access_permitted_2_csr_addr == 12'h342)) | (access_permitted_2_csr_addr == 12'h343)) | (access_permitted_2_csr_addr == 12'h344)) | (access_permitted_2_csr_addr == 12'hb00)) | (access_permitted_2_csr_addr == 12'hb02)) | (access_permitted_2_csr_addr == 12'hb80)) | (access_permitted_2_csr_addr == 12'hb82)) | (access_permitted_2_csr_addr == 12'h7a0)) | (access_permitted_2_csr_addr == 12'h7a1)) | (access_permitted_2_csr_addr == 12'h7a2)) | (access_permitted_2_csr_addr == 12'h7a3)) & (access_permitted_2_priv >= access_permitted_2_csr_addr[9:8])) & ((access_permitted_2_csr_addr != 12'h180) | (~|csr_mstatus_rg_mstatus[20])));
  assign NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1334 = ((((~|csr_mip$fv_read[11]) | (~|csr_mie$fv_read[11])) | ((interrupt_pending_cur_priv == 2'h3) & (~|csr_mstatus_rg_mstatus[3]))) & (((~|csr_mip$fv_read[3]) | (~|csr_mie$fv_read[3])) | ((interrupt_pending_cur_priv == 2'h3) & (~|csr_mstatus_rg_mstatus[3]))));
  assign NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1339 = (NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1334 & (((~|csr_mip$fv_read[7]) | (~|csr_mie$fv_read[7])) | ((interrupt_pending_cur_priv == 2'h3) & (~|csr_mstatus_rg_mstatus[3]))));
  assign NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1344 = (NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1339 & (((~|csr_mip$fv_read[9]) | (~|csr_mie$fv_read[9])) | ((interrupt_pending_cur_priv == 2'h3) & (~|csr_mstatus_rg_mstatus[3]))));
  assign NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1349 = (NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1344 & (((~|csr_mip$fv_read[1]) | (~|csr_mie$fv_read[1])) | ((interrupt_pending_cur_priv == 2'h3) & (~|csr_mstatus_rg_mstatus[3]))));
  assign NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1354 = (NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1349 & (((~|csr_mip$fv_read[5]) | (~|csr_mie$fv_read[5])) | ((interrupt_pending_cur_priv == 2'h3) & (~|csr_mstatus_rg_mstatus[3]))));
  assign NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1359 = (NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1354 & (((~|csr_mip$fv_read[8]) | (~|csr_mie$fv_read[8])) | ((interrupt_pending_cur_priv == 2'h3) & (~|csr_mstatus_rg_mstatus[3]))));
  assign NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1364 = (NOT_csr_mip_fv_read__94_BIT_11_277_324_OR_NOT__ETC___d1359 & (((~|csr_mip$fv_read[0]) | (~|csr_mie$fv_read[0])) | ((interrupt_pending_cur_priv == 2'h3) & (~|csr_mstatus_rg_mstatus[3]))));
  assign NOT_csr_trap_actions_nmi_97_AND_csr_trap_actio_ETC___d974 = ((((((((((((((~|csr_trap_actions_nmi) & csr_trap_actions_interrupt) & (exc_code__h7909 != 4'h0)) & (exc_code__h7909 != 4'h1)) & (exc_code__h7909 != 4'h2)) & (exc_code__h7909 != 4'h3)) & (exc_code__h7909 != 4'h4)) & (exc_code__h7909 != 4'h5)) & (exc_code__h7909 != 4'h6)) & (exc_code__h7909 != 4'h7)) & (exc_code__h7909 != 4'h8)) & (exc_code__h7909 != 4'h9)) & (exc_code__h7909 != 4'ha)) & (exc_code__h7909 != 4'hb));
  assign NOT_mav_csr_write_csr_addr_ULT_0xB03_77_35_AND_ETC___d746 = ((((((((~|mav_csr_write_csr_addr_ULT_0xB03___d577) & mav_csr_write_csr_addr_ULE_0xB1F___d578) | ((~|mav_csr_write_csr_addr_ULT_0xB83___d581) & mav_csr_write_csr_addr_ULE_0xB9F___d582)) | ((~|mav_csr_write_csr_addr_ULT_0x323___d585) & mav_csr_write_csr_addr_ULE_0x33F___d586)) | (mav_csr_write_csr_addr == 12'hf11)) | (mav_csr_write_csr_addr == 12'hf12)) | (mav_csr_write_csr_addr == 12'hf13)) | (mav_csr_write_csr_addr == 12'hf14));
  assign csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1288 = (((csr_mip$fv_read[11] & csr_mie$fv_read[11]) & ((interrupt_pending_cur_priv != 2'h3) | csr_mstatus_rg_mstatus[3])) | ((csr_mip$fv_read[3] & csr_mie$fv_read[3]) & ((interrupt_pending_cur_priv != 2'h3) | csr_mstatus_rg_mstatus[3])));
  assign csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1293 = (csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1288 | ((csr_mip$fv_read[7] & csr_mie$fv_read[7]) & ((interrupt_pending_cur_priv != 2'h3) | csr_mstatus_rg_mstatus[3])));
  assign csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1298 = (csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1293 | ((csr_mip$fv_read[9] & csr_mie$fv_read[9]) & ((interrupt_pending_cur_priv != 2'h3) | csr_mstatus_rg_mstatus[3])));
  assign csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1303 = (csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1298 | ((csr_mip$fv_read[1] & csr_mie$fv_read[1]) & ((interrupt_pending_cur_priv != 2'h3) | csr_mstatus_rg_mstatus[3])));
  assign csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1308 = (csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1303 | ((csr_mip$fv_read[5] & csr_mie$fv_read[5]) & ((interrupt_pending_cur_priv != 2'h3) | csr_mstatus_rg_mstatus[3])));
  assign csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1313 = (csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1308 | ((csr_mip$fv_read[8] & csr_mie$fv_read[8]) & ((interrupt_pending_cur_priv != 2'h3) | csr_mstatus_rg_mstatus[3])));
  assign csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1318 = (csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1313 | ((csr_mip$fv_read[0] & csr_mie$fv_read[0]) & ((interrupt_pending_cur_priv != 2'h3) | csr_mstatus_rg_mstatus[3])));
  assign csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1323 = (csr_mip_fv_read__94_BIT_11_277_AND_csr_mie_fv__ETC___d1318 | ((csr_mip$fv_read[4] & csr_mie$fv_read[4]) & ((interrupt_pending_cur_priv != 2'h3) | csr_mstatus_rg_mstatus[3])));
  assign csr_mstatus_rg_mstatus_76_AND_INV_1_SL_0_CONCA_ETC___d1043 = (x__h8244 | mask__h8232);
  assign csr_trap_actions_nmi_OR_NOT_csr_trap_actions_i_ETC___d1025 = (((((((((((((((csr_trap_actions_nmi | (~|csr_trap_actions_interrupt)) & (exc_code__h7909 != 4'h0)) & (exc_code__h7909 != 4'h1)) & (exc_code__h7909 != 4'h2)) & (exc_code__h7909 != 4'h3)) & (exc_code__h7909 != 4'h4)) & (exc_code__h7909 != 4'h5)) & (exc_code__h7909 != 4'h6)) & (exc_code__h7909 != 4'h7)) & (exc_code__h7909 != 4'h8)) & (exc_code__h7909 != 4'h9)) & (exc_code__h7909 != 4'hb)) & (exc_code__h7909 != 4'hc)) & (exc_code__h7909 != 4'hd)) & (exc_code__h7909 != 4'hf));
  assign mav_csr_write_csr_addr_ULT_0x323_85_OR_NOT_mav_ETC___d728 = (((((((((((((((((((((((mav_csr_write_csr_addr_ULT_0x323___d585 | (~|mav_csr_write_csr_addr_ULE_0x33F___d586)) & (mav_csr_write_csr_addr != 12'hf11)) & (mav_csr_write_csr_addr != 12'hf12)) & (mav_csr_write_csr_addr != 12'hf13)) & (mav_csr_write_csr_addr != 12'hf14)) & (mav_csr_write_csr_addr != 12'h300)) & (mav_csr_write_csr_addr != 12'h301)) & (mav_csr_write_csr_addr != 12'h304)) & (mav_csr_write_csr_addr != 12'h305)) & (mav_csr_write_csr_addr != 12'h306)) & (mav_csr_write_csr_addr != 12'h340)) & (mav_csr_write_csr_addr != 12'h341)) & (mav_csr_write_csr_addr != 12'h342)) & (mav_csr_write_csr_addr != 12'h343)) & (mav_csr_write_csr_addr != 12'h344)) & (mav_csr_write_csr_addr != 12'hb00)) & (mav_csr_write_csr_addr != 12'hb02)) & (mav_csr_write_csr_addr != 12'hb80)) & (mav_csr_write_csr_addr != 12'hb82)) & (mav_csr_write_csr_addr != 12'h7a0)) & (mav_csr_write_csr_addr != 12'h7a1)) & (mav_csr_write_csr_addr != 12'h7a2)) & (mav_csr_write_csr_addr != 12'h7a3));
  assign mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d590 = (((mav_csr_write_csr_addr_ULT_0xB03___d577 | (~|mav_csr_write_csr_addr_ULE_0xB1F___d578)) & (mav_csr_write_csr_addr_ULT_0xB83___d581 | (~|mav_csr_write_csr_addr_ULE_0xB9F___d582))) & (mav_csr_write_csr_addr_ULT_0x323___d585 | (~|mav_csr_write_csr_addr_ULE_0x33F___d586)));
  assign mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d642 = (((((((mav_csr_write_csr_addr_ULT_0xB03___d577 | (~|mav_csr_write_csr_addr_ULE_0xB1F___d578)) & (mav_csr_write_csr_addr_ULT_0xB83___d581 | (~|mav_csr_write_csr_addr_ULE_0xB9F___d582))) & (mav_csr_write_csr_addr_ULT_0x323___d585 | (~|mav_csr_write_csr_addr_ULE_0x33F___d586))) & (mav_csr_write_csr_addr != 12'hf11)) & (mav_csr_write_csr_addr != 12'hf12)) & (mav_csr_write_csr_addr != 12'hf13)) & (mav_csr_write_csr_addr != 12'hf14));
  assign mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d730 = (((mav_csr_write_csr_addr_ULT_0xB03___d577 | (~|mav_csr_write_csr_addr_ULE_0xB1F___d578)) & (mav_csr_write_csr_addr_ULT_0xB83___d581 | (~|mav_csr_write_csr_addr_ULE_0xB9F___d582))) & mav_csr_write_csr_addr_ULT_0x323_85_OR_NOT_mav_ETC___d728);
  assign x__h8231 = (x__h8261 | val__h8250);
  assign x__h8244 = (x__h8231 & y__h8245);
  assign x__h8261 = (csr_mstatus_rg_mstatus & y__h8262);
  assign y__h8245 = (~ mask__h8232);
  assign y__h8262 = (~ mask__h8249);
  assign RTL__DOT__csr_regfile__DOT__rg_state = rg_state;
  assign RTL__DOT__csr_regfile__DOT__rg_nmi = rg_nmi;

  always @(x__h8067 or EN_csr_trap_actions or MUX_csr_mstatus_rg_mstatus$write_1__VAL_3 or EN_csr_ret_actions or wordxl1__h4038 or MUX_csr_mstatus_rg_mstatus$write_1__SEL_2 or WILL_FIRE_RL_rl_reset_start) case (1'b1)
    WILL_FIRE_RL_rl_reset_start: csr_mstatus_rg_mstatus$D_IN = 32'h00000000;
    MUX_csr_mstatus_rg_mstatus$write_1__SEL_2: csr_mstatus_rg_mstatus$D_IN = wordxl1__h4038;
    EN_csr_ret_actions: csr_mstatus_rg_mstatus$D_IN = MUX_csr_mstatus_rg_mstatus$write_1__VAL_3;
    EN_csr_trap_actions: csr_mstatus_rg_mstatus$D_IN = x__h8067;
    default: csr_mstatus_rg_mstatus$D_IN = 32'haaaaaaaa;
  endcase

  always @(MUX_rg_mcause$write_1__VAL_3 or EN_csr_trap_actions or MUX_rg_mcause$write_1__VAL_2 or MUX_rg_mcause$write_1__SEL_2 or WILL_FIRE_RL_rl_reset_start) case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mcause$D_IN = 5'h00;
    MUX_rg_mcause$write_1__SEL_2: rg_mcause$D_IN = MUX_rg_mcause$write_1__VAL_2;
    EN_csr_trap_actions: rg_mcause$D_IN = MUX_rg_mcause$write_1__VAL_3;
    default: rg_mcause$D_IN = 5'h0a;
  endcase

  always @(rg_minstret or rg_mcycle or rg_tdata2 or rg_tdata1 or rg_tselect or csr_mip$fv_read or rg_mtval or rg_mcause or x__h8085 or rg_mscratch or rg_mcounteren or rg_mtvec or csr_mie$fv_read or csr_mstatus_rg_mstatus or rg_tdata3 or read_csr_csr_addr) case (read_csr_csr_addr)
    12'h300: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = csr_mstatus_rg_mstatus;
    12'h301: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = 32'h40100100;
    12'h304: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = csr_mie$fv_read;
    12'h305: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = {rg_mtvec[30:1], 1'b0, rg_mtvec[0]};
    12'h306: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = {29'h00000000, rg_mcounteren};
    12'h340: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = rg_mscratch;
    12'h341: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = x__h8085;
    12'h342: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = {rg_mcause[4], 27'h0000000, rg_mcause[3:0]};
    12'h343: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = rg_mtval;
    12'h344: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = csr_mip$fv_read;
    12'h7a0: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = rg_tselect;
    12'h7a1: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = rg_tdata1;
    12'h7a2: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = rg_tdata2;
    12'hb00: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = rg_mcycle[31:0];
    12'hc00: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = rg_mcycle[31:0];
    12'hb02: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = rg_minstret[31:0];
    12'hc02: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = rg_minstret[31:0];
    12'hb80: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = rg_mcycle[63:32];
    12'hc80: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = rg_mcycle[63:32];
    12'hb82: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = rg_minstret[63:32];
    12'hc82: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = rg_minstret[63:32];
    12'hf11: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = 32'h00000000;
    12'hf12: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = 32'h00000000;
    12'hf13: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = 32'h00000000;
    12'hf14: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = 32'h00000000;
    default: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d220 = rg_tdata3;
  endcase

  always @(rg_minstret or rg_mcycle or rg_tdata2 or rg_tdata1 or rg_tselect or csr_mip$fv_read or rg_mtval or rg_mcause or x__h8085 or rg_mscratch or rg_mcounteren or rg_mtvec or csr_mie$fv_read or csr_mstatus_rg_mstatus or rg_tdata3 or read_csr_port2_csr_addr) case (read_csr_port2_csr_addr)
    12'h300: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = csr_mstatus_rg_mstatus;
    12'h301: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = 32'h40100100;
    12'h304: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = csr_mie$fv_read;
    12'h305: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = {rg_mtvec[30:1], 1'b0, rg_mtvec[0]};
    12'h306: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = {29'h00000000, rg_mcounteren};
    12'h340: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = rg_mscratch;
    12'h341: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = x__h8085;
    12'h342: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = {rg_mcause[4], 27'h0000000, rg_mcause[3:0]};
    12'h343: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = rg_mtval;
    12'h344: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = csr_mip$fv_read;
    12'h7a0: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = rg_tselect;
    12'h7a1: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = rg_tdata1;
    12'h7a2: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = rg_tdata2;
    12'hb00: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = rg_mcycle[31:0];
    12'hc00: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = rg_mcycle[31:0];
    12'hb02: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = rg_minstret[31:0];
    12'hc02: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = rg_minstret[31:0];
    12'hb80: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = rg_mcycle[63:32];
    12'hc80: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = rg_mcycle[63:32];
    12'hb82: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = rg_minstret[63:32];
    12'hc82: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = rg_minstret[63:32];
    12'hf11: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = 32'h00000000;
    12'hf12: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = 32'h00000000;
    12'hf13: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = 32'h00000000;
    12'hf14: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = 32'h00000000;
    default: IF_read_csr_port2_csr_addr_EQ_0xC00_43_THEN_rg_ETC___d397 = rg_tdata3;
  endcase

  always @(rg_minstret or rg_mcycle or rg_tdata2 or rg_tdata1 or rg_tselect or csr_mip$fv_read or rg_mtval or rg_mcause or x__h8085 or rg_mscratch or rg_mcounteren or rg_mtvec or csr_mie$fv_read or csr_mstatus_rg_mstatus or rg_tdata3 or mav_read_csr_csr_addr) case (mav_read_csr_csr_addr)
    12'h300: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = csr_mstatus_rg_mstatus;
    12'h301: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = 32'h40100100;
    12'h304: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = csr_mie$fv_read;
    12'h305: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = {rg_mtvec[30:1], 1'b0, rg_mtvec[0]};
    12'h306: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = {29'h00000000, rg_mcounteren};
    12'h340: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = rg_mscratch;
    12'h341: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = x__h8085;
    12'h342: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = {rg_mcause[4], 27'h0000000, rg_mcause[3:0]};
    12'h343: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = rg_mtval;
    12'h344: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = csr_mip$fv_read;
    12'h7a0: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = rg_tselect;
    12'h7a1: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = rg_tdata1;
    12'h7a2: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = rg_tdata2;
    12'hb00: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = rg_mcycle[31:0];
    12'hc00: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = rg_mcycle[31:0];
    12'hb02: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = rg_minstret[31:0];
    12'hc02: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = rg_minstret[31:0];
    12'hb80: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = rg_mcycle[63:32];
    12'hc80: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = rg_mcycle[63:32];
    12'hb82: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = rg_minstret[63:32];
    12'hc82: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = rg_minstret[63:32];
    12'hf11: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = 32'h00000000;
    12'hf12: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = 32'h00000000;
    12'hf13: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = 32'h00000000;
    12'hf14: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = 32'h00000000;
    default: IF_mav_read_csr_csr_addr_EQ_0xC00_20_THEN_rg_m_ETC___d574 = rg_tdata3;
  endcase

  always @(result__h5357 or csr_mip$fav_write or v__h4742 or result__h4701 or v__h4571 or v__h4509 or csr_mie$fav_write or wordxl1__h4038 or mav_csr_write_word or mav_csr_write_csr_addr) case (mav_csr_write_csr_addr)
    12'h300: IF_mav_csr_write_csr_addr_EQ_0x300_91_THEN_0_C_ETC___d769 = wordxl1__h4038;
    12'h301: IF_mav_csr_write_csr_addr_EQ_0x300_91_THEN_0_C_ETC___d769 = 32'h40100100;
    12'h304: IF_mav_csr_write_csr_addr_EQ_0x300_91_THEN_0_C_ETC___d769 = csr_mie$fav_write;
    12'h305: IF_mav_csr_write_csr_addr_EQ_0x300_91_THEN_0_C_ETC___d769 = v__h4509;
    12'h306: IF_mav_csr_write_csr_addr_EQ_0x300_91_THEN_0_C_ETC___d769 = v__h4571;
    12'h340: IF_mav_csr_write_csr_addr_EQ_0x300_91_THEN_0_C_ETC___d769 = mav_csr_write_word;
    12'h343: IF_mav_csr_write_csr_addr_EQ_0x300_91_THEN_0_C_ETC___d769 = mav_csr_write_word;
    12'hb00: IF_mav_csr_write_csr_addr_EQ_0x300_91_THEN_0_C_ETC___d769 = mav_csr_write_word;
    12'hb02: IF_mav_csr_write_csr_addr_EQ_0x300_91_THEN_0_C_ETC___d769 = mav_csr_write_word;
    12'hb80: IF_mav_csr_write_csr_addr_EQ_0x300_91_THEN_0_C_ETC___d769 = mav_csr_write_word;
    12'hb82: IF_mav_csr_write_csr_addr_EQ_0x300_91_THEN_0_C_ETC___d769 = mav_csr_write_word;
    12'h341: IF_mav_csr_write_csr_addr_EQ_0x300_91_THEN_0_C_ETC___d769 = result__h4701;
    12'h342: IF_mav_csr_write_csr_addr_EQ_0x300_91_THEN_0_C_ETC___d769 = v__h4742;
    12'h344: IF_mav_csr_write_csr_addr_EQ_0x300_91_THEN_0_C_ETC___d769 = csr_mip$fav_write;
    12'h7a0: IF_mav_csr_write_csr_addr_EQ_0x300_91_THEN_0_C_ETC___d769 = 32'h00000000;
    12'h7a1: IF_mav_csr_write_csr_addr_EQ_0x300_91_THEN_0_C_ETC___d769 = result__h5357;
    default: IF_mav_csr_write_csr_addr_EQ_0x300_91_THEN_0_C_ETC___d769 = mav_csr_write_word;
  endcase

  always @(posedge CLK) begin
    if ((RST_N == 1'b0)) begin
      cfg_verbosity <= 4'h0;
      csr_mstatus_rg_mstatus <= 32'h00000000;
      rg_mcycle <= 64'h0000000000000000;
      rg_minstret <= 64'h0000000000000000;
      rg_nmi <= 1'b0;
      rg_state <= 1'b0;
    end
    else begin
      if (cfg_verbosity$EN) cfg_verbosity <= cfg_verbosity$D_IN;
      if (csr_mstatus_rg_mstatus$EN) csr_mstatus_rg_mstatus <= csr_mstatus_rg_mstatus$D_IN;
      if (rg_mcycle$EN) rg_mcycle <= rg_mcycle$D_IN;
      if (rg_minstret$EN) rg_minstret <= rg_minstret$D_IN;
      if (rg_nmi$EN) rg_nmi <= rg_nmi$D_IN;
      if (rg_state$EN) rg_state <= rg_state$D_IN;
    end
    if (rg_dcsr$EN) rg_dcsr <= rg_dcsr$D_IN;
    if (rg_dpc$EN) rg_dpc <= rg_dpc$D_IN;
    if (rg_dscratch0$EN) rg_dscratch0 <= rg_dscratch0$D_IN;
    if (rg_dscratch1$EN) rg_dscratch1 <= rg_dscratch1$D_IN;
    if (rg_mcause$EN) rg_mcause <= rg_mcause$D_IN;
    if (rg_mcounteren$EN) rg_mcounteren <= rg_mcounteren$D_IN;
    if (rg_mepc$EN) rg_mepc <= rg_mepc$D_IN;
    if (rg_mscratch$EN) rg_mscratch <= rg_mscratch$D_IN;
    if (rg_mtval$EN) rg_mtval <= rg_mtval$D_IN;
    if (rg_mtvec$EN) rg_mtvec <= rg_mtvec$D_IN;
    if (rg_nmi_vector$EN) rg_nmi_vector <= rg_nmi_vector$D_IN;
    if (rg_tdata1$EN) rg_tdata1 <= rg_tdata1$D_IN;
    if (rg_tdata2$EN) rg_tdata2 <= rg_tdata2$D_IN;
    if (rg_tdata3$EN) rg_tdata3 <= rg_tdata3$D_IN;
    if (rg_tselect$EN) rg_tselect <= rg_tselect$D_IN;
  end

  always @(negedge CLK) begin
    #0;
    if ((RST_N != 1'b0)) if (EN_debug) $display("mstatus = 0x%0h", csr_mstatus_rg_mstatus);
    if ((RST_N != 1'b0)) if (EN_debug) $display("mip     = 0x%0h", csr_mip$fv_read);
    if ((RST_N != 1'b0)) if (EN_debug) $display("mie     = 0x%0h", csr_mie$fv_read);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $display("%0d: CSR_Regfile.csr_trap_actions:", rg_mcycle);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $display("    from priv %0d  pc 0x%0h  interrupt %0d  exc_code %0d  xtval 0x%0h", csr_trap_actions_from_priv, csr_trap_actions_pc, csr_trap_actions_interrupt, csr_trap_actions_exc_code, csr_trap_actions_xtval);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write("    priv %0d: ", 2'h3);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" ip: 0x%0h", csr_mip$fv_read);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" ie: 0x%0h", csr_mie$fv_read);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" edeleg: 0x%0h", 16'h0000);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" ideleg: 0x%0h", 12'h000);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" cause:");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && rg_mcause[4]) && (rg_mcause[3:0] == 4'h0))) $write("USER_SW_INTERRUPT");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && rg_mcause[4]) && (rg_mcause[3:0] == 4'h1))) $write("SUPERVISOR_SW_INTERRUPT");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && rg_mcause[4]) && (rg_mcause[3:0] == 4'h2))) $write("HYPERVISOR_SW_INTERRUPT");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && rg_mcause[4]) && (rg_mcause[3:0] == 4'h3))) $write("MACHINE_SW_INTERRUPT");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && rg_mcause[4]) && (rg_mcause[3:0] == 4'h4))) $write("USER_TIMER_INTERRUPT");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && rg_mcause[4]) && (rg_mcause[3:0] == 4'h5))) $write("SUPERVISOR_TIMER_INTERRUPT");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && rg_mcause[4]) && (rg_mcause[3:0] == 4'h6))) $write("HYPERVISOR_TIMER_INTERRUPT");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && rg_mcause[4]) && (rg_mcause[3:0] == 4'h7))) $write("MACHINE_TIMER_INTERRUPT");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && rg_mcause[4]) && (rg_mcause[3:0] == 4'h8))) $write("USER_EXTERNAL_INTERRUPT");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && rg_mcause[4]) && (rg_mcause[3:0] == 4'h9))) $write("SUPERVISOR_EXTERNAL_INTERRUPT");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && rg_mcause[4]) && (rg_mcause[3:0] == 4'ha))) $write("HYPERVISOR_EXTERNAL_INTERRUPT");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && rg_mcause[4]) && (rg_mcause[3:0] == 4'hb))) $write("MACHINE_EXTERNAL_INTERRUPT");
    if ((RST_N != 1'b0)) if (((((((((((((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && rg_mcause[4]) && (rg_mcause[3:0] != 4'h0)) && (rg_mcause[3:0] != 4'h1)) && (rg_mcause[3:0] != 4'h2)) && (rg_mcause[3:0] != 4'h3)) && (rg_mcause[3:0] != 4'h4)) && (rg_mcause[3:0] != 4'h5)) && (rg_mcause[3:0] != 4'h6)) && (rg_mcause[3:0] != 4'h7)) && (rg_mcause[3:0] != 4'h8)) && (rg_mcause[3:0] != 4'h9)) && (rg_mcause[3:0] != 4'ha)) && (rg_mcause[3:0] != 4'hb))) $write("unknown interrupt Exc_Code %d", rg_mcause[3:0]);
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!rg_mcause[4])) && (rg_mcause[3:0] == 4'h0))) $write("INSTRUCTION_ADDR_MISALIGNED");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!rg_mcause[4])) && (rg_mcause[3:0] == 4'h1))) $write("INSTRUCTION_ACCESS_FAULT");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!rg_mcause[4])) && (rg_mcause[3:0] == 4'h2))) $write("ILLEGAL_INSTRUCTION");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!rg_mcause[4])) && (rg_mcause[3:0] == 4'h3))) $write("BREAKPOINT");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!rg_mcause[4])) && (rg_mcause[3:0] == 4'h4))) $write("LOAD_ADDR_MISALIGNED");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!rg_mcause[4])) && (rg_mcause[3:0] == 4'h5))) $write("LOAD_ACCESS_FAULT");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!rg_mcause[4])) && (rg_mcause[3:0] == 4'h6))) $write("STORE_AMO_ADDR_MISALIGNED");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!rg_mcause[4])) && (rg_mcause[3:0] == 4'h7))) $write("STORE_AMO_ACCESS_FAULT");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!rg_mcause[4])) && (rg_mcause[3:0] == 4'h8))) $write("ECALL_FROM_U");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!rg_mcause[4])) && (rg_mcause[3:0] == 4'h9))) $write("ECALL_FROM_S");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!rg_mcause[4])) && (rg_mcause[3:0] == 4'hb))) $write("ECALL_FROM_M");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!rg_mcause[4])) && (rg_mcause[3:0] == 4'hc))) $write("INSTRUCTION_PAGE_FAULT");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!rg_mcause[4])) && (rg_mcause[3:0] == 4'hd))) $write("LOAD_PAGE_FAULT");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!rg_mcause[4])) && (rg_mcause[3:0] == 4'hf))) $write("STORE_AMO_PAGE_FAULT");
    if ((RST_N != 1'b0)) if (((((((((((((((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!rg_mcause[4])) && (rg_mcause[3:0] != 4'h0)) && (rg_mcause[3:0] != 4'h1)) && (rg_mcause[3:0] != 4'h2)) && (rg_mcause[3:0] != 4'h3)) && (rg_mcause[3:0] != 4'h4)) && (rg_mcause[3:0] != 4'h5)) && (rg_mcause[3:0] != 4'h6)) && (rg_mcause[3:0] != 4'h7)) && (rg_mcause[3:0] != 4'h8)) && (rg_mcause[3:0] != 4'h9)) && (rg_mcause[3:0] != 4'hb)) && (rg_mcause[3:0] != 4'hc)) && (rg_mcause[3:0] != 4'hd)) && (rg_mcause[3:0] != 4'hf))) $write("unknown trap Exc_Code %d", rg_mcause[3:0]);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $display("");
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write("        ");
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" status: 0x%0h", csr_mstatus_rg_mstatus);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" tvec: 0x%0h", {rg_mtvec[30:1], 1'b0, rg_mtvec[0]});
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" epc: 0x%0h", rg_mepc);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" tval: 0x%0h", rg_mtval);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $display("");
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write("    Return: new pc 0x%0h  ", x__h5843);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" new mstatus:");
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write("MStatus{", "sd:%0d", 1'b0);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write("");
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" tsr:%0d", csr_mstatus_rg_mstatus[22]);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" tw:%0d", csr_mstatus_rg_mstatus[21]);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" tvm:%0d", csr_mstatus_rg_mstatus[20]);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" mxr:%0d", csr_mstatus_rg_mstatus[19]);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" sum:%0d", csr_mstatus_rg_mstatus[18]);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" mprv:%0d", csr_mstatus_rg_mstatus[17]);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" xs:%0d", 2'h0);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" fs:%0d", 2'h0);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" mpp:%0d", mpp__h7337);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" spp:%0d", 1'b0);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" pies:%0d_%0d%0d", csr_mstatus_rg_mstatus[3], 1'b0, 1'b0);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" ies:%0d_%0d%0d", 1'b0, 1'b0, 1'b0);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write("}");
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" new xcause:");
    if ((RST_N != 1'b0)) if (((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!csr_trap_actions_nmi)) && csr_trap_actions_interrupt) && (exc_code__h7909 == 4'h0))) $write("USER_SW_INTERRUPT");
    if ((RST_N != 1'b0)) if (((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!csr_trap_actions_nmi)) && csr_trap_actions_interrupt) && (exc_code__h7909 == 4'h1))) $write("SUPERVISOR_SW_INTERRUPT");
    if ((RST_N != 1'b0)) if (((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!csr_trap_actions_nmi)) && csr_trap_actions_interrupt) && (exc_code__h7909 == 4'h2))) $write("HYPERVISOR_SW_INTERRUPT");
    if ((RST_N != 1'b0)) if (((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!csr_trap_actions_nmi)) && csr_trap_actions_interrupt) && (exc_code__h7909 == 4'h3))) $write("MACHINE_SW_INTERRUPT");
    if ((RST_N != 1'b0)) if (((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!csr_trap_actions_nmi)) && csr_trap_actions_interrupt) && (exc_code__h7909 == 4'h4))) $write("USER_TIMER_INTERRUPT");
    if ((RST_N != 1'b0)) if (((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!csr_trap_actions_nmi)) && csr_trap_actions_interrupt) && (exc_code__h7909 == 4'h5))) $write("SUPERVISOR_TIMER_INTERRUPT");
    if ((RST_N != 1'b0)) if (((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!csr_trap_actions_nmi)) && csr_trap_actions_interrupt) && (exc_code__h7909 == 4'h6))) $write("HYPERVISOR_TIMER_INTERRUPT");
    if ((RST_N != 1'b0)) if (((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!csr_trap_actions_nmi)) && csr_trap_actions_interrupt) && (exc_code__h7909 == 4'h7))) $write("MACHINE_TIMER_INTERRUPT");
    if ((RST_N != 1'b0)) if (((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!csr_trap_actions_nmi)) && csr_trap_actions_interrupt) && (exc_code__h7909 == 4'h8))) $write("USER_EXTERNAL_INTERRUPT");
    if ((RST_N != 1'b0)) if (((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!csr_trap_actions_nmi)) && csr_trap_actions_interrupt) && (exc_code__h7909 == 4'h9))) $write("SUPERVISOR_EXTERNAL_INTERRUPT");
    if ((RST_N != 1'b0)) if (((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!csr_trap_actions_nmi)) && csr_trap_actions_interrupt) && (exc_code__h7909 == 4'ha))) $write("HYPERVISOR_EXTERNAL_INTERRUPT");
    if ((RST_N != 1'b0)) if (((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (!csr_trap_actions_nmi)) && csr_trap_actions_interrupt) && (exc_code__h7909 == 4'hb))) $write("MACHINE_EXTERNAL_INTERRUPT");
    if ((RST_N != 1'b0)) if (((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && NOT_csr_trap_actions_nmi_97_AND_csr_trap_actio_ETC___d974)) $write("unknown interrupt Exc_Code %d", exc_code__h7909);
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (csr_trap_actions_nmi || (!csr_trap_actions_interrupt))) && (exc_code__h7909 == 4'h0))) $write("INSTRUCTION_ADDR_MISALIGNED");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (csr_trap_actions_nmi || (!csr_trap_actions_interrupt))) && (exc_code__h7909 == 4'h1))) $write("INSTRUCTION_ACCESS_FAULT");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (csr_trap_actions_nmi || (!csr_trap_actions_interrupt))) && (exc_code__h7909 == 4'h2))) $write("ILLEGAL_INSTRUCTION");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (csr_trap_actions_nmi || (!csr_trap_actions_interrupt))) && (exc_code__h7909 == 4'h3))) $write("BREAKPOINT");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (csr_trap_actions_nmi || (!csr_trap_actions_interrupt))) && (exc_code__h7909 == 4'h4))) $write("LOAD_ADDR_MISALIGNED");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (csr_trap_actions_nmi || (!csr_trap_actions_interrupt))) && (exc_code__h7909 == 4'h5))) $write("LOAD_ACCESS_FAULT");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (csr_trap_actions_nmi || (!csr_trap_actions_interrupt))) && (exc_code__h7909 == 4'h6))) $write("STORE_AMO_ADDR_MISALIGNED");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (csr_trap_actions_nmi || (!csr_trap_actions_interrupt))) && (exc_code__h7909 == 4'h7))) $write("STORE_AMO_ACCESS_FAULT");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (csr_trap_actions_nmi || (!csr_trap_actions_interrupt))) && (exc_code__h7909 == 4'h8))) $write("ECALL_FROM_U");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (csr_trap_actions_nmi || (!csr_trap_actions_interrupt))) && (exc_code__h7909 == 4'h9))) $write("ECALL_FROM_S");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (csr_trap_actions_nmi || (!csr_trap_actions_interrupt))) && (exc_code__h7909 == 4'hb))) $write("ECALL_FROM_M");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (csr_trap_actions_nmi || (!csr_trap_actions_interrupt))) && (exc_code__h7909 == 4'hc))) $write("INSTRUCTION_PAGE_FAULT");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (csr_trap_actions_nmi || (!csr_trap_actions_interrupt))) && (exc_code__h7909 == 4'hd))) $write("LOAD_PAGE_FAULT");
    if ((RST_N != 1'b0)) if ((((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && (csr_trap_actions_nmi || (!csr_trap_actions_interrupt))) && (exc_code__h7909 == 4'hf))) $write("STORE_AMO_PAGE_FAULT");
    if ((RST_N != 1'b0)) if (((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733) && csr_trap_actions_nmi_OR_NOT_csr_trap_actions_i_ETC___d1025)) $write("unknown trap Exc_Code %d", exc_code__h7909);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $write(" new priv %0d", 2'h3);
    if ((RST_N != 1'b0)) if ((EN_csr_trap_actions && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $display("");
    if ((RST_N != 1'b0)) if (((EN_mav_csr_write && mav_csr_write_csr_addr_ULT_0xB03_77_OR_NOT_mav_ETC___d730) && NOT_cfg_verbosity_read__31_ULE_1_32___d733)) $display("%0d: ERROR: CSR-write addr 0x%0h val 0x%0h not successful", rg_mcycle, mav_csr_write_csr_addr, mav_csr_write_word);
    if ((RST_N != 1'b0)) if (NOT_cfg_verbosity_read__31_ULE_1_32___d733) $display("%0d: CSR_RegFile: m_external_interrupt_req: %x", rg_mcycle, m_external_interrupt_req_set_not_clear);
    if ((RST_N != 1'b0)) if (NOT_cfg_verbosity_read__31_ULE_1_32___d733) $display("%0d: CSR_RegFile: s_external_interrupt_req: %x", rg_mcycle, s_external_interrupt_req_set_not_clear);
    if ((RST_N != 1'b0)) if (NOT_cfg_verbosity_read__31_ULE_1_32___d733) $display("%0d: CSR_RegFile: software_interrupt_req: %x", rg_mcycle, software_interrupt_req_set_not_clear);
    if ((RST_N != 1'b0)) if (NOT_cfg_verbosity_read__31_ULE_1_32___d733) $display("%0d: CSR_RegFile: timer_interrupt_req: %x", rg_mcycle, timer_interrupt_req_set_not_clear);
  end

  mkCSR_MIE csr_mie(CLK, RST_N, csr_mie$EN_reset, csr_mie$fv_read, csr_mie$fav_write_misa, csr_mie$fav_write_wordxl, csr_mie$EN_fav_write, csr_mie$fav_write);

  mkCSR_MIP csr_mip(CLK, RST_N, csr_mip$EN_reset, csr_mip$fv_read, csr_mip$fav_write_misa, csr_mip$fav_write_wordxl, csr_mip$EN_fav_write, csr_mip$fav_write, csr_mip$m_external_interrupt_req_req, csr_mip$s_external_interrupt_req_req, csr_mip$software_interrupt_req_req, csr_mip$timer_interrupt_req_req);

  \FIFO20[wrapper.RTL.csr_regfile.f_reset_rsps]  f_reset_rsps(CLK, RST_N, f_reset_rsps$ENQ, f_reset_rsps$FULL_N, f_reset_rsps$DEQ, f_reset_rsps$EMPTY_N, f_reset_rsps$CLR, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg, /* Empty */, /* Empty */, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */);

  mkSoC_Map soc_map(CLK, RST_N, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, soc_map$m_is_mem_addr_addr, /* Empty */, soc_map$m_is_IO_addr_addr, /* Empty */, soc_map$m_is_near_mem_IO_addr_addr, /* Empty */, /* Empty */, soc_map$m_mtvec_reset_value, soc_map$m_nmivec_reset_value);
endmodule  /* mkCSR_RegFile */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3795. */
module \FIFO2[wrapper.RTL.f_reset_reqs] (CLK, RST, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input D_IN;
  input ENQ;
  output FULL_N;
  output D_OUT;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;
  parameter width = 32'h00000001;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire D_IN;
  wire D_OUT;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire d0d1;
  wire d0di;
  wire d0h;
  wire d1di;
  reg data0_reg;
  reg data1_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign D_OUT = data0_reg;
  assign d0di = ((ENQ & (~|empty_reg)) | ((ENQ & DEQ) & full_reg));
  assign d0d1 = (DEQ & (~|full_reg));
  assign d0h = ((((~|DEQ) & (~|ENQ)) | ((~|DEQ) & empty_reg)) | ((~|ENQ) & full_reg));
  assign d1di = (ENQ & empty_reg);
  assign RTL__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if ((DEQ && (!ENQ))) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin
    data0_reg <= ((({d0di} & D_IN) | ({d0d1} & data1_reg)) | ({d0h} & data0_reg));
    data1_reg <= (d1di ? D_IN : data1_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO2: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO2: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO2[wrapper.RTL.f_reset_reqs]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3795. */
module \FIFO2[wrapper.RTL.f_reset_rsps] (CLK, RST, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input D_IN;
  input ENQ;
  output FULL_N;
  output D_OUT;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;
  parameter width = 32'h00000001;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire D_IN;
  wire D_OUT;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire d0d1;
  wire d0di;
  wire d0h;
  wire d1di;
  reg data0_reg;
  reg data1_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign D_OUT = data0_reg;
  assign d0di = ((ENQ & (~|empty_reg)) | ((ENQ & DEQ) & full_reg));
  assign d0d1 = (DEQ & (~|full_reg));
  assign d0h = ((((~|DEQ) & (~|ENQ)) | ((~|DEQ) & empty_reg)) | ((~|ENQ) & full_reg));
  assign d1di = (ENQ & empty_reg);
  assign RTL__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if ((DEQ && (!ENQ))) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin
    data0_reg <= ((({d0di} & D_IN) | ({d0d1} & data1_reg)) | ({d0h} & data0_reg));
    data1_reg <= (d1di ? D_IN : data1_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO2: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO2: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO2[wrapper.RTL.f_reset_rsps]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 12243. */
module mkGPR_RegFile(CLK, RST_N, EN_server_reset_request_put, RDY_server_reset_request_put, EN_server_reset_response_get, RDY_server_reset_response_get, read_rs1_rs1, read_rs1, read_rs1_port2_rs1, read_rs1_port2, read_rs2_rs2, read_rs2, write_rd_rd, write_rd_rd_val, EN_write_rd, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_2_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_24_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_30_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_26_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_13_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_19_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_5_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_20_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_28_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_4_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_11_, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_8_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_3_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_9_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_14_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_16_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_17_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_18_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_21_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_22_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_23_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_25_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_27_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_29_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_31_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_6_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_1_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_10_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_7_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_12_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_15_);
  input CLK;
  input RST_N;
  input EN_server_reset_request_put;
  output RDY_server_reset_request_put;
  input EN_server_reset_response_get;
  output RDY_server_reset_response_get;
  input [4:0] read_rs1_rs1;
  output [31:0] read_rs1;
  input [4:0] read_rs1_port2_rs1;
  output [31:0] read_rs1_port2;
  input [4:0] read_rs2_rs2;
  output [31:0] read_rs2;
  input [4:0] write_rd_rd;
  input [31:0] write_rd_rd_val;
  input EN_write_rd;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_2_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_24_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_30_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_26_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_13_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_19_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_5_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_20_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_28_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_4_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_11_;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_8_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_3_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_9_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_14_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_16_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_17_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_18_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_21_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_22_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_23_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_25_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_27_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_29_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_31_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_6_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_1_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_10_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_7_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_12_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_15_;

  wire CAN_FIRE_RL_rl_reset_loop;
  wire CAN_FIRE_RL_rl_reset_start;
  wire CAN_FIRE_server_reset_request_put;
  wire CAN_FIRE_server_reset_response_get;
  wire CAN_FIRE_write_rd;
  wire CLK;
  wire EN_server_reset_request_put;
  wire EN_server_reset_response_get;
  wire EN_write_rd;
  wire RDY_server_reset_request_put;
  wire RDY_server_reset_response_get;
  wire RST_N;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_10_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_11_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_12_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_13_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_14_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_15_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_16_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_17_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_18_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_19_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_1_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_20_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_21_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_22_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_23_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_24_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_25_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_26_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_27_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_28_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_29_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_2_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_30_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_31_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_3_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_4_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_5_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_6_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_7_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_8_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_9_;
  wire WILL_FIRE_RL_rl_reset_loop;
  wire WILL_FIRE_RL_rl_reset_start;
  wire WILL_FIRE_server_reset_request_put;
  wire WILL_FIRE_server_reset_response_get;
  wire WILL_FIRE_write_rd;
  wire f_reset_rsps$CLR;
  wire f_reset_rsps$DEQ;
  wire f_reset_rsps$EMPTY_N;
  wire f_reset_rsps$ENQ;
  wire f_reset_rsps$FULL_N;
  wire [31:0] read_rs1;
  wire [31:0] read_rs1_port2;
  wire [4:0] read_rs1_port2_rs1;
  wire [4:0] read_rs1_rs1;
  wire [31:0] read_rs2;
  wire [4:0] read_rs2_rs2;
  wire [4:0] regfile$ADDR_1;
  wire [4:0] regfile$ADDR_2;
  wire [4:0] regfile$ADDR_3;
  wire [4:0] regfile$ADDR_4;
  wire [4:0] regfile$ADDR_5;
  wire [4:0] regfile$ADDR_IN;
  wire [31:0] regfile$D_IN;
  wire [31:0] regfile$D_OUT_1;
  wire [31:0] regfile$D_OUT_2;
  wire [31:0] regfile$D_OUT_3;
  wire regfile$WE;
  reg [1:0] rg_state;
  reg [1:0] rg_state$D_IN;
  wire rg_state$EN;
  wire [4:0] write_rd_rd;
  wire [31:0] write_rd_rd_val;


  assign CAN_FIRE_write_rd = 1'b1;
  assign f_reset_rsps$CLR = 1'b0;
  assign regfile$ADDR_4 = 5'h00;
  assign regfile$ADDR_5 = 5'h00;

  assign read_rs1 = ((read_rs1_rs1 == 5'h00) ? 32'h00000000 : regfile$D_OUT_3);
  assign read_rs1_port2 = ((read_rs1_port2_rs1 == 5'h00) ? 32'h00000000 : regfile$D_OUT_2);
  assign read_rs2 = ((read_rs2_rs2 == 5'h00) ? 32'h00000000 : regfile$D_OUT_1);
  assign CAN_FIRE_RL_rl_reset_start = (rg_state == 2'h0);
  assign WILL_FIRE_RL_rl_reset_start = (rg_state == 2'h0);
  assign CAN_FIRE_RL_rl_reset_loop = (rg_state == 2'h1);
  assign WILL_FIRE_RL_rl_reset_loop = (rg_state == 2'h1);
  assign RDY_server_reset_request_put = f_reset_rsps$FULL_N;
  assign CAN_FIRE_server_reset_request_put = f_reset_rsps$FULL_N;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put;
  assign RDY_server_reset_response_get = ((rg_state == 2'h2) & f_reset_rsps$EMPTY_N);
  assign CAN_FIRE_server_reset_response_get = ((rg_state == 2'h2) & f_reset_rsps$EMPTY_N);
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get;
  assign WILL_FIRE_write_rd = EN_write_rd;
  assign rg_state$EN = ((EN_server_reset_request_put | WILL_FIRE_RL_rl_reset_start) | WILL_FIRE_RL_rl_reset_loop);
  assign f_reset_rsps$ENQ = EN_server_reset_request_put;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get;
  assign regfile$ADDR_1 = read_rs2_rs2;
  assign regfile$ADDR_2 = read_rs1_port2_rs1;
  assign regfile$ADDR_3 = read_rs1_rs1;
  assign regfile$ADDR_IN = write_rd_rd;
  assign regfile$D_IN = write_rd_rd_val;
  assign regfile$WE = (EN_write_rd & (write_rd_rd != 5'h00));

  always @(WILL_FIRE_RL_rl_reset_start or WILL_FIRE_RL_rl_reset_loop or EN_server_reset_request_put) case (1'b1)
    EN_server_reset_request_put: rg_state$D_IN = 2'h0;
    WILL_FIRE_RL_rl_reset_loop: rg_state$D_IN = 2'h2;
    WILL_FIRE_RL_rl_reset_start: rg_state$D_IN = 2'h1;
    default: rg_state$D_IN = 2'h2;
  endcase

  always @(posedge CLK) if ((RST_N == 1'b0)) rg_state <= 2'h0;
  else if (rg_state$EN) rg_state <= rg_state$D_IN;

  \FIFO20[wrapper.RTL.gpr_regfile.f_reset_rsps]  f_reset_rsps(CLK, RST_N, f_reset_rsps$ENQ, f_reset_rsps$FULL_N, f_reset_rsps$DEQ, f_reset_rsps$EMPTY_N, f_reset_rsps$CLR, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */);

  \RegFile[wrapper.RTL.gpr_regfile.regfile]  regfile(CLK, regfile$ADDR_IN, regfile$D_IN, regfile$WE, regfile$ADDR_1, regfile$D_OUT_1, regfile$ADDR_2, regfile$D_OUT_2, regfile$ADDR_3, regfile$D_OUT_3, regfile$ADDR_4, /* Empty */, regfile$ADDR_5, /* Empty */, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_17_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_14_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_9_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_3_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_8_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_11_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_4_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_20_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_5_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_19_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_13_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_26_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_30_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_24_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_2_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_28_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_16_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_18_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_21_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_22_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_23_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_25_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_27_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_29_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_31_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_6_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_1_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_10_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_7_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_12_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_15_);
endmodule  /* mkGPR_RegFile */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 16391. */
module mkNear_Mem(CLK, RST_N, EN_server_reset_request_put, RDY_server_reset_request_put, EN_server_reset_response_get, RDY_server_reset_response_get, imem_req_f3, imem_req_addr, imem_req_priv, imem_req_sstatus_SUM, imem_req_mstatus_MXR, imem_req_satp, EN_imem_req, imem_valid, imem_is_i32_not_i16, imem_pc, imem_instr, imem_exc, imem_exc_code, imem_tval, imem_master_awvalid, imem_master_awid, imem_master_awaddr, imem_master_awlen, imem_master_awsize, imem_master_awburst, imem_master_awlock, imem_master_awcache, imem_master_awprot, imem_master_awqos, imem_master_awregion, imem_master_awready, imem_master_wvalid, imem_master_wdata, imem_master_wstrb, imem_master_wlast, imem_master_wready, imem_master_bvalid, imem_master_bid, imem_master_bresp, imem_master_bready, imem_master_arvalid, imem_master_arid, imem_master_araddr, imem_master_arlen, imem_master_arsize, imem_master_arburst, imem_master_arlock, imem_master_arcache, imem_master_arprot, imem_master_arqos, imem_master_arregion, imem_master_arready, imem_master_rvalid, imem_master_rid, imem_master_rdata, imem_master_rresp, imem_master_rlast, imem_master_rready, dmem_req_op, dmem_req_f3, dmem_req_addr, dmem_req_store_value, dmem_req_priv, dmem_req_sstatus_SUM, dmem_req_mstatus_MXR, dmem_req_satp, EN_dmem_req, dmem_valid, dmem_word64, dmem_st_amo_val, dmem_exc, dmem_exc_code, dmem_master_awvalid, dmem_master_awid, dmem_master_awaddr, dmem_master_awlen, dmem_master_awsize, dmem_master_awburst, dmem_master_awlock, dmem_master_awcache, dmem_master_awprot, dmem_master_awqos, dmem_master_awregion, dmem_master_awready, dmem_master_wvalid, dmem_master_wdata, dmem_master_wstrb, dmem_master_wlast, dmem_master_wready, dmem_master_bvalid, dmem_master_bid, dmem_master_bresp, dmem_master_bready, dmem_master_arvalid, dmem_master_arid, dmem_master_araddr, dmem_master_arlen, dmem_master_arsize, dmem_master_arburst, dmem_master_arlock, dmem_master_arcache, dmem_master_arprot, dmem_master_arqos, dmem_master_arregion, dmem_master_arready, dmem_master_rvalid, dmem_master_rid, dmem_master_rdata, dmem_master_rresp, dmem_master_rlast, dmem_master_rready, EN_server_fence_i_request_put, RDY_server_fence_i_request_put, EN_server_fence_i_response_get, RDY_server_fence_i_response_get, server_fence_request_put, EN_server_fence_request_put, RDY_server_fence_request_put, EN_server_fence_response_get, RDY_server_fence_response_get, EN_sfence_vma, RDY_sfence_vma, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__rg_pa, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__rg_addr, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg);
  input CLK;
  input RST_N;
  input EN_server_reset_request_put;
  output RDY_server_reset_request_put;
  input EN_server_reset_response_get;
  output RDY_server_reset_response_get;
  input [2:0] imem_req_f3;
  input [31:0] imem_req_addr;
  input [1:0] imem_req_priv;
  input imem_req_sstatus_SUM;
  input imem_req_mstatus_MXR;
  input [31:0] imem_req_satp;
  input EN_imem_req;
  output imem_valid;
  output imem_is_i32_not_i16;
  output [31:0] imem_pc;
  output [31:0] imem_instr;
  output imem_exc;
  output [3:0] imem_exc_code;
  output [31:0] imem_tval;
  output imem_master_awvalid;
  output [3:0] imem_master_awid;
  output [63:0] imem_master_awaddr;
  output [7:0] imem_master_awlen;
  output [2:0] imem_master_awsize;
  output [1:0] imem_master_awburst;
  output imem_master_awlock;
  output [3:0] imem_master_awcache;
  output [2:0] imem_master_awprot;
  output [3:0] imem_master_awqos;
  output [3:0] imem_master_awregion;
  input imem_master_awready;
  output imem_master_wvalid;
  output [63:0] imem_master_wdata;
  output [7:0] imem_master_wstrb;
  output imem_master_wlast;
  input imem_master_wready;
  input imem_master_bvalid;
  input [3:0] imem_master_bid;
  input [1:0] imem_master_bresp;
  output imem_master_bready;
  output imem_master_arvalid;
  output [3:0] imem_master_arid;
  output [63:0] imem_master_araddr;
  output [7:0] imem_master_arlen;
  output [2:0] imem_master_arsize;
  output [1:0] imem_master_arburst;
  output imem_master_arlock;
  output [3:0] imem_master_arcache;
  output [2:0] imem_master_arprot;
  output [3:0] imem_master_arqos;
  output [3:0] imem_master_arregion;
  input imem_master_arready;
  input imem_master_rvalid;
  input [3:0] imem_master_rid;
  input [63:0] imem_master_rdata;
  input [1:0] imem_master_rresp;
  input imem_master_rlast;
  output imem_master_rready;
  input dmem_req_op;
  input [2:0] dmem_req_f3;
  input [31:0] dmem_req_addr;
  input [63:0] dmem_req_store_value;
  input [1:0] dmem_req_priv;
  input dmem_req_sstatus_SUM;
  input dmem_req_mstatus_MXR;
  input [31:0] dmem_req_satp;
  input EN_dmem_req;
  output dmem_valid;
  output [63:0] dmem_word64;
  output [63:0] dmem_st_amo_val;
  output dmem_exc;
  output [3:0] dmem_exc_code;
  output dmem_master_awvalid;
  output [3:0] dmem_master_awid;
  output [63:0] dmem_master_awaddr;
  output [7:0] dmem_master_awlen;
  output [2:0] dmem_master_awsize;
  output [1:0] dmem_master_awburst;
  output dmem_master_awlock;
  output [3:0] dmem_master_awcache;
  output [2:0] dmem_master_awprot;
  output [3:0] dmem_master_awqos;
  output [3:0] dmem_master_awregion;
  input dmem_master_awready;
  output dmem_master_wvalid;
  output [63:0] dmem_master_wdata;
  output [7:0] dmem_master_wstrb;
  output dmem_master_wlast;
  input dmem_master_wready;
  input dmem_master_bvalid;
  input [3:0] dmem_master_bid;
  input [1:0] dmem_master_bresp;
  output dmem_master_bready;
  output dmem_master_arvalid;
  output [3:0] dmem_master_arid;
  output [63:0] dmem_master_araddr;
  output [7:0] dmem_master_arlen;
  output [2:0] dmem_master_arsize;
  output [1:0] dmem_master_arburst;
  output dmem_master_arlock;
  output [3:0] dmem_master_arcache;
  output [2:0] dmem_master_arprot;
  output [3:0] dmem_master_arqos;
  output [3:0] dmem_master_arregion;
  input dmem_master_arready;
  input dmem_master_rvalid;
  input [3:0] dmem_master_rid;
  input [63:0] dmem_master_rdata;
  input [1:0] dmem_master_rresp;
  input dmem_master_rlast;
  output dmem_master_rready;
  input EN_server_fence_i_request_put;
  output RDY_server_fence_i_request_put;
  input EN_server_fence_i_response_get;
  output RDY_server_fence_i_response_get;
  input [7:0] server_fence_request_put;
  input EN_server_fence_request_put;
  output RDY_server_fence_request_put;
  input EN_server_fence_response_get;
  output RDY_server_fence_response_get;
  input EN_sfence_vma;
  output RDY_sfence_vma;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  output [31:0] RTL__DOT__near_mem__DOT__dcache__DOT__rg_pa;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output [31:0] RTL__DOT__near_mem__DOT__dcache__DOT__rg_addr;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;

  wire CAN_FIRE_RL_rl_reset;
  wire CAN_FIRE_RL_rl_reset_complete;
  wire CAN_FIRE_dmem_master_m_arready;
  wire CAN_FIRE_dmem_master_m_awready;
  wire CAN_FIRE_dmem_master_m_bvalid;
  wire CAN_FIRE_dmem_master_m_rvalid;
  wire CAN_FIRE_dmem_master_m_wready;
  wire CAN_FIRE_dmem_req;
  wire CAN_FIRE_imem_master_m_arready;
  wire CAN_FIRE_imem_master_m_awready;
  wire CAN_FIRE_imem_master_m_bvalid;
  wire CAN_FIRE_imem_master_m_rvalid;
  wire CAN_FIRE_imem_master_m_wready;
  wire CAN_FIRE_imem_req;
  wire CAN_FIRE_server_fence_i_request_put;
  wire CAN_FIRE_server_fence_i_response_get;
  wire CAN_FIRE_server_fence_request_put;
  wire CAN_FIRE_server_fence_response_get;
  wire CAN_FIRE_server_reset_request_put;
  wire CAN_FIRE_server_reset_response_get;
  wire CAN_FIRE_sfence_vma;
  wire CLK;
  wire EN_dmem_req;
  wire EN_imem_req;
  wire EN_server_fence_i_request_put;
  wire EN_server_fence_i_response_get;
  wire EN_server_fence_request_put;
  wire EN_server_fence_response_get;
  wire EN_server_reset_request_put;
  wire EN_server_reset_response_get;
  wire EN_sfence_vma;
  wire MUX_rg_state$write_1__SEL_2;
  wire MUX_rg_state$write_1__SEL_3;
  wire NOT_cfg_verbosity_read_ULE_1___d9;
  wire RDY_server_fence_i_request_put;
  wire RDY_server_fence_i_response_get;
  wire RDY_server_fence_request_put;
  wire RDY_server_fence_response_get;
  wire RDY_server_reset_request_put;
  wire RDY_server_reset_response_get;
  wire RDY_sfence_vma;
  wire RST_N;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire [31:0] RTL__DOT__near_mem__DOT__dcache__DOT__rg_addr;
  wire [31:0] RTL__DOT__near_mem__DOT__dcache__DOT__rg_pa;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire WILL_FIRE_RL_rl_reset;
  wire WILL_FIRE_RL_rl_reset_complete;
  wire WILL_FIRE_dmem_master_m_arready;
  wire WILL_FIRE_dmem_master_m_awready;
  wire WILL_FIRE_dmem_master_m_bvalid;
  wire WILL_FIRE_dmem_master_m_rvalid;
  wire WILL_FIRE_dmem_master_m_wready;
  wire WILL_FIRE_dmem_req;
  wire WILL_FIRE_imem_master_m_arready;
  wire WILL_FIRE_imem_master_m_awready;
  wire WILL_FIRE_imem_master_m_bvalid;
  wire WILL_FIRE_imem_master_m_rvalid;
  wire WILL_FIRE_imem_master_m_wready;
  wire WILL_FIRE_imem_req;
  wire WILL_FIRE_server_fence_i_request_put;
  wire WILL_FIRE_server_fence_i_response_get;
  wire WILL_FIRE_server_fence_request_put;
  wire WILL_FIRE_server_fence_response_get;
  wire WILL_FIRE_server_reset_request_put;
  wire WILL_FIRE_server_reset_response_get;
  wire WILL_FIRE_sfence_vma;
  reg [3:0] cfg_verbosity;
  wire [3:0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;
  wire dcache$EN_req;
  wire dcache$EN_server_flush_request_put;
  wire dcache$EN_server_flush_response_get;
  wire dcache$EN_server_reset_request_put;
  wire dcache$EN_server_reset_response_get;
  wire dcache$EN_set_verbosity;
  wire dcache$EN_tlb_flush;
  wire dcache$RDY_server_flush_request_put;
  wire dcache$RDY_server_flush_response_get;
  wire dcache$RDY_server_reset_request_put;
  wire dcache$RDY_server_reset_response_get;
  wire dcache$exc;
  wire [3:0] dcache$exc_code;
  wire [63:0] dcache$mem_master_araddr;
  wire [1:0] dcache$mem_master_arburst;
  wire [3:0] dcache$mem_master_arcache;
  wire [3:0] dcache$mem_master_arid;
  wire [7:0] dcache$mem_master_arlen;
  wire dcache$mem_master_arlock;
  wire [2:0] dcache$mem_master_arprot;
  wire [3:0] dcache$mem_master_arqos;
  wire dcache$mem_master_arready;
  wire [3:0] dcache$mem_master_arregion;
  wire [2:0] dcache$mem_master_arsize;
  wire dcache$mem_master_arvalid;
  wire [63:0] dcache$mem_master_awaddr;
  wire [1:0] dcache$mem_master_awburst;
  wire [3:0] dcache$mem_master_awcache;
  wire [3:0] dcache$mem_master_awid;
  wire [7:0] dcache$mem_master_awlen;
  wire dcache$mem_master_awlock;
  wire [2:0] dcache$mem_master_awprot;
  wire [3:0] dcache$mem_master_awqos;
  wire dcache$mem_master_awready;
  wire [3:0] dcache$mem_master_awregion;
  wire [2:0] dcache$mem_master_awsize;
  wire dcache$mem_master_awvalid;
  wire [3:0] dcache$mem_master_bid;
  wire dcache$mem_master_bready;
  wire [1:0] dcache$mem_master_bresp;
  wire dcache$mem_master_bvalid;
  wire [63:0] dcache$mem_master_rdata;
  wire [3:0] dcache$mem_master_rid;
  wire dcache$mem_master_rlast;
  wire dcache$mem_master_rready;
  wire [1:0] dcache$mem_master_rresp;
  wire dcache$mem_master_rvalid;
  wire [63:0] dcache$mem_master_wdata;
  wire dcache$mem_master_wlast;
  wire dcache$mem_master_wready;
  wire [7:0] dcache$mem_master_wstrb;
  wire dcache$mem_master_wvalid;
  wire [31:0] dcache$req_addr;
  wire [2:0] dcache$req_f3;
  wire dcache$req_mstatus_MXR;
  wire dcache$req_op;
  wire [1:0] dcache$req_priv;
  wire [31:0] dcache$req_satp;
  wire dcache$req_sstatus_SUM;
  wire [63:0] dcache$req_st_value;
  wire [3:0] dcache$set_verbosity_verbosity;
  wire dcache$valid;
  wire [63:0] dcache$word64;
  wire dmem_exc;
  wire [3:0] dmem_exc_code;
  wire [63:0] dmem_master_araddr;
  wire [1:0] dmem_master_arburst;
  wire [3:0] dmem_master_arcache;
  wire [3:0] dmem_master_arid;
  wire [7:0] dmem_master_arlen;
  wire dmem_master_arlock;
  wire [2:0] dmem_master_arprot;
  wire [3:0] dmem_master_arqos;
  wire dmem_master_arready;
  wire [3:0] dmem_master_arregion;
  wire [2:0] dmem_master_arsize;
  wire dmem_master_arvalid;
  wire [63:0] dmem_master_awaddr;
  wire [1:0] dmem_master_awburst;
  wire [3:0] dmem_master_awcache;
  wire [3:0] dmem_master_awid;
  wire [7:0] dmem_master_awlen;
  wire dmem_master_awlock;
  wire [2:0] dmem_master_awprot;
  wire [3:0] dmem_master_awqos;
  wire dmem_master_awready;
  wire [3:0] dmem_master_awregion;
  wire [2:0] dmem_master_awsize;
  wire dmem_master_awvalid;
  wire [3:0] dmem_master_bid;
  wire dmem_master_bready;
  wire [1:0] dmem_master_bresp;
  wire dmem_master_bvalid;
  wire [63:0] dmem_master_rdata;
  wire [3:0] dmem_master_rid;
  wire dmem_master_rlast;
  wire dmem_master_rready;
  wire [1:0] dmem_master_rresp;
  wire dmem_master_rvalid;
  wire [63:0] dmem_master_wdata;
  wire dmem_master_wlast;
  wire dmem_master_wready;
  wire [7:0] dmem_master_wstrb;
  wire dmem_master_wvalid;
  wire [31:0] dmem_req_addr;
  wire [2:0] dmem_req_f3;
  wire dmem_req_mstatus_MXR;
  wire dmem_req_op;
  wire [1:0] dmem_req_priv;
  wire [31:0] dmem_req_satp;
  wire dmem_req_sstatus_SUM;
  wire [63:0] dmem_req_store_value;
  wire [63:0] dmem_st_amo_val;
  wire dmem_valid;
  wire [63:0] dmem_word64;
  wire f_reset_rsps$CLR;
  wire f_reset_rsps$DEQ;
  wire f_reset_rsps$EMPTY_N;
  wire f_reset_rsps$ENQ;
  wire f_reset_rsps$FULL_N;
  wire icache$EN_req;
  wire icache$EN_server_flush_request_put;
  wire icache$EN_server_flush_response_get;
  wire icache$EN_server_reset_request_put;
  wire icache$EN_server_reset_response_get;
  wire icache$EN_set_verbosity;
  wire icache$EN_tlb_flush;
  wire icache$RDY_server_flush_request_put;
  wire icache$RDY_server_flush_response_get;
  wire icache$RDY_server_reset_request_put;
  wire icache$RDY_server_reset_response_get;
  wire [31:0] icache$addr;
  wire icache$exc;
  wire [3:0] icache$exc_code;
  wire [63:0] icache$mem_master_araddr;
  wire [1:0] icache$mem_master_arburst;
  wire [3:0] icache$mem_master_arcache;
  wire [3:0] icache$mem_master_arid;
  wire [7:0] icache$mem_master_arlen;
  wire icache$mem_master_arlock;
  wire [2:0] icache$mem_master_arprot;
  wire [3:0] icache$mem_master_arqos;
  wire icache$mem_master_arready;
  wire [3:0] icache$mem_master_arregion;
  wire [2:0] icache$mem_master_arsize;
  wire icache$mem_master_arvalid;
  wire [63:0] icache$mem_master_awaddr;
  wire [1:0] icache$mem_master_awburst;
  wire [3:0] icache$mem_master_awcache;
  wire [3:0] icache$mem_master_awid;
  wire [7:0] icache$mem_master_awlen;
  wire icache$mem_master_awlock;
  wire [2:0] icache$mem_master_awprot;
  wire [3:0] icache$mem_master_awqos;
  wire icache$mem_master_awready;
  wire [3:0] icache$mem_master_awregion;
  wire [2:0] icache$mem_master_awsize;
  wire icache$mem_master_awvalid;
  wire [3:0] icache$mem_master_bid;
  wire icache$mem_master_bready;
  wire [1:0] icache$mem_master_bresp;
  wire icache$mem_master_bvalid;
  wire [63:0] icache$mem_master_rdata;
  wire [3:0] icache$mem_master_rid;
  wire icache$mem_master_rlast;
  wire icache$mem_master_rready;
  wire [1:0] icache$mem_master_rresp;
  wire icache$mem_master_rvalid;
  wire [63:0] icache$mem_master_wdata;
  wire icache$mem_master_wlast;
  wire icache$mem_master_wready;
  wire [7:0] icache$mem_master_wstrb;
  wire icache$mem_master_wvalid;
  wire [31:0] icache$req_addr;
  wire [2:0] icache$req_f3;
  wire icache$req_mstatus_MXR;
  wire icache$req_op;
  wire [1:0] icache$req_priv;
  wire [31:0] icache$req_satp;
  wire icache$req_sstatus_SUM;
  wire [63:0] icache$req_st_value;
  wire [3:0] icache$set_verbosity_verbosity;
  wire icache$valid;
  wire [63:0] icache$word64;
  wire imem_exc;
  wire [3:0] imem_exc_code;
  wire [31:0] imem_instr;
  wire imem_is_i32_not_i16;
  wire [63:0] imem_master_araddr;
  wire [1:0] imem_master_arburst;
  wire [3:0] imem_master_arcache;
  wire [3:0] imem_master_arid;
  wire [7:0] imem_master_arlen;
  wire imem_master_arlock;
  wire [2:0] imem_master_arprot;
  wire [3:0] imem_master_arqos;
  wire imem_master_arready;
  wire [3:0] imem_master_arregion;
  wire [2:0] imem_master_arsize;
  wire imem_master_arvalid;
  wire [63:0] imem_master_awaddr;
  wire [1:0] imem_master_awburst;
  wire [3:0] imem_master_awcache;
  wire [3:0] imem_master_awid;
  wire [7:0] imem_master_awlen;
  wire imem_master_awlock;
  wire [2:0] imem_master_awprot;
  wire [3:0] imem_master_awqos;
  wire imem_master_awready;
  wire [3:0] imem_master_awregion;
  wire [2:0] imem_master_awsize;
  wire imem_master_awvalid;
  wire [3:0] imem_master_bid;
  wire imem_master_bready;
  wire [1:0] imem_master_bresp;
  wire imem_master_bvalid;
  wire [63:0] imem_master_rdata;
  wire [3:0] imem_master_rid;
  wire imem_master_rlast;
  wire imem_master_rready;
  wire [1:0] imem_master_rresp;
  wire imem_master_rvalid;
  wire [63:0] imem_master_wdata;
  wire imem_master_wlast;
  wire imem_master_wready;
  wire [7:0] imem_master_wstrb;
  wire imem_master_wvalid;
  wire [31:0] imem_pc;
  wire [31:0] imem_req_addr;
  wire [2:0] imem_req_f3;
  wire imem_req_mstatus_MXR;
  wire [1:0] imem_req_priv;
  wire [31:0] imem_req_satp;
  wire imem_req_sstatus_SUM;
  wire [31:0] imem_tval;
  wire imem_valid;
  reg [1:0] rg_state;
  reg [1:0] rg_state$D_IN;
  wire rg_state$EN;
  wire [7:0] server_fence_request_put;
  wire [63:0] soc_map$m_is_IO_addr_addr;
  wire [63:0] soc_map$m_is_mem_addr_addr;
  wire [63:0] soc_map$m_is_near_mem_IO_addr_addr;
  reg [31:0] v__h1637;
  reg [31:0] v__h1643;
  reg [31:0] v__h1788;
  reg [31:0] v__h1794;


  assign CAN_FIRE_dmem_master_m_arready = 1'b1;
  assign CAN_FIRE_dmem_master_m_awready = 1'b1;
  assign CAN_FIRE_dmem_master_m_bvalid = 1'b1;
  assign CAN_FIRE_dmem_master_m_rvalid = 1'b1;
  assign CAN_FIRE_dmem_master_m_wready = 1'b1;
  assign CAN_FIRE_dmem_req = 1'b1;
  assign CAN_FIRE_imem_master_m_arready = 1'b1;
  assign CAN_FIRE_imem_master_m_awready = 1'b1;
  assign CAN_FIRE_imem_master_m_bvalid = 1'b1;
  assign CAN_FIRE_imem_master_m_rvalid = 1'b1;
  assign CAN_FIRE_imem_master_m_wready = 1'b1;
  assign CAN_FIRE_imem_req = 1'b1;
  assign CAN_FIRE_sfence_vma = 1'b1;
  assign RDY_sfence_vma = 1'b1;
  assign WILL_FIRE_dmem_master_m_arready = 1'b1;
  assign WILL_FIRE_dmem_master_m_awready = 1'b1;
  assign WILL_FIRE_dmem_master_m_bvalid = 1'b1;
  assign WILL_FIRE_dmem_master_m_rvalid = 1'b1;
  assign WILL_FIRE_dmem_master_m_wready = 1'b1;
  assign WILL_FIRE_imem_master_m_arready = 1'b1;
  assign WILL_FIRE_imem_master_m_awready = 1'b1;
  assign WILL_FIRE_imem_master_m_bvalid = 1'b1;
  assign WILL_FIRE_imem_master_m_rvalid = 1'b1;
  assign WILL_FIRE_imem_master_m_wready = 1'b1;
  assign cfg_verbosity$D_IN = 4'h0;
  assign cfg_verbosity$EN = 1'b0;
  assign dcache$EN_set_verbosity = 1'b0;
  assign dcache$set_verbosity_verbosity = 4'h0;
  assign dmem_st_amo_val = 64'haaaaaaaaaaaaaaaa;
  assign f_reset_rsps$CLR = 1'b0;
  assign icache$EN_set_verbosity = 1'b0;
  assign icache$req_op = 1'b0;
  assign icache$req_st_value = 64'haaaaaaaaaaaaaaaa;
  assign icache$set_verbosity_verbosity = 4'h0;
  assign imem_instr = 32'b0xxxxxxxxxx000xxxxx0110011;
  assign imem_is_i32_not_i16 = 1'b1;
  assign soc_map$m_is_IO_addr_addr = 64'h0000000000000000;
  assign soc_map$m_is_mem_addr_addr = 64'h0000000000000000;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0000000000000000;

  assign RDY_server_reset_request_put = (rg_state == 2'h2);
  assign CAN_FIRE_server_reset_request_put = (rg_state == 2'h2);
  assign NOT_cfg_verbosity_read_ULE_1___d9 = (cfg_verbosity > 4'h1);
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put;
  assign RDY_server_reset_response_get = f_reset_rsps$EMPTY_N;
  assign CAN_FIRE_server_reset_response_get = f_reset_rsps$EMPTY_N;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get;
  assign WILL_FIRE_imem_req = EN_imem_req;
  assign imem_valid = icache$valid;
  assign imem_pc = icache$addr;
  assign imem_exc = icache$exc;
  assign imem_exc_code = icache$exc_code;
  assign imem_tval = icache$addr;
  assign imem_master_awvalid = icache$mem_master_awvalid;
  assign imem_master_awid = icache$mem_master_awid;
  assign imem_master_awaddr = icache$mem_master_awaddr;
  assign imem_master_awlen = icache$mem_master_awlen;
  assign imem_master_awsize = icache$mem_master_awsize;
  assign imem_master_awburst = icache$mem_master_awburst;
  assign imem_master_awlock = icache$mem_master_awlock;
  assign imem_master_awcache = icache$mem_master_awcache;
  assign imem_master_awprot = icache$mem_master_awprot;
  assign imem_master_awqos = icache$mem_master_awqos;
  assign imem_master_awregion = icache$mem_master_awregion;
  assign imem_master_wvalid = icache$mem_master_wvalid;
  assign imem_master_wdata = icache$mem_master_wdata;
  assign imem_master_wstrb = icache$mem_master_wstrb;
  assign imem_master_wlast = icache$mem_master_wlast;
  assign imem_master_bready = icache$mem_master_bready;
  assign imem_master_arvalid = icache$mem_master_arvalid;
  assign imem_master_arid = icache$mem_master_arid;
  assign imem_master_araddr = icache$mem_master_araddr;
  assign imem_master_arlen = icache$mem_master_arlen;
  assign imem_master_arsize = icache$mem_master_arsize;
  assign imem_master_arburst = icache$mem_master_arburst;
  assign imem_master_arlock = icache$mem_master_arlock;
  assign imem_master_arcache = icache$mem_master_arcache;
  assign imem_master_arprot = icache$mem_master_arprot;
  assign imem_master_arqos = icache$mem_master_arqos;
  assign imem_master_arregion = icache$mem_master_arregion;
  assign imem_master_rready = icache$mem_master_rready;
  assign WILL_FIRE_dmem_req = EN_dmem_req;
  assign dmem_valid = dcache$valid;
  assign dmem_word64 = dcache$word64;
  assign dmem_exc = dcache$exc;
  assign dmem_exc_code = dcache$exc_code;
  assign dmem_master_awvalid = dcache$mem_master_awvalid;
  assign dmem_master_awid = dcache$mem_master_awid;
  assign dmem_master_awaddr = dcache$mem_master_awaddr;
  assign dmem_master_awlen = dcache$mem_master_awlen;
  assign dmem_master_awsize = dcache$mem_master_awsize;
  assign dmem_master_awburst = dcache$mem_master_awburst;
  assign dmem_master_awlock = dcache$mem_master_awlock;
  assign dmem_master_awcache = dcache$mem_master_awcache;
  assign dmem_master_awprot = dcache$mem_master_awprot;
  assign dmem_master_awqos = dcache$mem_master_awqos;
  assign dmem_master_awregion = dcache$mem_master_awregion;
  assign dmem_master_wvalid = dcache$mem_master_wvalid;
  assign dmem_master_wdata = dcache$mem_master_wdata;
  assign dmem_master_wstrb = dcache$mem_master_wstrb;
  assign dmem_master_wlast = dcache$mem_master_wlast;
  assign dmem_master_bready = dcache$mem_master_bready;
  assign dmem_master_arvalid = dcache$mem_master_arvalid;
  assign dmem_master_arid = dcache$mem_master_arid;
  assign dmem_master_araddr = dcache$mem_master_araddr;
  assign dmem_master_arlen = dcache$mem_master_arlen;
  assign dmem_master_arsize = dcache$mem_master_arsize;
  assign dmem_master_arburst = dcache$mem_master_arburst;
  assign dmem_master_arlock = dcache$mem_master_arlock;
  assign dmem_master_arcache = dcache$mem_master_arcache;
  assign dmem_master_arprot = dcache$mem_master_arprot;
  assign dmem_master_arqos = dcache$mem_master_arqos;
  assign dmem_master_arregion = dcache$mem_master_arregion;
  assign dmem_master_rready = dcache$mem_master_rready;
  assign RDY_server_fence_i_request_put = (dcache$RDY_server_flush_request_put & icache$RDY_server_flush_request_put);
  assign CAN_FIRE_server_fence_i_request_put = (dcache$RDY_server_flush_request_put & icache$RDY_server_flush_request_put);
  assign WILL_FIRE_server_fence_i_request_put = EN_server_fence_i_request_put;
  assign RDY_server_fence_i_response_get = (dcache$RDY_server_flush_response_get & icache$RDY_server_flush_response_get);
  assign CAN_FIRE_server_fence_i_response_get = (dcache$RDY_server_flush_response_get & icache$RDY_server_flush_response_get);
  assign WILL_FIRE_server_fence_i_response_get = EN_server_fence_i_response_get;
  assign RDY_server_fence_request_put = dcache$RDY_server_flush_request_put;
  assign CAN_FIRE_server_fence_request_put = dcache$RDY_server_flush_request_put;
  assign WILL_FIRE_server_fence_request_put = EN_server_fence_request_put;
  assign RDY_server_fence_response_get = dcache$RDY_server_flush_response_get;
  assign CAN_FIRE_server_fence_response_get = dcache$RDY_server_flush_response_get;
  assign WILL_FIRE_server_fence_response_get = EN_server_fence_response_get;
  assign WILL_FIRE_sfence_vma = EN_sfence_vma;
  assign CAN_FIRE_RL_rl_reset = ((dcache$RDY_server_reset_request_put & icache$RDY_server_reset_request_put) & (rg_state == 2'h0));
  assign WILL_FIRE_RL_rl_reset = MUX_rg_state$write_1__SEL_2;
  assign CAN_FIRE_RL_rl_reset_complete = MUX_rg_state$write_1__SEL_3;
  assign WILL_FIRE_RL_rl_reset_complete = MUX_rg_state$write_1__SEL_3;
  assign MUX_rg_state$write_1__SEL_2 = ((CAN_FIRE_RL_rl_reset & (~|EN_server_fence_request_put)) & (~|EN_server_fence_i_request_put));
  assign MUX_rg_state$write_1__SEL_3 = (((dcache$RDY_server_reset_response_get & icache$RDY_server_reset_response_get) & f_reset_rsps$FULL_N) & (rg_state == 2'h1));
  assign rg_state$EN = ((EN_server_reset_request_put | WILL_FIRE_RL_rl_reset) | WILL_FIRE_RL_rl_reset_complete);
  assign dcache$mem_master_arready = dmem_master_arready;
  assign dcache$mem_master_awready = dmem_master_awready;
  assign dcache$mem_master_bid = dmem_master_bid;
  assign dcache$mem_master_bresp = dmem_master_bresp;
  assign dcache$mem_master_bvalid = dmem_master_bvalid;
  assign dcache$mem_master_rdata = dmem_master_rdata;
  assign dcache$mem_master_rid = dmem_master_rid;
  assign dcache$mem_master_rlast = dmem_master_rlast;
  assign dcache$mem_master_rresp = dmem_master_rresp;
  assign dcache$mem_master_rvalid = dmem_master_rvalid;
  assign dcache$mem_master_wready = dmem_master_wready;
  assign dcache$req_addr = dmem_req_addr;
  assign dcache$req_f3 = dmem_req_f3;
  assign dcache$req_mstatus_MXR = dmem_req_mstatus_MXR;
  assign dcache$req_op = dmem_req_op;
  assign dcache$req_priv = dmem_req_priv;
  assign dcache$req_satp = dmem_req_satp;
  assign dcache$req_sstatus_SUM = dmem_req_sstatus_SUM;
  assign dcache$req_st_value = dmem_req_store_value;
  assign dcache$EN_server_reset_request_put = MUX_rg_state$write_1__SEL_2;
  assign dcache$EN_server_reset_response_get = MUX_rg_state$write_1__SEL_3;
  assign dcache$EN_req = EN_dmem_req;
  assign dcache$EN_server_flush_request_put = (EN_server_fence_i_request_put | EN_server_fence_request_put);
  assign dcache$EN_server_flush_response_get = (EN_server_fence_i_response_get | EN_server_fence_response_get);
  assign dcache$EN_tlb_flush = EN_sfence_vma;
  assign f_reset_rsps$ENQ = MUX_rg_state$write_1__SEL_3;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get;
  assign icache$mem_master_arready = imem_master_arready;
  assign icache$mem_master_awready = imem_master_awready;
  assign icache$mem_master_bid = imem_master_bid;
  assign icache$mem_master_bresp = imem_master_bresp;
  assign icache$mem_master_bvalid = imem_master_bvalid;
  assign icache$mem_master_rdata = imem_master_rdata;
  assign icache$mem_master_rid = imem_master_rid;
  assign icache$mem_master_rlast = imem_master_rlast;
  assign icache$mem_master_rresp = imem_master_rresp;
  assign icache$mem_master_rvalid = imem_master_rvalid;
  assign icache$mem_master_wready = imem_master_wready;
  assign icache$req_addr = imem_req_addr;
  assign icache$req_f3 = imem_req_f3;
  assign icache$req_mstatus_MXR = imem_req_mstatus_MXR;
  assign icache$req_priv = imem_req_priv;
  assign icache$req_satp = imem_req_satp;
  assign icache$req_sstatus_SUM = imem_req_sstatus_SUM;
  assign icache$EN_server_reset_request_put = MUX_rg_state$write_1__SEL_2;
  assign icache$EN_server_reset_response_get = MUX_rg_state$write_1__SEL_3;
  assign icache$EN_req = EN_imem_req;
  assign icache$EN_server_flush_request_put = EN_server_fence_i_request_put;
  assign icache$EN_server_flush_response_get = EN_server_fence_i_response_get;
  assign icache$EN_tlb_flush = EN_sfence_vma;

  always @(WILL_FIRE_RL_rl_reset_complete or WILL_FIRE_RL_rl_reset or EN_server_reset_request_put) case (1'b1)
    EN_server_reset_request_put: rg_state$D_IN = 2'h0;
    WILL_FIRE_RL_rl_reset: rg_state$D_IN = 2'h1;
    WILL_FIRE_RL_rl_reset_complete: rg_state$D_IN = 2'h2;
    default: rg_state$D_IN = 2'h2;
  endcase

  always @(posedge CLK) if ((RST_N == 1'b0)) begin
    cfg_verbosity <= 4'h0;
    rg_state <= 2'h2;
  end
  else begin
    if (cfg_verbosity$EN) cfg_verbosity <= cfg_verbosity$D_IN;
    if (rg_state$EN) rg_state <= rg_state$D_IN;
  end

  always @(negedge CLK) begin
    #0;
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_reset && NOT_cfg_verbosity_read_ULE_1___d9)) begin
      v__h1643 = $stime;
      #0;
    end
    v__h1637 = (v__h1643 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_reset && NOT_cfg_verbosity_read_ULE_1___d9)) $display("%0d: Near_Mem.rl_reset", v__h1637);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_reset_complete && NOT_cfg_verbosity_read_ULE_1___d9)) begin
      v__h1794 = $stime;
      #0;
    end
    v__h1788 = (v__h1794 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_reset_complete && NOT_cfg_verbosity_read_ULE_1___d9)) $display("%0d: Near_Mem.rl_reset_complete", v__h1788);
  end

  \mkMMU_Cache[wrapper.RTL.near_mem.dcache]  dcache(CLK, RST_N, dcache$set_verbosity_verbosity, dcache$EN_set_verbosity, /* Empty */, dcache$EN_server_reset_request_put, dcache$RDY_server_reset_request_put, dcache$EN_server_reset_response_get, dcache$RDY_server_reset_response_get, dcache$req_op, dcache$req_f3, dcache$req_addr, dcache$req_st_value, dcache$req_priv, dcache$req_sstatus_SUM, dcache$req_mstatus_MXR, dcache$req_satp, dcache$EN_req, dcache$valid, /* Empty */, dcache$word64, /* Empty */, dcache$exc, dcache$exc_code, dcache$EN_server_flush_request_put, dcache$RDY_server_flush_request_put, dcache$EN_server_flush_response_get, dcache$RDY_server_flush_response_get, dcache$EN_tlb_flush, /* Empty */, dcache$mem_master_awvalid, dcache$mem_master_awid, dcache$mem_master_awaddr, dcache$mem_master_awlen, dcache$mem_master_awsize, dcache$mem_master_awburst, dcache$mem_master_awlock, dcache$mem_master_awcache, dcache$mem_master_awprot, dcache$mem_master_awqos, dcache$mem_master_awregion, dcache$mem_master_awready, dcache$mem_master_wvalid, dcache$mem_master_wdata, dcache$mem_master_wstrb, dcache$mem_master_wlast, dcache$mem_master_wready, dcache$mem_master_bvalid, dcache$mem_master_bid, dcache$mem_master_bresp, dcache$mem_master_bready, dcache$mem_master_arvalid, dcache$mem_master_arid, dcache$mem_master_araddr, dcache$mem_master_arlen, dcache$mem_master_arsize, dcache$mem_master_arburst, dcache$mem_master_arlock, dcache$mem_master_arcache, dcache$mem_master_arprot, dcache$mem_master_arqos, dcache$mem_master_arregion, dcache$mem_master_arready, dcache$mem_master_rvalid, dcache$mem_master_rid, dcache$mem_master_rdata, dcache$mem_master_rresp, dcache$mem_master_rlast, dcache$mem_master_rready, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__rg_pa, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__rg_addr);

  \FIFO20[wrapper.RTL.near_mem.f_reset_rsps]  f_reset_rsps(CLK, RST_N, f_reset_rsps$ENQ, f_reset_rsps$FULL_N, f_reset_rsps$DEQ, f_reset_rsps$EMPTY_N, f_reset_rsps$CLR, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */);

  \mkMMU_Cache[wrapper.RTL.near_mem.icache]  icache(CLK, RST_N, icache$set_verbosity_verbosity, icache$EN_set_verbosity, /* Empty */, icache$EN_server_reset_request_put, icache$RDY_server_reset_request_put, icache$EN_server_reset_response_get, icache$RDY_server_reset_response_get, icache$req_op, icache$req_f3, icache$req_addr, icache$req_st_value, icache$req_priv, icache$req_sstatus_SUM, icache$req_mstatus_MXR, icache$req_satp, icache$EN_req, icache$valid, icache$addr, icache$word64, /* Empty */, icache$exc, icache$exc_code, icache$EN_server_flush_request_put, icache$RDY_server_flush_request_put, icache$EN_server_flush_response_get, icache$RDY_server_flush_response_get, icache$EN_tlb_flush, /* Empty */, icache$mem_master_awvalid, icache$mem_master_awid, icache$mem_master_awaddr, icache$mem_master_awlen, icache$mem_master_awsize, icache$mem_master_awburst, icache$mem_master_awlock, icache$mem_master_awcache, icache$mem_master_awprot, icache$mem_master_awqos, icache$mem_master_awregion, icache$mem_master_awready, icache$mem_master_wvalid, icache$mem_master_wdata, icache$mem_master_wstrb, icache$mem_master_wlast, icache$mem_master_wready, icache$mem_master_bvalid, icache$mem_master_bid, icache$mem_master_bresp, icache$mem_master_bready, icache$mem_master_arvalid, icache$mem_master_arid, icache$mem_master_araddr, icache$mem_master_arlen, icache$mem_master_arsize, icache$mem_master_arburst, icache$mem_master_arlock, icache$mem_master_arcache, icache$mem_master_arprot, icache$mem_master_arqos, icache$mem_master_arregion, icache$mem_master_arready, icache$mem_master_rvalid, icache$mem_master_rid, icache$mem_master_rdata, icache$mem_master_rresp, icache$mem_master_rlast, icache$mem_master_rready, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, /* Empty */);

  mkSoC_Map soc_map(CLK, RST_N, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, soc_map$m_is_mem_addr_addr, /* Empty */, soc_map$m_is_IO_addr_addr, /* Empty */, soc_map$m_is_near_mem_IO_addr_addr, /* Empty */, /* Empty */, /* Empty */, /* Empty */);
endmodule  /* mkNear_Mem */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 17942. */
module mkSoC_Map(CLK, RST_N, m_near_mem_io_addr_base, m_near_mem_io_addr_size, m_near_mem_io_addr_lim, m_plic_addr_base, m_plic_addr_size, m_plic_addr_lim, m_uart0_addr_base, m_uart0_addr_size, m_uart0_addr_lim, m_boot_rom_addr_base, m_boot_rom_addr_size, m_boot_rom_addr_lim, m_mem0_controller_addr_base, m_mem0_controller_addr_size, m_mem0_controller_addr_lim, m_tcm_addr_base, m_tcm_addr_size, m_tcm_addr_lim, m_is_mem_addr_addr, m_is_mem_addr, m_is_IO_addr_addr, m_is_IO_addr, m_is_near_mem_IO_addr_addr, m_is_near_mem_IO_addr, m_pc_reset_value, m_mtvec_reset_value, m_nmivec_reset_value);
  input CLK;
  input RST_N;
  output [63:0] m_near_mem_io_addr_base;
  output [63:0] m_near_mem_io_addr_size;
  output [63:0] m_near_mem_io_addr_lim;
  output [63:0] m_plic_addr_base;
  output [63:0] m_plic_addr_size;
  output [63:0] m_plic_addr_lim;
  output [63:0] m_uart0_addr_base;
  output [63:0] m_uart0_addr_size;
  output [63:0] m_uart0_addr_lim;
  output [63:0] m_boot_rom_addr_base;
  output [63:0] m_boot_rom_addr_size;
  output [63:0] m_boot_rom_addr_lim;
  output [63:0] m_mem0_controller_addr_base;
  output [63:0] m_mem0_controller_addr_size;
  output [63:0] m_mem0_controller_addr_lim;
  output [63:0] m_tcm_addr_base;
  output [63:0] m_tcm_addr_size;
  output [63:0] m_tcm_addr_lim;
  input [63:0] m_is_mem_addr_addr;
  output m_is_mem_addr;
  input [63:0] m_is_IO_addr_addr;
  output m_is_IO_addr;
  input [63:0] m_is_near_mem_IO_addr_addr;
  output m_is_near_mem_IO_addr;
  output [63:0] m_pc_reset_value;
  output [63:0] m_mtvec_reset_value;
  output [63:0] m_nmivec_reset_value;

  wire CLK;
  wire RST_N;
  wire [63:0] m_boot_rom_addr_base;
  wire [63:0] m_boot_rom_addr_lim;
  wire [63:0] m_boot_rom_addr_size;
  wire m_is_IO_addr;
  wire [63:0] m_is_IO_addr_addr;
  wire m_is_mem_addr;
  wire [63:0] m_is_mem_addr_addr;
  wire m_is_near_mem_IO_addr;
  wire [63:0] m_is_near_mem_IO_addr_addr;
  wire [63:0] m_mem0_controller_addr_base;
  wire [63:0] m_mem0_controller_addr_lim;
  wire [63:0] m_mem0_controller_addr_size;
  wire [63:0] m_mtvec_reset_value;
  wire [63:0] m_near_mem_io_addr_base;
  wire [63:0] m_near_mem_io_addr_lim;
  wire [63:0] m_near_mem_io_addr_size;
  wire [63:0] m_nmivec_reset_value;
  wire [63:0] m_pc_reset_value;
  wire [63:0] m_plic_addr_base;
  wire [63:0] m_plic_addr_lim;
  wire [63:0] m_plic_addr_size;
  wire [63:0] m_tcm_addr_base;
  wire [63:0] m_tcm_addr_lim;
  wire [63:0] m_tcm_addr_size;
  wire [63:0] m_uart0_addr_base;
  wire [63:0] m_uart0_addr_lim;
  wire [63:0] m_uart0_addr_size;

  assign m_boot_rom_addr_base = 64'h0000000000001000;
  assign m_boot_rom_addr_lim = 64'h0000000000002000;
  assign m_boot_rom_addr_size = 64'h0000000000001000;
  assign m_mem0_controller_addr_base = 64'h0000000080000000;
  assign m_mem0_controller_addr_lim = 64'h0000000090000000;
  assign m_mem0_controller_addr_size = 64'h0000000010000000;
  assign m_mtvec_reset_value = 64'h0000000000001000;
  assign m_near_mem_io_addr_base = 64'h0000000002000000;
  assign m_near_mem_io_addr_lim = 64'h000000000200c000;
  assign m_near_mem_io_addr_size = 64'h000000000000c000;
  assign m_nmivec_reset_value = 64'haaaaaaaaaaaaaaaa;
  assign m_pc_reset_value = 64'h0000000000001000;
  assign m_plic_addr_base = 64'h000000000c000000;
  assign m_plic_addr_lim = 64'h000000000c400000;
  assign m_plic_addr_size = 64'h0000000000400000;
  assign m_tcm_addr_base = 64'h0000000000000000;
  assign m_tcm_addr_lim = 64'h0000000000000000;
  assign m_tcm_addr_size = 64'h0000000000000000;
  assign m_uart0_addr_base = 64'h00000000c0000000;
  assign m_uart0_addr_lim = 64'h00000000c0000080;
  assign m_uart0_addr_size = 64'h0000000000000080;

  assign m_is_mem_addr = (((m_is_mem_addr_addr >= 64'h0000000000001000) & (64'h0000000000002000 > m_is_mem_addr_addr)) | ((m_is_mem_addr_addr >= 64'h0000000080000000) & (64'h0000000090000000 > m_is_mem_addr_addr)));
  assign m_is_IO_addr = ((((m_is_IO_addr_addr >= 64'h0000000002000000) & (64'h000000000200c000 > m_is_IO_addr_addr)) | ((m_is_IO_addr_addr >= 64'h000000000c000000) & (64'h000000000c400000 > m_is_IO_addr_addr))) | ((m_is_IO_addr_addr >= 64'h00000000c0000000) & (64'h00000000c0000080 > m_is_IO_addr_addr)));
  assign m_is_near_mem_IO_addr = ((m_is_near_mem_IO_addr_addr >= 64'h0000000002000000) & (64'h000000000200c000 > m_is_near_mem_IO_addr_addr));
endmodule  /* mkSoC_Map */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3622. */
module \FIFO20[wrapper.RTL.stage1_f_reset_reqs] (CLK, RST, ENQ, FULL_N, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__stage1_f_reset_rsps__DOT__full_reg, RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage1_f_reset_reqs__DOT__full_reg, RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg, RTL__DOT__stage3_f_reset_reqs__DOT__full_reg, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg, RTL__DOT__stage3_f_reset_rsps__DOT__full_reg, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage2_f_reset_reqs__DOT__full_reg, RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage2_f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input ENQ;
  output FULL_N;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage1_f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage1_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__stage3_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__stage3_f_reset_rsps__DOT__full_reg;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage2_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage2_f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage1_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage1_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage2_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage2_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage3_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage3_f_reset_rsps__DOT__full_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign RTL__DOT__stage2_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage2_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage1_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage1_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if (((!ENQ) && DEQ)) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO20: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO20: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO20[wrapper.RTL.stage1_f_reset_reqs]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3622. */
module \FIFO20[wrapper.RTL.stage1_f_reset_rsps] (CLK, RST, ENQ, FULL_N, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__stage1_f_reset_rsps__DOT__full_reg, RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage1_f_reset_reqs__DOT__full_reg, RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg, RTL__DOT__stage3_f_reset_reqs__DOT__full_reg, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg, RTL__DOT__stage3_f_reset_rsps__DOT__full_reg, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage2_f_reset_reqs__DOT__full_reg, RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage2_f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input ENQ;
  output FULL_N;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage1_f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage1_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__stage3_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__stage3_f_reset_rsps__DOT__full_reg;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage2_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage2_f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage1_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage1_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage2_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage2_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage3_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage3_f_reset_rsps__DOT__full_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign RTL__DOT__stage2_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage2_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage1_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage1_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if (((!ENQ) && DEQ)) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO20: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO20: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO20[wrapper.RTL.stage1_f_reset_rsps]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3622. */
module \FIFO20[wrapper.RTL.stage2_f_reset_reqs] (CLK, RST, ENQ, FULL_N, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__stage1_f_reset_rsps__DOT__full_reg, RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage1_f_reset_reqs__DOT__full_reg, RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg, RTL__DOT__stage3_f_reset_reqs__DOT__full_reg, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg, RTL__DOT__stage3_f_reset_rsps__DOT__full_reg, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage2_f_reset_reqs__DOT__full_reg, RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage2_f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input ENQ;
  output FULL_N;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage1_f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage1_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__stage3_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__stage3_f_reset_rsps__DOT__full_reg;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage2_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage2_f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage1_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage1_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage2_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage2_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage3_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage3_f_reset_rsps__DOT__full_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign RTL__DOT__stage2_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage2_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage1_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage1_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if (((!ENQ) && DEQ)) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO20: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO20: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO20[wrapper.RTL.stage2_f_reset_reqs]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3622. */
module \FIFO20[wrapper.RTL.stage2_f_reset_rsps] (CLK, RST, ENQ, FULL_N, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__stage1_f_reset_rsps__DOT__full_reg, RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage1_f_reset_reqs__DOT__full_reg, RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg, RTL__DOT__stage3_f_reset_reqs__DOT__full_reg, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg, RTL__DOT__stage3_f_reset_rsps__DOT__full_reg, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage2_f_reset_reqs__DOT__full_reg, RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage2_f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input ENQ;
  output FULL_N;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage1_f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage1_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__stage3_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__stage3_f_reset_rsps__DOT__full_reg;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage2_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage2_f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage1_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage1_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage2_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage2_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage3_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage3_f_reset_rsps__DOT__full_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign RTL__DOT__stage2_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage2_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage1_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage1_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if (((!ENQ) && DEQ)) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO20: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO20: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO20[wrapper.RTL.stage2_f_reset_rsps]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3622. */
module \FIFO20[wrapper.RTL.stage3_f_reset_reqs] (CLK, RST, ENQ, FULL_N, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__stage1_f_reset_rsps__DOT__full_reg, RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage1_f_reset_reqs__DOT__full_reg, RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg, RTL__DOT__stage3_f_reset_reqs__DOT__full_reg, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg, RTL__DOT__stage3_f_reset_rsps__DOT__full_reg, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage2_f_reset_reqs__DOT__full_reg, RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage2_f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input ENQ;
  output FULL_N;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage1_f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage1_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__stage3_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__stage3_f_reset_rsps__DOT__full_reg;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage2_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage2_f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage1_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage1_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage2_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage2_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage3_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage3_f_reset_rsps__DOT__full_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign RTL__DOT__stage2_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage2_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage1_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage1_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if (((!ENQ) && DEQ)) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO20: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO20: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO20[wrapper.RTL.stage3_f_reset_reqs]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3622. */
module \FIFO20[wrapper.RTL.stage3_f_reset_rsps] (CLK, RST, ENQ, FULL_N, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__stage1_f_reset_rsps__DOT__full_reg, RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage1_f_reset_reqs__DOT__full_reg, RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg, RTL__DOT__stage3_f_reset_reqs__DOT__full_reg, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg, RTL__DOT__stage3_f_reset_rsps__DOT__full_reg, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage2_f_reset_reqs__DOT__full_reg, RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage2_f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input ENQ;
  output FULL_N;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage1_f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage1_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__stage3_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__stage3_f_reset_rsps__DOT__full_reg;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage2_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage2_f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage1_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage1_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage2_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage2_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage3_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage3_f_reset_rsps__DOT__full_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign RTL__DOT__stage2_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage2_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage1_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage1_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if (((!ENQ) && DEQ)) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO20: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO20: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO20[wrapper.RTL.stage3_f_reset_rsps]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 9374. */
module mkCSR_MIE(CLK, RST_N, EN_reset, fv_read, fav_write_misa, fav_write_wordxl, EN_fav_write, fav_write);
  input CLK;
  input RST_N;
  input EN_reset;
  output [31:0] fv_read;
  input [27:0] fav_write_misa;
  input [31:0] fav_write_wordxl;
  input EN_fav_write;
  output [31:0] fav_write;

  wire CAN_FIRE_fav_write;
  wire CAN_FIRE_reset;
  wire CLK;
  wire EN_fav_write;
  wire EN_reset;
  wire RST_N;
  wire WILL_FIRE_fav_write;
  wire WILL_FIRE_reset;
  wire [31:0] fav_write;
  wire [27:0] fav_write_misa;
  wire [31:0] fav_write_wordxl;
  wire [31:0] fv_read;
  wire [11:0] mie__h88;
  reg [11:0] rg_mie;
  wire [11:0] rg_mie$D_IN;
  wire rg_mie$EN;
  wire seie__h119;
  wire ssie__h113;
  wire stie__h116;
  wire ueie__h118;
  wire usie__h112;
  wire utie__h115;


  assign CAN_FIRE_fav_write = 1'b1;
  assign CAN_FIRE_reset = 1'b1;

  assign fv_read = {20'h00000, rg_mie};
  assign fav_write = {20'h00000, mie__h88};
  assign rg_mie$D_IN = (EN_fav_write ? mie__h88 : 12'h000);
  assign mie__h88 = {fav_write_wordxl[11], 1'b0, seie__h119, ueie__h118, fav_write_wordxl[7], 1'b0, stie__h116, utie__h115, fav_write_wordxl[3], 1'b0, ssie__h113, usie__h112};
  assign WILL_FIRE_reset = EN_reset;
  assign WILL_FIRE_fav_write = EN_fav_write;
  assign rg_mie$EN = (EN_fav_write | EN_reset);
  assign seie__h119 = (fav_write_misa[18] & fav_write_wordxl[9]);
  assign ssie__h113 = (fav_write_misa[18] & fav_write_wordxl[1]);
  assign stie__h116 = (fav_write_misa[18] & fav_write_wordxl[5]);
  assign ueie__h118 = (fav_write_misa[13] & fav_write_wordxl[8]);
  assign usie__h112 = (fav_write_misa[13] & fav_write_wordxl[0]);
  assign utie__h115 = (fav_write_misa[13] & fav_write_wordxl[4]);

  always @(posedge CLK) if ((RST_N == 1'b0)) rg_mie <= 12'h000;
  else if (rg_mie$EN) rg_mie <= rg_mie$D_IN;
endmodule  /* mkCSR_MIE */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 9519. */
module mkCSR_MIP(CLK, RST_N, EN_reset, fv_read, fav_write_misa, fav_write_wordxl, EN_fav_write, fav_write, m_external_interrupt_req_req, s_external_interrupt_req_req, software_interrupt_req_req, timer_interrupt_req_req);
  input CLK;
  input RST_N;
  input EN_reset;
  output [31:0] fv_read;
  input [27:0] fav_write_misa;
  input [31:0] fav_write_wordxl;
  input EN_fav_write;
  output [31:0] fav_write;
  input m_external_interrupt_req_req;
  input s_external_interrupt_req_req;
  input software_interrupt_req_req;
  input timer_interrupt_req_req;

  wire CAN_FIRE_fav_write;
  wire CAN_FIRE_m_external_interrupt_req;
  wire CAN_FIRE_reset;
  wire CAN_FIRE_s_external_interrupt_req;
  wire CAN_FIRE_software_interrupt_req;
  wire CAN_FIRE_timer_interrupt_req;
  wire CLK;
  wire EN_fav_write;
  wire EN_reset;
  wire RST_N;
  wire WILL_FIRE_fav_write;
  wire WILL_FIRE_m_external_interrupt_req;
  wire WILL_FIRE_reset;
  wire WILL_FIRE_s_external_interrupt_req;
  wire WILL_FIRE_software_interrupt_req;
  wire WILL_FIRE_timer_interrupt_req;
  wire [31:0] fav_write;
  wire [27:0] fav_write_misa;
  wire [31:0] fav_write_wordxl;
  wire [31:0] fv_read;
  wire m_external_interrupt_req_req;
  wire [11:0] new_mip__h524;
  wire [11:0] new_mip__h942;
  reg rg_meip;
  wire rg_meip$D_IN;
  wire rg_meip$EN;
  reg rg_msip;
  wire rg_msip$D_IN;
  wire rg_msip$EN;
  reg rg_mtip;
  wire rg_mtip$D_IN;
  wire rg_mtip$EN;
  reg rg_seip;
  wire rg_seip$D_IN;
  wire rg_seip$EN;
  reg rg_ssip;
  wire rg_ssip$D_IN;
  wire rg_ssip$EN;
  reg rg_stip;
  wire rg_stip$D_IN;
  wire rg_stip$EN;
  reg rg_ueip;
  wire rg_ueip$D_IN;
  wire rg_ueip$EN;
  reg rg_usip;
  wire rg_usip$D_IN;
  wire rg_usip$EN;
  reg rg_utip;
  wire rg_utip$D_IN;
  wire rg_utip$EN;
  wire s_external_interrupt_req_req;
  wire seip__h558;
  wire software_interrupt_req_req;
  wire ssip__h562;
  wire stip__h560;
  wire timer_interrupt_req_req;
  wire ueip__h559;
  wire usip__h563;
  wire utip__h561;


  assign CAN_FIRE_fav_write = 1'b1;
  assign CAN_FIRE_m_external_interrupt_req = 1'b1;
  assign CAN_FIRE_reset = 1'b1;
  assign CAN_FIRE_s_external_interrupt_req = 1'b1;
  assign CAN_FIRE_software_interrupt_req = 1'b1;
  assign CAN_FIRE_timer_interrupt_req = 1'b1;
  assign WILL_FIRE_m_external_interrupt_req = 1'b1;
  assign WILL_FIRE_s_external_interrupt_req = 1'b1;
  assign WILL_FIRE_software_interrupt_req = 1'b1;
  assign WILL_FIRE_timer_interrupt_req = 1'b1;
  assign rg_meip$EN = 1'b1;
  assign rg_msip$EN = 1'b1;
  assign rg_mtip$EN = 1'b1;
  assign rg_seip$EN = 1'b1;

  assign fv_read = {20'h00000, new_mip__h524};
  assign fav_write = {20'h00000, new_mip__h942};
  assign new_mip__h524 = {rg_meip, 1'b0, rg_seip, rg_ueip, rg_mtip, 1'b0, rg_stip, rg_utip, rg_msip, 1'b0, rg_ssip, rg_usip};
  assign new_mip__h942 = {rg_meip, 1'b0, seip__h558, ueip__h559, rg_mtip, 1'b0, stip__h560, utip__h561, rg_msip, 1'b0, ssip__h562, usip__h563};
  assign WILL_FIRE_reset = EN_reset;
  assign WILL_FIRE_fav_write = EN_fav_write;
  assign rg_meip$D_IN = m_external_interrupt_req_req;
  assign rg_msip$D_IN = software_interrupt_req_req;
  assign rg_mtip$D_IN = timer_interrupt_req_req;
  assign rg_seip$D_IN = s_external_interrupt_req_req;
  assign rg_ssip$D_IN = ((~|EN_reset) & ssip__h562);
  assign rg_ssip$EN = (EN_fav_write | EN_reset);
  assign rg_stip$D_IN = ((~|EN_reset) & stip__h560);
  assign rg_stip$EN = (EN_fav_write | EN_reset);
  assign rg_ueip$D_IN = ((~|EN_reset) & ueip__h559);
  assign rg_ueip$EN = (EN_fav_write | EN_reset);
  assign rg_usip$D_IN = ((~|EN_reset) & usip__h563);
  assign rg_usip$EN = (EN_fav_write | EN_reset);
  assign rg_utip$D_IN = ((~|EN_reset) & utip__h561);
  assign rg_utip$EN = (EN_fav_write | EN_reset);
  assign seip__h558 = (fav_write_misa[18] & fav_write_wordxl[9]);
  assign ssip__h562 = (fav_write_misa[18] & fav_write_wordxl[1]);
  assign stip__h560 = (fav_write_misa[18] & fav_write_wordxl[5]);
  assign ueip__h559 = (fav_write_misa[13] & fav_write_wordxl[8]);
  assign usip__h563 = (fav_write_misa[13] & fav_write_wordxl[0]);
  assign utip__h561 = (fav_write_misa[13] & fav_write_wordxl[4]);

  always @(posedge CLK) if ((RST_N == 1'b0)) begin
    rg_meip <= 1'b0;
    rg_msip <= 1'b0;
    rg_mtip <= 1'b0;
    rg_seip <= 1'b0;
    rg_ssip <= 1'b0;
    rg_stip <= 1'b0;
    rg_ueip <= 1'b0;
    rg_usip <= 1'b0;
    rg_utip <= 1'b0;
  end
  else begin
    if (rg_meip$EN) rg_meip <= rg_meip$D_IN;
    if (rg_msip$EN) rg_msip <= rg_msip$D_IN;
    if (rg_mtip$EN) rg_mtip <= rg_mtip$D_IN;
    if (rg_seip$EN) rg_seip <= rg_seip$D_IN;
    if (rg_ssip$EN) rg_ssip <= rg_ssip$D_IN;
    if (rg_stip$EN) rg_stip <= rg_stip$D_IN;
    if (rg_ueip$EN) rg_ueip <= rg_ueip$D_IN;
    if (rg_usip$EN) rg_usip <= rg_usip$D_IN;
    if (rg_utip$EN) rg_utip <= rg_utip$D_IN;
  end
endmodule  /* mkCSR_MIP */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3622. */
module \FIFO20[wrapper.RTL.csr_regfile.f_reset_rsps] (CLK, RST, ENQ, FULL_N, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__stage1_f_reset_rsps__DOT__full_reg, RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage1_f_reset_reqs__DOT__full_reg, RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg, RTL__DOT__stage3_f_reset_reqs__DOT__full_reg, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg, RTL__DOT__stage3_f_reset_rsps__DOT__full_reg, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage2_f_reset_reqs__DOT__full_reg, RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage2_f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input ENQ;
  output FULL_N;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage1_f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage1_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__stage3_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__stage3_f_reset_rsps__DOT__full_reg;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage2_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage2_f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage1_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage1_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage2_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage2_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage3_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage3_f_reset_rsps__DOT__full_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign RTL__DOT__stage2_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage2_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage1_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage1_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if (((!ENQ) && DEQ)) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO20: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO20: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO20[wrapper.RTL.csr_regfile.f_reset_rsps]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3622. */
module \FIFO20[wrapper.RTL.gpr_regfile.f_reset_rsps] (CLK, RST, ENQ, FULL_N, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__stage1_f_reset_rsps__DOT__full_reg, RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage1_f_reset_reqs__DOT__full_reg, RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg, RTL__DOT__stage3_f_reset_reqs__DOT__full_reg, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg, RTL__DOT__stage3_f_reset_rsps__DOT__full_reg, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage2_f_reset_reqs__DOT__full_reg, RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage2_f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input ENQ;
  output FULL_N;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage1_f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage1_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__stage3_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__stage3_f_reset_rsps__DOT__full_reg;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage2_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage2_f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage1_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage1_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage2_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage2_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage3_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage3_f_reset_rsps__DOT__full_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign RTL__DOT__stage2_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage2_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage1_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage1_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if (((!ENQ) && DEQ)) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO20: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO20: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO20[wrapper.RTL.gpr_regfile.f_reset_rsps]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 18219. */
module \RegFile[wrapper.RTL.gpr_regfile.regfile] (CLK, ADDR_IN, D_IN, WE, ADDR_1, D_OUT_1, ADDR_2, D_OUT_2, ADDR_3, D_OUT_3, ADDR_4, D_OUT_4, ADDR_5, D_OUT_5, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_17_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_14_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_9_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_3_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_8_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_11_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_4_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_20_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_5_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_19_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_13_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_26_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_30_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_24_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_2_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_28_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_16_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_18_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_21_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_22_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_23_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_25_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_27_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_29_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_31_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_6_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_1_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_10_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_7_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_12_, RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_15_);
  input CLK;
  input [4:0] ADDR_IN;
  input [31:0] D_IN;
  input WE;
  input [4:0] ADDR_1;
  output [31:0] D_OUT_1;
  input [4:0] ADDR_2;
  output [31:0] D_OUT_2;
  input [4:0] ADDR_3;
  output [31:0] D_OUT_3;
  input [4:0] ADDR_4;
  output [31:0] D_OUT_4;
  input [4:0] ADDR_5;
  output [31:0] D_OUT_5;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_17_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_14_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_9_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_3_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_8_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_11_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_4_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_20_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_5_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_19_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_13_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_26_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_30_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_24_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_2_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_28_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_16_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_18_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_21_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_22_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_23_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_25_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_27_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_29_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_31_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_6_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_1_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_10_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_7_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_12_;
  output [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_15_;

  parameter addr_width = 32'h00000005;
  parameter data_width = 32'h00000020;
  parameter hi = 5'h1f;
  parameter lo = 5'h00;

  wire [4:0] ADDR_1;
  wire [4:0] ADDR_2;
  wire [4:0] ADDR_3;
  wire [4:0] ADDR_4;
  wire [4:0] ADDR_5;
  wire [4:0] ADDR_IN;
  wire CLK;
  wire [31:0] D_IN;
  wire [31:0] D_OUT_1;
  wire [31:0] D_OUT_2;
  wire [31:0] D_OUT_3;
  wire [31:0] D_OUT_4;
  wire [31:0] D_OUT_5;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_10_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_11_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_12_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_13_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_14_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_15_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_16_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_17_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_18_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_19_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_1_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_20_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_21_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_22_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_23_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_24_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_25_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_26_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_27_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_28_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_29_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_2_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_30_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_31_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_3_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_4_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_5_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_6_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_7_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_8_;
  wire [31:0] RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_9_;
  wire WE;
  reg [31:0] arr [0:31];


  assign D_OUT_1 = arr[{2'h0, ADDR_1} + 0];
  assign D_OUT_2 = arr[{2'h0, ADDR_2} + 0];
  assign D_OUT_3 = arr[{2'h0, ADDR_3} + 0];
  assign D_OUT_4 = arr[{2'h0, ADDR_4} + 0];
  assign D_OUT_5 = arr[{2'h0, ADDR_5} + 0];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_15_ = arr[15];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_12_ = arr[12];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_7_ = arr[7];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_10_ = arr[10];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_1_ = arr[1];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_6_ = arr[6];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_31_ = arr[31];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_29_ = arr[29];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_27_ = arr[27];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_25_ = arr[25];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_23_ = arr[23];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_22_ = arr[22];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_21_ = arr[21];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_18_ = arr[18];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_16_ = arr[16];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_28_ = arr[28];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_2_ = arr[2];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_24_ = arr[24];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_30_ = arr[30];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_26_ = arr[26];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_13_ = arr[13];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_19_ = arr[19];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_5_ = arr[5];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_20_ = arr[20];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_4_ = arr[4];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_11_ = arr[11];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_8_ = arr[8];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_3_ = arr[3];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_9_ = arr[9];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_14_ = arr[14];
  assign RTL__DOT__gpr_regfile__DOT__regfile__DOT__arr_17_ = arr[17];

  always @(posedge CLK) if (WE) arr[ADDR_IN] <= D_IN;

  always @(posedge CLK) begin: runtime_check
    reg enable_check;

    enable_check = 0;
    if (enable_check) begin
      if (((ADDR_1 < lo) || (ADDR_1 > hi))) $display("Warning: RegFile: %m -- Address port 1 is out of bounds: %h", ADDR_1);
      if (((ADDR_2 < lo) || (ADDR_2 > hi))) $display("Warning: RegFile: %m -- Address port 2 is out of bounds: %h", ADDR_2);
      if (((ADDR_3 < lo) || (ADDR_3 > hi))) $display("Warning: RegFile: %m -- Address port 3 is out of bounds: %h", ADDR_3);
      if (((ADDR_4 < lo) || (ADDR_4 > hi))) $display("Warning: RegFile: %m -- Address port 4 is out of bounds: %h", ADDR_4);
      if (((ADDR_5 < lo) || (ADDR_5 > hi))) $display("Warning: RegFile: %m -- Address port 5 is out of bounds: %h", ADDR_5);
      if (((WE && (ADDR_IN < lo)) || (ADDR_IN > hi))) $display("Warning: RegFile: %m -- Write Address port is out of bounds: %h", ADDR_IN);
    end
  end  /* runtime_check */
endmodule  /* \RegFile[wrapper.RTL.gpr_regfile.regfile]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 12695. */
module \mkMMU_Cache[wrapper.RTL.near_mem.dcache] (CLK, RST_N, set_verbosity_verbosity, EN_set_verbosity, RDY_set_verbosity, EN_server_reset_request_put, RDY_server_reset_request_put, EN_server_reset_response_get, RDY_server_reset_response_get, req_op, req_f3, req_addr, req_st_value, req_priv, req_sstatus_SUM, req_mstatus_MXR, req_satp, EN_req, valid, addr, word64, st_amo_val, exc, exc_code, EN_server_flush_request_put, RDY_server_flush_request_put, EN_server_flush_response_get, RDY_server_flush_response_get, EN_tlb_flush, RDY_tlb_flush, mem_master_awvalid, mem_master_awid, mem_master_awaddr, mem_master_awlen, mem_master_awsize, mem_master_awburst, mem_master_awlock, mem_master_awcache, mem_master_awprot, mem_master_awqos, mem_master_awregion, mem_master_awready, mem_master_wvalid, mem_master_wdata, mem_master_wstrb, mem_master_wlast, mem_master_wready, mem_master_bvalid, mem_master_bid, mem_master_bresp, mem_master_bready, mem_master_arvalid, mem_master_arid, mem_master_araddr, mem_master_arlen, mem_master_arsize, mem_master_arburst, mem_master_arlock, mem_master_arcache, mem_master_arprot, mem_master_arqos, mem_master_arregion, mem_master_arready, mem_master_rvalid, mem_master_rid, mem_master_rdata, mem_master_rresp, mem_master_rlast, mem_master_rready, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__rg_pa, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__rg_addr);
  input CLK;
  input RST_N;
  input [3:0] set_verbosity_verbosity;
  input EN_set_verbosity;
  output RDY_set_verbosity;
  input EN_server_reset_request_put;
  output RDY_server_reset_request_put;
  input EN_server_reset_response_get;
  output RDY_server_reset_response_get;
  input req_op;
  input [2:0] req_f3;
  input [31:0] req_addr;
  input [63:0] req_st_value;
  input [1:0] req_priv;
  input req_sstatus_SUM;
  input req_mstatus_MXR;
  input [31:0] req_satp;
  input EN_req;
  output valid;
  output [31:0] addr;
  output [63:0] word64;
  output [63:0] st_amo_val;
  output exc;
  output [3:0] exc_code;
  input EN_server_flush_request_put;
  output RDY_server_flush_request_put;
  input EN_server_flush_response_get;
  output RDY_server_flush_response_get;
  input EN_tlb_flush;
  output RDY_tlb_flush;
  output mem_master_awvalid;
  output [3:0] mem_master_awid;
  output [63:0] mem_master_awaddr;
  output [7:0] mem_master_awlen;
  output [2:0] mem_master_awsize;
  output [1:0] mem_master_awburst;
  output mem_master_awlock;
  output [3:0] mem_master_awcache;
  output [2:0] mem_master_awprot;
  output [3:0] mem_master_awqos;
  output [3:0] mem_master_awregion;
  input mem_master_awready;
  output mem_master_wvalid;
  output [63:0] mem_master_wdata;
  output [7:0] mem_master_wstrb;
  output mem_master_wlast;
  input mem_master_wready;
  input mem_master_bvalid;
  input [3:0] mem_master_bid;
  input [1:0] mem_master_bresp;
  output mem_master_bready;
  output mem_master_arvalid;
  output [3:0] mem_master_arid;
  output [63:0] mem_master_araddr;
  output [7:0] mem_master_arlen;
  output [2:0] mem_master_arsize;
  output [1:0] mem_master_arburst;
  output mem_master_arlock;
  output [3:0] mem_master_arcache;
  output [2:0] mem_master_arprot;
  output [3:0] mem_master_arqos;
  output [3:0] mem_master_arregion;
  input mem_master_arready;
  input mem_master_rvalid;
  input [3:0] mem_master_rid;
  input [63:0] mem_master_rdata;
  input [1:0] mem_master_rresp;
  input mem_master_rlast;
  output mem_master_rready;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  output [31:0] RTL__DOT__near_mem__DOT__dcache__DOT__rg_pa;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output [31:0] RTL__DOT__near_mem__DOT__dcache__DOT__rg_addr;

  parameter dmem_not_imem = 1'b1;

  wire CAN_FIRE_RL_rl_ST_AMO_response;
  wire CAN_FIRE_RL_rl_cache_refill_rsps_loop;
  wire CAN_FIRE_RL_rl_discard_write_rsp;
  wire CAN_FIRE_RL_rl_drive_exception_rsp;
  wire CAN_FIRE_RL_rl_fabric_send_write_req;
  wire CAN_FIRE_RL_rl_io_read_req;
  wire CAN_FIRE_RL_rl_io_read_rsp;
  wire CAN_FIRE_RL_rl_io_write_req;
  wire CAN_FIRE_RL_rl_maintain_io_read_rsp;
  wire CAN_FIRE_RL_rl_probe_and_immed_rsp;
  wire CAN_FIRE_RL_rl_rereq;
  wire CAN_FIRE_RL_rl_reset;
  wire CAN_FIRE_RL_rl_start_cache_refill;
  wire CAN_FIRE_RL_rl_start_reset;
  wire CAN_FIRE_mem_master_m_arready;
  wire CAN_FIRE_mem_master_m_awready;
  wire CAN_FIRE_mem_master_m_bvalid;
  wire CAN_FIRE_mem_master_m_rvalid;
  wire CAN_FIRE_mem_master_m_wready;
  wire CAN_FIRE_req;
  wire CAN_FIRE_server_flush_request_put;
  wire CAN_FIRE_server_flush_response_get;
  wire CAN_FIRE_server_reset_request_put;
  wire CAN_FIRE_server_reset_response_get;
  wire CAN_FIRE_set_verbosity;
  wire CAN_FIRE_tlb_flush;
  reg [63:0] CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q31;
  reg [63:0] CASE_rg_addr_BITS_2_TO_0_0x0_result2361_0x4_re_ETC__q32;
  reg [63:0] CASE_rg_addr_BITS_2_TO_0_0x0_result2428_0x4_re_ETC__q33;
  reg [63:0] CASE_rg_addr_BITS_2_TO_0_0x0_result8365_0x4_re_ETC__q29;
  reg [63:0] CASE_rg_addr_BITS_2_TO_0_0x0_result8430_0x4_re_ETC__q30;
  wire CLK;
  wire EN_req;
  wire EN_server_flush_request_put;
  wire EN_server_flush_response_get;
  wire EN_server_reset_request_put;
  wire EN_server_reset_response_get;
  wire EN_set_verbosity;
  wire EN_tlb_flush;
  reg [63:0] IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d264;
  reg [63:0] IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d285;
  reg [63:0] IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d427;
  reg [63:0] IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d447;
  reg [63:0] IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d247;
  reg [63:0] IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d276;
  reg [63:0] IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d411;
  reg [63:0] IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d439;
  reg [63:0] IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d157;
  reg [63:0] IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d167;
  reg [63:0] IF_rg_f3_16_EQ_0b0_17_THEN_IF_rg_addr_6_BITS_2_ETC___d178;
  wire MUX_dw_output_ld_val$wset_1__SEL_1;
  wire MUX_dw_output_ld_val$wset_1__SEL_2;
  wire MUX_dw_output_ld_val$wset_1__SEL_3;
  reg [63:0] MUX_dw_output_ld_val$wset_1__VAL_2;
  wire MUX_f_fabric_write_reqs$enq_1__SEL_1;
  wire [98:0] MUX_f_fabric_write_reqs$enq_1__VAL_1;
  wire [98:0] MUX_f_fabric_write_reqs$enq_1__VAL_2;
  wire [96:0] MUX_master_xactor_f_rd_addr$enq_1__VAL_1;
  wire [96:0] MUX_master_xactor_f_rd_addr$enq_1__VAL_2;
  wire [22:0] MUX_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire MUX_ram_state_and_ctag_cset$b_put_1__SEL_1;
  wire MUX_ram_word64_set$a_put_1__SEL_1;
  wire MUX_ram_word64_set$b_put_1__SEL_2;
  wire [8:0] MUX_ram_word64_set$b_put_2__VAL_2;
  wire [8:0] MUX_ram_word64_set$b_put_2__VAL_4;
  wire [6:0] MUX_rg_cset_in_cache$write_1__VAL_1;
  wire [6:0] MUX_rg_cset_in_cache$write_1__VAL_1_any_val;
  wire MUX_rg_error_during_refill$write_1__SEL_1;
  wire MUX_rg_exc_code$write_1__SEL_1;
  wire MUX_rg_exc_code$write_1__SEL_2;
  wire [3:0] MUX_rg_exc_code$write_1__VAL_1;
  wire MUX_rg_state$write_1__SEL_10;
  wire MUX_rg_state$write_1__SEL_2;
  wire MUX_rg_state$write_1__SEL_3;
  wire MUX_rg_state$write_1__SEL_7;
  wire MUX_rg_state$write_1__SEL_9;
  wire [3:0] MUX_rg_state$write_1__VAL_1;
  wire [3:0] MUX_rg_state$write_1__VAL_4;
  wire [3:0] MUX_rg_state$write_1__VAL_7;
  wire [3:0] MUX_rg_state$write_1__VAL_9;
  wire NOT_cfg_verbosity_read__0_ULE_1_1___d42;
  wire NOT_cfg_verbosity_read__0_ULE_2_30___d331;
  wire NOT_dmem_not_imem_10_OR_soc_map_m_is_mem_addr__ETC___d114;
  wire NOT_dmem_not_imem_10_OR_soc_map_m_is_mem_addr__ETC___d190;
  wire NOT_req_f3_BITS_1_TO_0_18_EQ_0b0_19_20_AND_NOT_ETC___d539;
  wire NOT_rg_op_1_2_AND_ram_state_and_ctag_cset_b_re_ETC___d305;
  wire RDY_server_flush_request_put;
  wire RDY_server_flush_response_get;
  wire RDY_server_reset_request_put;
  wire RDY_server_reset_response_get;
  wire RDY_set_verbosity;
  wire RDY_tlb_flush;
  wire RST_N;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire [31:0] RTL__DOT__near_mem__DOT__dcache__DOT__rg_addr;
  wire [31:0] RTL__DOT__near_mem__DOT__dcache__DOT__rg_pa;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire WILL_FIRE_RL_rl_ST_AMO_response;
  wire WILL_FIRE_RL_rl_cache_refill_rsps_loop;
  wire WILL_FIRE_RL_rl_discard_write_rsp;
  wire WILL_FIRE_RL_rl_drive_exception_rsp;
  wire WILL_FIRE_RL_rl_fabric_send_write_req;
  wire WILL_FIRE_RL_rl_io_read_req;
  wire WILL_FIRE_RL_rl_io_read_rsp;
  wire WILL_FIRE_RL_rl_io_write_req;
  wire WILL_FIRE_RL_rl_maintain_io_read_rsp;
  wire WILL_FIRE_RL_rl_probe_and_immed_rsp;
  wire WILL_FIRE_RL_rl_rereq;
  wire WILL_FIRE_RL_rl_reset;
  wire WILL_FIRE_RL_rl_start_cache_refill;
  wire WILL_FIRE_RL_rl_start_reset;
  wire WILL_FIRE_mem_master_m_arready;
  wire WILL_FIRE_mem_master_m_awready;
  wire WILL_FIRE_mem_master_m_bvalid;
  wire WILL_FIRE_mem_master_m_rvalid;
  wire WILL_FIRE_mem_master_m_wready;
  wire WILL_FIRE_req;
  wire WILL_FIRE_server_flush_request_put;
  wire WILL_FIRE_server_flush_response_get;
  wire WILL_FIRE_server_reset_request_put;
  wire WILL_FIRE_server_reset_response_get;
  wire WILL_FIRE_set_verbosity;
  wire WILL_FIRE_tlb_flush;
  wire [63:0] _theResult___snd_fst__h2707;
  wire [3:0] access_exc_code__h2256;
  wire [31:0] addr;
  wire [3:0] b__h14485;
  reg [3:0] cfg_verbosity;
  wire [3:0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;
  wire [31:0] cline_addr__h14583;
  wire [63:0] cline_fabric_addr__h14584;
  reg [3:0] ctr_wr_rsps_pending_crg;
  wire [3:0] ctr_wr_rsps_pending_crg$D_IN;
  wire ctr_wr_rsps_pending_crg$EN;
  wire ctr_wr_rsps_pending_crg$EN_port2__write;
  wire [3:0] ctr_wr_rsps_pending_crg$port0__write_1;
  wire [3:0] ctr_wr_rsps_pending_crg$port1__write_1;
  wire [3:0] ctr_wr_rsps_pending_crg$port2__read;
  wire [3:0] ctr_wr_rsps_pending_crg$port3__read;
  wire dmem_not_imem_AND_NOT_soc_map_m_is_mem_addr_0__ETC___d106;
  wire dw_valid$whas;
  wire exc;
  wire [3:0] exc_code;
  wire f_fabric_write_reqs$CLR;
  wire f_fabric_write_reqs$DEQ;
  wire [98:0] f_fabric_write_reqs$D_IN;
  wire [98:0] f_fabric_write_reqs$D_OUT;
  wire f_fabric_write_reqs$EMPTY_N;
  wire f_fabric_write_reqs$ENQ;
  wire f_fabric_write_reqs$FULL_N;
  wire f_reset_reqs$CLR;
  wire f_reset_reqs$DEQ;
  wire f_reset_reqs$D_IN;
  wire f_reset_reqs$D_OUT;
  wire f_reset_reqs$EMPTY_N;
  wire f_reset_reqs$ENQ;
  wire f_reset_reqs$FULL_N;
  wire f_reset_rsps$CLR;
  wire f_reset_rsps$DEQ;
  wire f_reset_rsps$D_IN;
  wire f_reset_rsps$D_OUT;
  wire f_reset_rsps$EMPTY_N;
  wire f_reset_rsps$ENQ;
  wire f_reset_rsps$FULL_N;
  wire [63:0] fabric_addr__h17243;
  reg [63:0] ld_val__h17594;
  wire master_xactor_f_rd_addr$CLR;
  wire master_xactor_f_rd_addr$DEQ;
  wire [96:0] master_xactor_f_rd_addr$D_IN;
  wire [96:0] master_xactor_f_rd_addr$D_OUT;
  wire master_xactor_f_rd_addr$EMPTY_N;
  wire master_xactor_f_rd_addr$ENQ;
  wire master_xactor_f_rd_addr$FULL_N;
  wire master_xactor_f_rd_data$CLR;
  wire master_xactor_f_rd_data$DEQ;
  wire [70:0] master_xactor_f_rd_data$D_IN;
  wire [70:0] master_xactor_f_rd_data$D_OUT;
  wire master_xactor_f_rd_data$EMPTY_N;
  wire master_xactor_f_rd_data$ENQ;
  wire master_xactor_f_rd_data$FULL_N;
  wire [7:0] master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1;
  wire [7:0] master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4;
  wire [15:0] master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2;
  wire [7:0] master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5;
  wire [15:0] master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6;
  wire [7:0] master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7;
  wire [31:0] master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3;
  wire [7:0] master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8;
  wire [15:0] master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9;
  wire [7:0] master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11;
  wire [7:0] master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12;
  wire [31:0] master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10;
  wire [15:0] master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13;
  wire [7:0] master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14;
  wire master_xactor_f_wr_addr$CLR;
  wire master_xactor_f_wr_addr$DEQ;
  wire [96:0] master_xactor_f_wr_addr$D_IN;
  wire [96:0] master_xactor_f_wr_addr$D_OUT;
  wire master_xactor_f_wr_addr$EMPTY_N;
  wire master_xactor_f_wr_addr$ENQ;
  wire master_xactor_f_wr_addr$FULL_N;
  wire master_xactor_f_wr_data$CLR;
  wire master_xactor_f_wr_data$DEQ;
  wire [72:0] master_xactor_f_wr_data$D_IN;
  wire [72:0] master_xactor_f_wr_data$D_OUT;
  wire master_xactor_f_wr_data$EMPTY_N;
  wire master_xactor_f_wr_data$ENQ;
  wire master_xactor_f_wr_data$FULL_N;
  wire master_xactor_f_wr_resp$CLR;
  wire master_xactor_f_wr_resp$DEQ;
  wire [5:0] master_xactor_f_wr_resp$D_IN;
  wire [5:0] master_xactor_f_wr_resp$D_OUT;
  wire master_xactor_f_wr_resp$EMPTY_N;
  wire master_xactor_f_wr_resp$ENQ;
  wire master_xactor_f_wr_resp$FULL_N;
  wire [63:0] mem_master_araddr;
  wire [1:0] mem_master_arburst;
  wire [3:0] mem_master_arcache;
  wire [3:0] mem_master_arid;
  wire [7:0] mem_master_arlen;
  wire mem_master_arlock;
  wire [2:0] mem_master_arprot;
  wire [3:0] mem_master_arqos;
  wire mem_master_arready;
  wire [3:0] mem_master_arregion;
  wire [2:0] mem_master_arsize;
  wire mem_master_arvalid;
  wire [63:0] mem_master_awaddr;
  wire [1:0] mem_master_awburst;
  wire [3:0] mem_master_awcache;
  wire [3:0] mem_master_awid;
  wire [7:0] mem_master_awlen;
  wire mem_master_awlock;
  wire [2:0] mem_master_awprot;
  wire [3:0] mem_master_awqos;
  wire mem_master_awready;
  wire [3:0] mem_master_awregion;
  wire [2:0] mem_master_awsize;
  wire mem_master_awvalid;
  wire [3:0] mem_master_bid;
  wire mem_master_bready;
  wire [1:0] mem_master_bresp;
  wire mem_master_bvalid;
  wire [63:0] mem_master_rdata;
  wire [3:0] mem_master_rid;
  wire mem_master_rlast;
  wire mem_master_rready;
  wire [1:0] mem_master_rresp;
  wire mem_master_rvalid;
  wire [63:0] mem_master_wdata;
  wire mem_master_wlast;
  wire mem_master_wready;
  wire [7:0] mem_master_wstrb;
  wire mem_master_wvalid;
  wire [63:0] mem_req_wr_addr_awaddr__h2473;
  reg [63:0] mem_req_wr_data_wdata__h2699;
  reg [7:0] mem_req_wr_data_wstrb__h2700;
  wire [21:0] pa_ctag__h4952;
  wire [6:0] ram_state_and_ctag_cset$ADDRA;
  wire [6:0] ram_state_and_ctag_cset$ADDRB;
  wire [22:0] ram_state_and_ctag_cset$DIA;
  wire [22:0] ram_state_and_ctag_cset$DIB;
  wire [22:0] ram_state_and_ctag_cset$DOB;
  wire ram_state_and_ctag_cset$ENA;
  wire ram_state_and_ctag_cset$ENB;
  wire ram_state_and_ctag_cset$WEA;
  wire ram_state_and_ctag_cset$WEB;
  wire ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d102;
  wire [8:0] ram_word64_set$ADDRA;
  reg [8:0] ram_word64_set$ADDRB;
  wire [63:0] ram_word64_set$DIA;
  reg [63:0] ram_word64_set$DIB;
  wire [63:0] ram_word64_set$DOB;
  wire ram_word64_set$ENA;
  wire ram_word64_set$ENB;
  wire ram_word64_set$WEA;
  wire ram_word64_set$WEB;
  wire [31:0] req_addr;
  wire [2:0] req_f3;
  wire req_f3_BITS_1_TO_0_18_EQ_0b0_19_OR_req_f3_BITS_ETC___d548;
  wire req_mstatus_MXR;
  wire req_op;
  wire [1:0] req_priv;
  wire [31:0] req_satp;
  wire req_sstatus_SUM;
  wire [63:0] req_st_value;
  wire [63:0] result__h11657;
  wire [63:0] result__h11685;
  wire [63:0] result__h11713;
  wire [63:0] result__h11741;
  wire [63:0] result__h11769;
  wire [63:0] result__h11797;
  wire [63:0] result__h11825;
  wire [63:0] result__h11870;
  wire [63:0] result__h11898;
  wire [63:0] result__h11926;
  wire [63:0] result__h11954;
  wire [63:0] result__h11982;
  wire [63:0] result__h12010;
  wire [63:0] result__h12038;
  wire [63:0] result__h12066;
  wire [63:0] result__h12111;
  wire [63:0] result__h12139;
  wire [63:0] result__h12167;
  wire [63:0] result__h12195;
  wire [63:0] result__h12236;
  wire [63:0] result__h12264;
  wire [63:0] result__h12292;
  wire [63:0] result__h12320;
  wire [63:0] result__h12361;
  wire [63:0] result__h12389;
  wire [63:0] result__h12428;
  wire [63:0] result__h12456;
  wire [63:0] result__h17654;
  wire [63:0] result__h17684;
  wire [63:0] result__h17711;
  wire [63:0] result__h17738;
  wire [63:0] result__h17765;
  wire [63:0] result__h17792;
  wire [63:0] result__h17819;
  wire [63:0] result__h17846;
  wire [63:0] result__h17890;
  wire [63:0] result__h17917;
  wire [63:0] result__h17944;
  wire [63:0] result__h17971;
  wire [63:0] result__h17998;
  wire [63:0] result__h18025;
  wire [63:0] result__h18052;
  wire [63:0] result__h18079;
  wire [63:0] result__h18123;
  wire [63:0] result__h18150;
  wire [63:0] result__h18177;
  wire [63:0] result__h18204;
  wire [63:0] result__h18244;
  wire [63:0] result__h18271;
  wire [63:0] result__h18298;
  wire [63:0] result__h18325;
  wire [63:0] result__h18365;
  wire [63:0] result__h18392;
  wire [63:0] result__h18430;
  wire [63:0] result__h18457;
  wire [63:0] result__h5301;
  reg [31:0] rg_addr;
  wire [31:0] rg_addr$D_IN;
  wire rg_addr$EN;
  reg [6:0] rg_cset_in_cache;
  wire [6:0] rg_cset_in_cache$D_IN;
  wire rg_cset_in_cache$EN;
  reg rg_error_during_refill;
  wire rg_error_during_refill$D_IN;
  wire rg_error_during_refill$EN;
  reg [3:0] rg_exc_code;
  reg [3:0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;
  reg [2:0] rg_f3;
  wire [2:0] rg_f3$D_IN;
  wire rg_f3$EN;
  reg [63:0] rg_ld_val;
  wire [63:0] rg_ld_val$D_IN;
  wire rg_ld_val$EN;
  reg [31:0] rg_lower_word32;
  wire [31:0] rg_lower_word32$D_IN;
  wire rg_lower_word32$EN;
  reg rg_lower_word32_full;
  wire rg_lower_word32_full$D_IN;
  wire rg_lower_word32_full$EN;
  reg rg_op;
  wire rg_op$D_IN;
  wire rg_op$EN;
  wire rg_op_1_AND_ram_state_and_ctag_cset_b_read__5__ETC___d180;
  reg [31:0] rg_pa;
  wire [31:0] rg_pa$D_IN;
  wire rg_pa$EN;
  reg [31:0] rg_pte_pa;
  wire [31:0] rg_pte_pa$D_IN;
  wire rg_pte_pa$EN;
  reg [63:0] rg_st_amo_val;
  wire [63:0] rg_st_amo_val$D_IN;
  wire rg_st_amo_val$EN;
  reg [3:0] rg_state;
  reg [3:0] rg_state$D_IN;
  wire rg_state$EN;
  reg [8:0] rg_word64_set_in_cache;
  wire [8:0] rg_word64_set_in_cache$D_IN;
  wire rg_word64_set_in_cache$EN;
  wire [3:0] set_verbosity_verbosity;
  wire [5:0] shift_bits__h2487;
  wire [63:0] soc_map$m_is_IO_addr_addr;
  wire soc_map$m_is_mem_addr;
  wire [63:0] soc_map$m_is_mem_addr_addr;
  wire [63:0] soc_map$m_is_near_mem_IO_addr_addr;
  wire [63:0] st_amo_val;
  wire [7:0] strobe64__h2637;
  wire [7:0] strobe64__h2639;
  wire [7:0] strobe64__h2641;
  reg [31:0] v__h12534;
  reg [31:0] v__h12540;
  reg [31:0] v__h14525;
  reg [31:0] v__h14531;
  reg [31:0] v__h15330;
  reg [31:0] v__h15336;
  reg [31:0] v__h15572;
  reg [31:0] v__h15578;
  reg [31:0] v__h17185;
  reg [31:0] v__h17191;
  reg [31:0] v__h17479;
  reg [31:0] v__h17485;
  reg [31:0] v__h18579;
  reg [31:0] v__h18585;
  reg [31:0] v__h18686;
  reg [31:0] v__h18692;
  reg [31:0] v__h18791;
  reg [31:0] v__h18797;
  reg [31:0] v__h18871;
  reg [31:0] v__h18877;
  reg [31:0] v__h19460;
  reg [31:0] v__h19466;
  reg [31:0] v__h19499;
  reg [31:0] v__h19505;
  reg [31:0] v__h19846;
  reg [31:0] v__h19852;
  reg [31:0] v__h2942;
  reg [31:0] v__h2948;
  reg [31:0] v__h3477;
  reg [31:0] v__h3483;
  reg [31:0] v__h3842;
  reg [31:0] v__h3848;
  reg [31:0] v__h3943;
  reg [31:0] v__h3949;
  reg [31:0] v__h4092;
  reg [31:0] v__h4098;
  wire valid;
  reg [2:0] value__h17372;
  reg [63:0] word64;
  wire [15:0] word64094_BITS_15_TO_0__q16;
  wire [7:0] word64094_BITS_15_TO_8__q18;
  wire [7:0] word64094_BITS_23_TO_16__q19;
  wire [31:0] word64094_BITS_31_TO_0__q17;
  wire [15:0] word64094_BITS_31_TO_16__q20;
  wire [7:0] word64094_BITS_31_TO_24__q21;
  wire [7:0] word64094_BITS_39_TO_32__q22;
  wire [15:0] word64094_BITS_47_TO_32__q23;
  wire [7:0] word64094_BITS_47_TO_40__q25;
  wire [7:0] word64094_BITS_55_TO_48__q26;
  wire [31:0] word64094_BITS_63_TO_32__q24;
  wire [15:0] word64094_BITS_63_TO_48__q27;
  wire [7:0] word64094_BITS_63_TO_56__q28;
  wire [7:0] word64094_BITS_7_TO_0__q15;
  wire [63:0] word64__h5094;
  reg [2:0] x__h2520;
  wire [63:0] y__h5337;


  assign CAN_FIRE_mem_master_m_arready = 1'b1;
  assign CAN_FIRE_mem_master_m_awready = 1'b1;
  assign CAN_FIRE_mem_master_m_bvalid = 1'b1;
  assign CAN_FIRE_mem_master_m_rvalid = 1'b1;
  assign CAN_FIRE_mem_master_m_wready = 1'b1;
  assign CAN_FIRE_req = 1'b1;
  assign CAN_FIRE_set_verbosity = 1'b1;
  assign CAN_FIRE_tlb_flush = 1'b1;
  assign RDY_set_verbosity = 1'b1;
  assign RDY_tlb_flush = 1'b1;
  assign WILL_FIRE_mem_master_m_arready = 1'b1;
  assign WILL_FIRE_mem_master_m_awready = 1'b1;
  assign WILL_FIRE_mem_master_m_bvalid = 1'b1;
  assign WILL_FIRE_mem_master_m_rvalid = 1'b1;
  assign WILL_FIRE_mem_master_m_wready = 1'b1;
  assign ctr_wr_rsps_pending_crg$EN = 1'b1;
  assign f_fabric_write_reqs$CLR = 1'b0;
  assign f_reset_reqs$CLR = 1'b0;
  assign f_reset_rsps$CLR = 1'b0;
  assign ram_state_and_ctag_cset$WEA = 1'b1;
  assign ram_state_and_ctag_cset$WEB = 1'b0;
  assign ram_word64_set$WEA = 1'b1;
  assign ram_word64_set$WEB = 1'b0;
  assign rg_lower_word32$D_IN = 32'h00000000;
  assign rg_lower_word32$EN = 1'b0;
  assign rg_lower_word32_full$D_IN = 1'b0;
  assign rg_pte_pa$D_IN = 32'h00000000;
  assign rg_pte_pa$EN = 1'b0;
  assign soc_map$m_is_IO_addr_addr = 64'h0000000000000000;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0000000000000000;

  assign st_amo_val = (MUX_dw_output_ld_val$wset_1__SEL_2 ? 64'h0000000000000000 : rg_st_amo_val);
  assign exc = (rg_state == 4'h4);
  assign mem_master_awid = master_xactor_f_wr_addr$D_OUT[96:93];
  assign mem_master_awaddr = master_xactor_f_wr_addr$D_OUT[92:29];
  assign mem_master_awlen = master_xactor_f_wr_addr$D_OUT[28:21];
  assign mem_master_awsize = master_xactor_f_wr_addr$D_OUT[20:18];
  assign mem_master_awburst = master_xactor_f_wr_addr$D_OUT[17:16];
  assign mem_master_awlock = master_xactor_f_wr_addr$D_OUT[15];
  assign mem_master_awcache = master_xactor_f_wr_addr$D_OUT[14:11];
  assign mem_master_awprot = master_xactor_f_wr_addr$D_OUT[10:8];
  assign mem_master_awqos = master_xactor_f_wr_addr$D_OUT[7:4];
  assign mem_master_awregion = master_xactor_f_wr_addr$D_OUT[3:0];
  assign mem_master_wdata = master_xactor_f_wr_data$D_OUT[72:9];
  assign mem_master_wstrb = master_xactor_f_wr_data$D_OUT[8:1];
  assign mem_master_wlast = master_xactor_f_wr_data$D_OUT[0];
  assign mem_master_arid = master_xactor_f_rd_addr$D_OUT[96:93];
  assign mem_master_araddr = master_xactor_f_rd_addr$D_OUT[92:29];
  assign mem_master_arlen = master_xactor_f_rd_addr$D_OUT[28:21];
  assign mem_master_arsize = master_xactor_f_rd_addr$D_OUT[20:18];
  assign mem_master_arburst = master_xactor_f_rd_addr$D_OUT[17:16];
  assign mem_master_arlock = master_xactor_f_rd_addr$D_OUT[15];
  assign mem_master_arcache = master_xactor_f_rd_addr$D_OUT[14:11];
  assign mem_master_arprot = master_xactor_f_rd_addr$D_OUT[10:8];
  assign mem_master_arqos = master_xactor_f_rd_addr$D_OUT[7:4];
  assign mem_master_arregion = master_xactor_f_rd_addr$D_OUT[3:0];
  assign CAN_FIRE_RL_rl_rereq = (rg_state == 4'ha);
  assign CAN_FIRE_RL_rl_ST_AMO_response = (rg_state == 4'hb);
  assign CAN_FIRE_RL_rl_maintain_io_read_rsp = (rg_state == 4'he);
  assign CAN_FIRE_RL_rl_drive_exception_rsp = (rg_state == 4'h4);
  assign WILL_FIRE_RL_rl_drive_exception_rsp = (rg_state == 4'h4);
  assign MUX_f_fabric_write_reqs$enq_1__VAL_1 = {rg_f3, rg_addr, rg_st_amo_val};
  assign MUX_f_fabric_write_reqs$enq_1__VAL_2 = {rg_f3, rg_pa, rg_st_amo_val};
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_1 = {4'h0, cline_fabric_addr__h14584, 29'h006d0000};
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_2 = {4'h0, fabric_addr__h17243, 8'h00, value__h17372, 18'h10000};
  assign MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 = {3'h4, rg_pa[31:12]};
  assign MUX_ram_word64_set$b_put_2__VAL_2 = (rg_word64_set_in_cache + 9'h001);
  assign MUX_ram_word64_set$b_put_2__VAL_4 = {rg_addr[11:5], 2'h0};
  assign MUX_rg_cset_in_cache$write_1__VAL_1 = (rg_cset_in_cache + 7'h01);
  assign MUX_rg_exc_code$write_1__VAL_1 = (req_op ? 4'h6 : 4'h4);
  assign MUX_rg_state$write_1__VAL_1 = (NOT_req_f3_BITS_1_TO_0_18_EQ_0b0_19_20_AND_NOT_ETC___d539 ? 4'h4 : 4'h3);
  assign MUX_rg_state$write_1__VAL_4 = ((master_xactor_f_rd_data$D_OUT[2:1] == 2'h0) ? 4'he : 4'h4);
  assign MUX_rg_state$write_1__VAL_7 = (((master_xactor_f_rd_data$D_OUT[2:1] != 2'h0) | rg_error_during_refill) ? 4'h4 : 4'ha);
  assign MUX_rg_state$write_1__VAL_9 = ((dmem_not_imem & (~|soc_map$m_is_mem_addr)) ? 4'hc : (rg_op ? 4'hb : 4'h8));
  assign ctr_wr_rsps_pending_crg$port0__write_1 = (ctr_wr_rsps_pending_crg + 4'h1);
  assign ctr_wr_rsps_pending_crg$port1__write_1 = (b__h14485 - 4'h1);
  assign ctr_wr_rsps_pending_crg$port2__read = (CAN_FIRE_RL_rl_discard_write_rsp ? ctr_wr_rsps_pending_crg$port1__write_1 : b__h14485);
  assign ctr_wr_rsps_pending_crg$port3__read = (ctr_wr_rsps_pending_crg$EN_port2__write ? 4'h0 : ctr_wr_rsps_pending_crg$port2__read);
  assign rg_cset_in_cache$D_IN = (WILL_FIRE_RL_rl_reset ? MUX_rg_cset_in_cache$write_1__VAL_1_any_val : 7'h00);
  assign rg_pa$D_IN = (EN_req ? req_addr : rg_addr);
  assign rg_word64_set_in_cache$D_IN = (MUX_ram_word64_set$b_put_1__SEL_2 ? MUX_ram_word64_set$b_put_2__VAL_2 : MUX_ram_word64_set$b_put_2__VAL_4);
  assign f_fabric_write_reqs$D_IN = (MUX_f_fabric_write_reqs$enq_1__SEL_1 ? MUX_f_fabric_write_reqs$enq_1__VAL_1 : MUX_f_fabric_write_reqs$enq_1__VAL_2);
  assign f_reset_reqs$D_IN = (~|EN_server_reset_request_put);
  assign master_xactor_f_rd_addr$D_IN = (WILL_FIRE_RL_rl_start_cache_refill ? MUX_master_xactor_f_rd_addr$enq_1__VAL_1 : MUX_master_xactor_f_rd_addr$enq_1__VAL_2);
  assign master_xactor_f_rd_data$D_IN = {mem_master_rid, mem_master_rdata, mem_master_rresp, mem_master_rlast};
  assign master_xactor_f_wr_addr$D_IN = {4'h0, mem_req_wr_addr_awaddr__h2473, 8'h00, x__h2520, 18'h10000};
  assign master_xactor_f_wr_data$D_IN = {mem_req_wr_data_wdata__h2699, mem_req_wr_data_wstrb__h2700, 1'b1};
  assign master_xactor_f_wr_resp$D_IN = {mem_master_bid, mem_master_bresp};
  assign ram_state_and_ctag_cset$ADDRA = (WILL_FIRE_RL_rl_start_cache_refill ? rg_addr[11:5] : rg_cset_in_cache);
  assign ram_state_and_ctag_cset$ADDRB = (MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ? req_addr[11:5] : rg_addr[11:5]);
  assign ram_state_and_ctag_cset$DIA = (WILL_FIRE_RL_rl_start_cache_refill ? MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 : 23'h2aaaaa);
  assign ram_state_and_ctag_cset$DIB = (MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ? 23'h2aaaaa : 23'h2aaaaa);
  assign ram_word64_set$ADDRA = (MUX_ram_word64_set$a_put_1__SEL_1 ? rg_word64_set_in_cache : rg_addr[11:3]);
  assign ram_word64_set$DIA = (MUX_ram_word64_set$a_put_1__SEL_1 ? master_xactor_f_rd_data$D_OUT[66:3] : IF_rg_f3_16_EQ_0b0_17_THEN_IF_rg_addr_6_BITS_2_ETC___d178);
  assign soc_map$m_is_mem_addr_addr = {32'h00000000, rg_addr};
  assign NOT_cfg_verbosity_read__0_ULE_1_1___d42 = (cfg_verbosity > 4'h1);
  assign NOT_cfg_verbosity_read__0_ULE_2_30___d331 = (cfg_verbosity > 4'h2);
  assign _theResult___snd_fst__h2707 = (f_fabric_write_reqs$D_OUT[63:0] << shift_bits__h2487);
  assign access_exc_code__h2256 = (rg_op ? 4'h7 : 4'h5);
  assign b__h14485 = (CAN_FIRE_RL_rl_fabric_send_write_req ? ctr_wr_rsps_pending_crg$port0__write_1 : ctr_wr_rsps_pending_crg);
  assign cline_addr__h14583 = {rg_pa[31:5], 5'h00};
  assign cline_fabric_addr__h14584 = {32'h00000000, cline_addr__h14583};
  assign fabric_addr__h17243 = {32'h00000000, rg_pa};
  assign master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1 = master_xactor_f_rd_data$D_OUT[10:3];
  assign master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4 = master_xactor_f_rd_data$D_OUT[18:11];
  assign master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2 = master_xactor_f_rd_data$D_OUT[18:3];
  assign master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5 = master_xactor_f_rd_data$D_OUT[26:19];
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6 = master_xactor_f_rd_data$D_OUT[34:19];
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7 = master_xactor_f_rd_data$D_OUT[34:27];
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3 = master_xactor_f_rd_data$D_OUT[34:3];
  assign master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8 = master_xactor_f_rd_data$D_OUT[42:35];
  assign master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9 = master_xactor_f_rd_data$D_OUT[50:35];
  assign master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11 = master_xactor_f_rd_data$D_OUT[50:43];
  assign master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12 = master_xactor_f_rd_data$D_OUT[58:51];
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10 = master_xactor_f_rd_data$D_OUT[66:35];
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13 = master_xactor_f_rd_data$D_OUT[66:51];
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14 = master_xactor_f_rd_data$D_OUT[66:59];
  assign mem_req_wr_addr_awaddr__h2473 = {32'h00000000, f_fabric_write_reqs$D_OUT[95:64]};
  assign pa_ctag__h4952 = {2'h0, rg_addr[31:12]};
  assign ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d102 = (ram_state_and_ctag_cset$DOB[21:0] == pa_ctag__h4952);
  assign result__h11657 = {{56{word64094_BITS_15_TO_8__q18[7]}}, word64094_BITS_15_TO_8__q18};
  assign result__h11685 = {{56{word64094_BITS_23_TO_16__q19[7]}}, word64094_BITS_23_TO_16__q19};
  assign result__h11713 = {{56{word64094_BITS_31_TO_24__q21[7]}}, word64094_BITS_31_TO_24__q21};
  assign result__h11741 = {{56{word64094_BITS_39_TO_32__q22[7]}}, word64094_BITS_39_TO_32__q22};
  assign result__h11769 = {{56{word64094_BITS_47_TO_40__q25[7]}}, word64094_BITS_47_TO_40__q25};
  assign result__h11797 = {{56{word64094_BITS_55_TO_48__q26[7]}}, word64094_BITS_55_TO_48__q26};
  assign result__h11825 = {{56{word64094_BITS_63_TO_56__q28[7]}}, word64094_BITS_63_TO_56__q28};
  assign result__h11870 = {56'h00000000000000, word64__h5094[7:0]};
  assign result__h11898 = {56'h00000000000000, word64__h5094[15:8]};
  assign result__h11926 = {56'h00000000000000, word64__h5094[23:16]};
  assign result__h11954 = {56'h00000000000000, word64__h5094[31:24]};
  assign result__h11982 = {56'h00000000000000, word64__h5094[39:32]};
  assign result__h12010 = {56'h00000000000000, word64__h5094[47:40]};
  assign result__h12038 = {56'h00000000000000, word64__h5094[55:48]};
  assign result__h12066 = {56'h00000000000000, word64__h5094[63:56]};
  assign result__h12111 = {{48{word64094_BITS_15_TO_0__q16[15]}}, word64094_BITS_15_TO_0__q16};
  assign result__h12139 = {{48{word64094_BITS_31_TO_16__q20[15]}}, word64094_BITS_31_TO_16__q20};
  assign result__h12167 = {{48{word64094_BITS_47_TO_32__q23[15]}}, word64094_BITS_47_TO_32__q23};
  assign result__h12195 = {{48{word64094_BITS_63_TO_48__q27[15]}}, word64094_BITS_63_TO_48__q27};
  assign result__h12236 = {48'h000000000000, word64__h5094[15:0]};
  assign result__h12264 = {48'h000000000000, word64__h5094[31:16]};
  assign result__h12292 = {48'h000000000000, word64__h5094[47:32]};
  assign result__h12320 = {48'h000000000000, word64__h5094[63:48]};
  assign result__h12361 = {{32{word64094_BITS_31_TO_0__q17[31]}}, word64094_BITS_31_TO_0__q17};
  assign result__h12389 = {{32{word64094_BITS_63_TO_32__q24[31]}}, word64094_BITS_63_TO_32__q24};
  assign result__h12428 = {32'h00000000, word64__h5094[31:0]};
  assign result__h12456 = {32'h00000000, word64__h5094[63:32]};
  assign result__h17654 = {{56{master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1[7]}}, master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1};
  assign result__h17684 = {{56{master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4[7]}}, master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4};
  assign result__h17711 = {{56{master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5[7]}}, master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5};
  assign result__h17738 = {{56{master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7[7]}}, master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7};
  assign result__h17765 = {{56{master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8[7]}}, master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8};
  assign result__h17792 = {{56{master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11[7]}}, master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11};
  assign result__h17819 = {{56{master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12[7]}}, master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12};
  assign result__h17846 = {{56{master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14[7]}}, master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14};
  assign result__h17890 = {56'h00000000000000, master_xactor_f_rd_data$D_OUT[10:3]};
  assign result__h17917 = {56'h00000000000000, master_xactor_f_rd_data$D_OUT[18:11]};
  assign result__h17944 = {56'h00000000000000, master_xactor_f_rd_data$D_OUT[26:19]};
  assign result__h17971 = {56'h00000000000000, master_xactor_f_rd_data$D_OUT[34:27]};
  assign result__h17998 = {56'h00000000000000, master_xactor_f_rd_data$D_OUT[42:35]};
  assign result__h18025 = {56'h00000000000000, master_xactor_f_rd_data$D_OUT[50:43]};
  assign result__h18052 = {56'h00000000000000, master_xactor_f_rd_data$D_OUT[58:51]};
  assign result__h18079 = {56'h00000000000000, master_xactor_f_rd_data$D_OUT[66:59]};
  assign result__h18123 = {{48{master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2[15]}}, master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2};
  assign result__h18150 = {{48{master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6[15]}}, master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6};
  assign result__h18177 = {{48{master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9[15]}}, master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9};
  assign result__h18204 = {{48{master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13[15]}}, master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13};
  assign result__h18244 = {48'h000000000000, master_xactor_f_rd_data$D_OUT[18:3]};
  assign result__h18271 = {48'h000000000000, master_xactor_f_rd_data$D_OUT[34:19]};
  assign result__h18298 = {48'h000000000000, master_xactor_f_rd_data$D_OUT[50:35]};
  assign result__h18325 = {48'h000000000000, master_xactor_f_rd_data$D_OUT[66:51]};
  assign result__h18365 = {{32{master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3[31]}}, master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3};
  assign result__h18392 = {{32{master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10[31]}}, master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10};
  assign result__h18430 = {32'h00000000, master_xactor_f_rd_data$D_OUT[34:3]};
  assign result__h18457 = {32'h00000000, master_xactor_f_rd_data$D_OUT[66:35]};
  assign result__h5301 = {{56{word64094_BITS_7_TO_0__q15[7]}}, word64094_BITS_7_TO_0__q15};
  assign shift_bits__h2487 = {f_fabric_write_reqs$D_OUT[66:64], 3'h0};
  assign strobe64__h2637 = (8'h01 << f_fabric_write_reqs$D_OUT[66:64]);
  assign strobe64__h2639 = (8'h03 << f_fabric_write_reqs$D_OUT[66:64]);
  assign strobe64__h2641 = (8'h0f << f_fabric_write_reqs$D_OUT[66:64]);
  assign word64094_BITS_15_TO_0__q16 = word64__h5094[15:0];
  assign word64094_BITS_15_TO_8__q18 = word64__h5094[15:8];
  assign word64094_BITS_23_TO_16__q19 = word64__h5094[23:16];
  assign word64094_BITS_31_TO_0__q17 = word64__h5094[31:0];
  assign word64094_BITS_31_TO_16__q20 = word64__h5094[31:16];
  assign word64094_BITS_31_TO_24__q21 = word64__h5094[31:24];
  assign word64094_BITS_39_TO_32__q22 = word64__h5094[39:32];
  assign word64094_BITS_47_TO_32__q23 = word64__h5094[47:32];
  assign word64094_BITS_47_TO_40__q25 = word64__h5094[47:40];
  assign word64094_BITS_55_TO_48__q26 = word64__h5094[55:48];
  assign word64094_BITS_63_TO_32__q24 = word64__h5094[63:32];
  assign word64094_BITS_63_TO_48__q27 = word64__h5094[63:48];
  assign word64094_BITS_63_TO_56__q28 = word64__h5094[63:56];
  assign word64094_BITS_7_TO_0__q15 = word64__h5094[7:0];
  assign y__h5337 = {64{(ram_state_and_ctag_cset$DOB[22] & ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d102)}};
  assign WILL_FIRE_set_verbosity = EN_set_verbosity;
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put;
  assign RDY_server_reset_response_get = ((~|f_reset_rsps$D_OUT) & f_reset_rsps$EMPTY_N);
  assign CAN_FIRE_server_reset_response_get = ((~|f_reset_rsps$D_OUT) & f_reset_rsps$EMPTY_N);
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get;
  assign WILL_FIRE_req = EN_req;
  assign valid = dw_valid$whas;
  assign addr = rg_addr;
  assign exc_code = rg_exc_code;
  assign RDY_server_flush_request_put = f_reset_reqs$FULL_N;
  assign CAN_FIRE_server_flush_request_put = f_reset_reqs$FULL_N;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put;
  assign RDY_server_flush_response_get = (f_reset_rsps$D_OUT & f_reset_rsps$EMPTY_N);
  assign CAN_FIRE_server_flush_response_get = (f_reset_rsps$D_OUT & f_reset_rsps$EMPTY_N);
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush;
  assign mem_master_awvalid = master_xactor_f_wr_addr$EMPTY_N;
  assign mem_master_wvalid = master_xactor_f_wr_data$EMPTY_N;
  assign mem_master_bready = master_xactor_f_wr_resp$FULL_N;
  assign mem_master_arvalid = master_xactor_f_rd_addr$EMPTY_N;
  assign mem_master_rready = master_xactor_f_rd_data$FULL_N;
  assign CAN_FIRE_RL_rl_fabric_send_write_req = ((f_fabric_write_reqs$EMPTY_N & master_xactor_f_wr_addr$FULL_N) & master_xactor_f_wr_data$FULL_N);
  assign WILL_FIRE_RL_rl_fabric_send_write_req = CAN_FIRE_RL_rl_fabric_send_write_req;
  assign CAN_FIRE_RL_rl_reset = (((rg_cset_in_cache != 7'h7f) | (f_reset_reqs$EMPTY_N & f_reset_rsps$FULL_N)) & (rg_state == 4'h1));
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset;
  assign CAN_FIRE_RL_rl_probe_and_immed_rsp = ((((dmem_not_imem & (~|soc_map$m_is_mem_addr)) | (~|rg_op)) | f_fabric_write_reqs$FULL_N) & (rg_state == 4'h3));
  assign WILL_FIRE_RL_rl_probe_and_immed_rsp = (CAN_FIRE_RL_rl_probe_and_immed_rsp & (~|WILL_FIRE_RL_rl_start_reset));
  assign CAN_FIRE_RL_rl_start_cache_refill = ((master_xactor_f_rd_addr$FULL_N & (rg_state == 4'h8)) & (b__h14485 == 4'h0));
  assign WILL_FIRE_RL_rl_start_cache_refill = ((CAN_FIRE_RL_rl_start_cache_refill & (~|WILL_FIRE_RL_rl_start_reset)) & (~|EN_req));
  assign CAN_FIRE_RL_rl_cache_refill_rsps_loop = (master_xactor_f_rd_data$EMPTY_N & (rg_state == 4'h9));
  assign WILL_FIRE_RL_rl_cache_refill_rsps_loop = ((CAN_FIRE_RL_rl_cache_refill_rsps_loop & (~|WILL_FIRE_RL_rl_start_reset)) & (~|EN_req));
  assign WILL_FIRE_RL_rl_rereq = ((CAN_FIRE_RL_rl_rereq & (~|WILL_FIRE_RL_rl_start_reset)) & (~|EN_req));
  assign WILL_FIRE_RL_rl_ST_AMO_response = CAN_FIRE_RL_rl_ST_AMO_response;
  assign CAN_FIRE_RL_rl_io_read_req = (((master_xactor_f_rd_addr$FULL_N & (rg_state == 4'hc)) & (~|rg_op)) & (b__h14485 == 4'h0));
  assign WILL_FIRE_RL_rl_io_read_req = (CAN_FIRE_RL_rl_io_read_req & (~|WILL_FIRE_RL_rl_start_reset));
  assign CAN_FIRE_RL_rl_io_read_rsp = (master_xactor_f_rd_data$EMPTY_N & (rg_state == 4'hd));
  assign WILL_FIRE_RL_rl_io_read_rsp = (CAN_FIRE_RL_rl_io_read_rsp & (~|WILL_FIRE_RL_rl_start_reset));
  assign WILL_FIRE_RL_rl_maintain_io_read_rsp = CAN_FIRE_RL_rl_maintain_io_read_rsp;
  assign CAN_FIRE_RL_rl_io_write_req = ((f_fabric_write_reqs$FULL_N & (rg_state == 4'hc)) & rg_op);
  assign WILL_FIRE_RL_rl_io_write_req = MUX_rg_state$write_1__SEL_3;
  assign CAN_FIRE_RL_rl_discard_write_rsp = ((b__h14485 != 4'h0) & master_xactor_f_wr_resp$EMPTY_N);
  assign WILL_FIRE_RL_rl_discard_write_rsp = CAN_FIRE_RL_rl_discard_write_rsp;
  assign CAN_FIRE_RL_rl_start_reset = MUX_rg_state$write_1__SEL_2;
  assign WILL_FIRE_RL_rl_start_reset = MUX_rg_state$write_1__SEL_2;
  assign MUX_dw_output_ld_val$wset_1__SEL_1 = (WILL_FIRE_RL_rl_io_read_rsp & (master_xactor_f_rd_data$D_OUT[2:1] == 2'h0));
  assign MUX_dw_output_ld_val$wset_1__SEL_2 = (WILL_FIRE_RL_rl_probe_and_immed_rsp & NOT_dmem_not_imem_10_OR_soc_map_m_is_mem_addr__ETC___d190);
  assign MUX_dw_output_ld_val$wset_1__SEL_3 = (WILL_FIRE_RL_rl_maintain_io_read_rsp | WILL_FIRE_RL_rl_ST_AMO_response);
  assign MUX_f_fabric_write_reqs$enq_1__SEL_1 = ((WILL_FIRE_RL_rl_probe_and_immed_rsp & (1'b0 | soc_map$m_is_mem_addr)) & rg_op);
  assign MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 = (EN_req & req_f3_BITS_1_TO_0_18_EQ_0b0_19_OR_req_f3_BITS_ETC___d548);
  assign MUX_ram_word64_set$a_put_1__SEL_1 = (WILL_FIRE_RL_rl_cache_refill_rsps_loop & (master_xactor_f_rd_data$D_OUT[2:1] == 2'h0));
  assign MUX_ram_word64_set$b_put_1__SEL_2 = (WILL_FIRE_RL_rl_cache_refill_rsps_loop & (rg_word64_set_in_cache[1:0] != 2'h3));
  assign MUX_rg_error_during_refill$write_1__SEL_1 = (WILL_FIRE_RL_rl_cache_refill_rsps_loop & (master_xactor_f_rd_data$D_OUT[2:1] != 2'h0));
  assign MUX_rg_exc_code$write_1__SEL_1 = (EN_req & NOT_req_f3_BITS_1_TO_0_18_EQ_0b0_19_20_AND_NOT_ETC___d539);
  assign MUX_rg_exc_code$write_1__SEL_2 = (WILL_FIRE_RL_rl_io_read_rsp & (master_xactor_f_rd_data$D_OUT[2:1] != 2'h0));
  assign MUX_rg_state$write_1__SEL_2 = (f_reset_reqs$EMPTY_N & (rg_state != 4'h1));
  assign MUX_rg_state$write_1__SEL_3 = (CAN_FIRE_RL_rl_io_write_req & (~|WILL_FIRE_RL_rl_start_reset));
  assign MUX_rg_state$write_1__SEL_7 = (WILL_FIRE_RL_rl_cache_refill_rsps_loop & (rg_word64_set_in_cache[1:0] == 2'h3));
  assign MUX_rg_state$write_1__SEL_9 = (WILL_FIRE_RL_rl_probe_and_immed_rsp & dmem_not_imem_AND_NOT_soc_map_m_is_mem_addr_0__ETC___d106);
  assign MUX_rg_state$write_1__SEL_10 = (WILL_FIRE_RL_rl_reset & (rg_cset_in_cache == 7'h7f));
  assign dw_valid$whas = (((((WILL_FIRE_RL_rl_io_read_rsp & (master_xactor_f_rd_data$D_OUT[2:1] == 2'h0)) | (WILL_FIRE_RL_rl_probe_and_immed_rsp & NOT_dmem_not_imem_10_OR_soc_map_m_is_mem_addr__ETC___d190)) | WILL_FIRE_RL_rl_drive_exception_rsp) | WILL_FIRE_RL_rl_maintain_io_read_rsp) | WILL_FIRE_RL_rl_ST_AMO_response);
  assign ctr_wr_rsps_pending_crg$EN_port2__write = (WILL_FIRE_RL_rl_start_reset & (~|f_reset_reqs$D_OUT));
  assign cfg_verbosity$D_IN = set_verbosity_verbosity;
  assign cfg_verbosity$EN = EN_set_verbosity;
  assign ctr_wr_rsps_pending_crg$D_IN = ctr_wr_rsps_pending_crg$port3__read;
  assign rg_addr$D_IN = req_addr;
  assign rg_addr$EN = EN_req;
  assign rg_cset_in_cache$EN = (WILL_FIRE_RL_rl_reset | WILL_FIRE_RL_rl_start_reset);
  assign rg_error_during_refill$D_IN = MUX_rg_error_during_refill$write_1__SEL_1;
  assign rg_error_during_refill$EN = ((WILL_FIRE_RL_rl_cache_refill_rsps_loop & (master_xactor_f_rd_data$D_OUT[2:1] != 2'h0)) | WILL_FIRE_RL_rl_start_cache_refill);
  assign rg_exc_code$EN = (((WILL_FIRE_RL_rl_cache_refill_rsps_loop & (master_xactor_f_rd_data$D_OUT[2:1] != 2'h0)) | (WILL_FIRE_RL_rl_io_read_rsp & (master_xactor_f_rd_data$D_OUT[2:1] != 2'h0))) | (EN_req & NOT_req_f3_BITS_1_TO_0_18_EQ_0b0_19_20_AND_NOT_ETC___d539));
  assign rg_f3$D_IN = req_f3;
  assign rg_f3$EN = EN_req;
  assign rg_ld_val$D_IN = ld_val__h17594;
  assign rg_ld_val$EN = WILL_FIRE_RL_rl_io_read_rsp;
  assign rg_lower_word32_full$EN = (WILL_FIRE_RL_rl_start_cache_refill | WILL_FIRE_RL_rl_start_reset);
  assign rg_op$D_IN = req_op;
  assign rg_op$EN = EN_req;
  assign rg_pa$EN = (EN_req | WILL_FIRE_RL_rl_probe_and_immed_rsp);
  assign rg_st_amo_val$D_IN = req_st_value;
  assign rg_st_amo_val$EN = EN_req;
  assign rg_state$EN = ((((((((((WILL_FIRE_RL_rl_reset & (rg_cset_in_cache == 7'h7f)) | (WILL_FIRE_RL_rl_cache_refill_rsps_loop & (rg_word64_set_in_cache[1:0] == 2'h3))) | (WILL_FIRE_RL_rl_probe_and_immed_rsp & dmem_not_imem_AND_NOT_soc_map_m_is_mem_addr_0__ETC___d106)) | WILL_FIRE_RL_rl_io_read_rsp) | EN_req) | WILL_FIRE_RL_rl_start_reset) | WILL_FIRE_RL_rl_rereq) | WILL_FIRE_RL_rl_start_cache_refill) | WILL_FIRE_RL_rl_io_write_req) | WILL_FIRE_RL_rl_io_read_req);
  assign rg_word64_set_in_cache$EN = ((WILL_FIRE_RL_rl_cache_refill_rsps_loop & (rg_word64_set_in_cache[1:0] != 2'h3)) | WILL_FIRE_RL_rl_start_cache_refill);
  assign f_fabric_write_reqs$ENQ = (((WILL_FIRE_RL_rl_probe_and_immed_rsp & (1'b0 | soc_map$m_is_mem_addr)) & rg_op) | WILL_FIRE_RL_rl_io_write_req);
  assign f_fabric_write_reqs$DEQ = CAN_FIRE_RL_rl_fabric_send_write_req;
  assign f_reset_reqs$ENQ = (EN_server_reset_request_put | EN_server_flush_request_put);
  assign f_reset_reqs$DEQ = (WILL_FIRE_RL_rl_reset & (rg_cset_in_cache == 7'h7f));
  assign f_reset_rsps$D_IN = f_reset_reqs$D_OUT;
  assign f_reset_rsps$ENQ = (WILL_FIRE_RL_rl_reset & (rg_cset_in_cache == 7'h7f));
  assign f_reset_rsps$DEQ = (EN_server_flush_response_get | EN_server_reset_response_get);
  assign master_xactor_f_rd_addr$ENQ = (WILL_FIRE_RL_rl_start_cache_refill | WILL_FIRE_RL_rl_io_read_req);
  assign master_xactor_f_rd_addr$DEQ = (master_xactor_f_rd_addr$EMPTY_N & mem_master_arready);
  assign master_xactor_f_rd_addr$CLR = (WILL_FIRE_RL_rl_start_reset & (~|f_reset_reqs$D_OUT));
  assign master_xactor_f_rd_data$ENQ = (mem_master_rvalid & master_xactor_f_rd_data$FULL_N);
  assign master_xactor_f_rd_data$DEQ = (WILL_FIRE_RL_rl_io_read_rsp | WILL_FIRE_RL_rl_cache_refill_rsps_loop);
  assign master_xactor_f_rd_data$CLR = (WILL_FIRE_RL_rl_start_reset & (~|f_reset_reqs$D_OUT));
  assign master_xactor_f_wr_addr$ENQ = CAN_FIRE_RL_rl_fabric_send_write_req;
  assign master_xactor_f_wr_addr$DEQ = (master_xactor_f_wr_addr$EMPTY_N & mem_master_awready);
  assign master_xactor_f_wr_addr$CLR = (WILL_FIRE_RL_rl_start_reset & (~|f_reset_reqs$D_OUT));
  assign master_xactor_f_wr_data$ENQ = CAN_FIRE_RL_rl_fabric_send_write_req;
  assign master_xactor_f_wr_data$DEQ = (master_xactor_f_wr_data$EMPTY_N & mem_master_wready);
  assign master_xactor_f_wr_data$CLR = (WILL_FIRE_RL_rl_start_reset & (~|f_reset_reqs$D_OUT));
  assign master_xactor_f_wr_resp$ENQ = (mem_master_bvalid & master_xactor_f_wr_resp$FULL_N);
  assign master_xactor_f_wr_resp$DEQ = CAN_FIRE_RL_rl_discard_write_rsp;
  assign master_xactor_f_wr_resp$CLR = (WILL_FIRE_RL_rl_start_reset & (~|f_reset_reqs$D_OUT));
  assign ram_state_and_ctag_cset$ENA = (WILL_FIRE_RL_rl_start_cache_refill | WILL_FIRE_RL_rl_reset);
  assign ram_state_and_ctag_cset$ENB = ((EN_req & req_f3_BITS_1_TO_0_18_EQ_0b0_19_OR_req_f3_BITS_ETC___d548) | WILL_FIRE_RL_rl_rereq);
  assign ram_word64_set$ENA = ((WILL_FIRE_RL_rl_cache_refill_rsps_loop & (master_xactor_f_rd_data$D_OUT[2:1] == 2'h0)) | (WILL_FIRE_RL_rl_probe_and_immed_rsp & NOT_dmem_not_imem_10_OR_soc_map_m_is_mem_addr__ETC___d114));
  assign ram_word64_set$ENB = ((((EN_req & req_f3_BITS_1_TO_0_18_EQ_0b0_19_OR_req_f3_BITS_ETC___d548) | (WILL_FIRE_RL_rl_cache_refill_rsps_loop & (rg_word64_set_in_cache[1:0] != 2'h3))) | WILL_FIRE_RL_rl_rereq) | WILL_FIRE_RL_rl_start_cache_refill);
  assign NOT_dmem_not_imem_10_OR_soc_map_m_is_mem_addr__ETC___d114 = ((((1'b0 | soc_map$m_is_mem_addr) & rg_op) & ram_state_and_ctag_cset$DOB[22]) & ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d102);
  assign NOT_dmem_not_imem_10_OR_soc_map_m_is_mem_addr__ETC___d190 = ((((1'b0 | soc_map$m_is_mem_addr) & (~|rg_op)) & ram_state_and_ctag_cset$DOB[22]) & ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d102);
  assign NOT_req_f3_BITS_1_TO_0_18_EQ_0b0_19_20_AND_NOT_ETC___d539 = ((((req_f3[1:0] != 2'h0) & ((req_f3[1:0] != 2'h1) | req_addr[0])) & ((req_f3[1:0] != 2'h2) | (req_addr[1:0] != 2'h0))) & ((req_f3[1:0] != 2'h3) | (req_addr[2:0] != 3'h0)));
  assign NOT_rg_op_1_2_AND_ram_state_and_ctag_cset_b_re_ETC___d305 = ((((~|rg_op) & ram_state_and_ctag_cset$DOB[22]) & ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d102) & NOT_cfg_verbosity_read__0_ULE_1_1___d42);
  assign dmem_not_imem_AND_NOT_soc_map_m_is_mem_addr_0__ETC___d106 = ((((dmem_not_imem & (~|soc_map$m_is_mem_addr)) | rg_op) | (~|ram_state_and_ctag_cset$DOB[22])) | (~|ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d102));
  assign req_f3_BITS_1_TO_0_18_EQ_0b0_19_OR_req_f3_BITS_ETC___d548 = ((((req_f3[1:0] == 2'h0) | ((req_f3[1:0] == 2'h1) & (~|req_addr[0]))) | ((req_f3[1:0] == 2'h2) & (req_addr[1:0] == 2'h0))) | ((req_f3[1:0] == 2'h3) & (req_addr[2:0] == 3'h0)));
  assign rg_op_1_AND_ram_state_and_ctag_cset_b_read__5__ETC___d180 = (((rg_op & ram_state_and_ctag_cset$DOB[22]) & ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d102) & NOT_cfg_verbosity_read__0_ULE_1_1___d42);
  assign word64__h5094 = (ram_word64_set$DOB & y__h5337);
  assign RTL__DOT__near_mem__DOT__dcache__DOT__rg_addr = rg_addr;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__rg_pa = rg_pa;

  always @(rg_ld_val or MUX_dw_output_ld_val$wset_1__SEL_3 or MUX_dw_output_ld_val$wset_1__VAL_2 or MUX_dw_output_ld_val$wset_1__SEL_2 or ld_val__h17594 or MUX_dw_output_ld_val$wset_1__SEL_1) case (1'b1)
    MUX_dw_output_ld_val$wset_1__SEL_1: word64 = ld_val__h17594;
    MUX_dw_output_ld_val$wset_1__SEL_2: word64 = MUX_dw_output_ld_val$wset_1__VAL_2;
    MUX_dw_output_ld_val$wset_1__SEL_3: word64 = rg_ld_val;
    default: word64 = 64'haaaaaaaaaaaaaaaa;
  endcase

  always @(CASE_rg_addr_BITS_2_TO_0_0x0_result2428_0x4_re_ETC__q33 or IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d285 or IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d264 or word64__h5094 or rg_addr or CASE_rg_addr_BITS_2_TO_0_0x0_result2361_0x4_re_ETC__q32 or IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d276 or IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d247 or rg_f3) case (rg_f3)
    3'h0: MUX_dw_output_ld_val$wset_1__VAL_2 = IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d247;
    3'h1: MUX_dw_output_ld_val$wset_1__VAL_2 = IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d276;
    3'h2: MUX_dw_output_ld_val$wset_1__VAL_2 = CASE_rg_addr_BITS_2_TO_0_0x0_result2361_0x4_re_ETC__q32;
    3'h3: MUX_dw_output_ld_val$wset_1__VAL_2 = ((rg_addr[2:0] == 3'h0) ? word64__h5094 : 64'h0000000000000000);
    3'h4: MUX_dw_output_ld_val$wset_1__VAL_2 = IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d264;
    3'h5: MUX_dw_output_ld_val$wset_1__VAL_2 = IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d285;
    3'h6: MUX_dw_output_ld_val$wset_1__VAL_2 = CASE_rg_addr_BITS_2_TO_0_0x0_result2428_0x4_re_ETC__q33;
    3'h7: MUX_dw_output_ld_val$wset_1__VAL_2 = 64'h0000000000000000;
  endcase

  always @(access_exc_code__h2256 or MUX_rg_error_during_refill$write_1__SEL_1 or MUX_rg_exc_code$write_1__SEL_2 or MUX_rg_exc_code$write_1__VAL_1 or MUX_rg_exc_code$write_1__SEL_1) case (1'b1)
    MUX_rg_exc_code$write_1__SEL_1: rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_1;
    MUX_rg_exc_code$write_1__SEL_2: rg_exc_code$D_IN = 4'h5;
    MUX_rg_error_during_refill$write_1__SEL_1: rg_exc_code$D_IN = access_exc_code__h2256;
    default: rg_exc_code$D_IN = 4'ha;
  endcase

  always @(MUX_rg_state$write_1__SEL_10 or MUX_rg_state$write_1__VAL_9 or MUX_rg_state$write_1__SEL_9 or WILL_FIRE_RL_rl_start_cache_refill or MUX_rg_state$write_1__VAL_7 or MUX_rg_state$write_1__SEL_7 or WILL_FIRE_RL_rl_rereq or WILL_FIRE_RL_rl_io_read_req or MUX_rg_state$write_1__VAL_4 or WILL_FIRE_RL_rl_io_read_rsp or WILL_FIRE_RL_rl_io_write_req or WILL_FIRE_RL_rl_start_reset or MUX_rg_state$write_1__VAL_1 or EN_req) case (1'b1)
    EN_req: rg_state$D_IN = MUX_rg_state$write_1__VAL_1;
    WILL_FIRE_RL_rl_start_reset: rg_state$D_IN = 4'h1;
    WILL_FIRE_RL_rl_io_write_req: rg_state$D_IN = 4'hb;
    WILL_FIRE_RL_rl_io_read_rsp: rg_state$D_IN = MUX_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_rl_io_read_req: rg_state$D_IN = 4'hd;
    WILL_FIRE_RL_rl_rereq: rg_state$D_IN = 4'h3;
    MUX_rg_state$write_1__SEL_7: rg_state$D_IN = MUX_rg_state$write_1__VAL_7;
    WILL_FIRE_RL_rl_start_cache_refill: rg_state$D_IN = 4'h9;
    MUX_rg_state$write_1__SEL_9: rg_state$D_IN = MUX_rg_state$write_1__VAL_9;
    MUX_rg_state$write_1__SEL_10: rg_state$D_IN = 4'h2;
    default: rg_state$D_IN = 4'ha;
  endcase

  always @(MUX_ram_word64_set$b_put_2__VAL_4 or WILL_FIRE_RL_rl_start_cache_refill or rg_addr or WILL_FIRE_RL_rl_rereq or MUX_ram_word64_set$b_put_2__VAL_2 or MUX_ram_word64_set$b_put_1__SEL_2 or req_addr or MUX_ram_state_and_ctag_cset$b_put_1__SEL_1) case (1'b1)
    MUX_ram_state_and_ctag_cset$b_put_1__SEL_1: ram_word64_set$ADDRB = req_addr[11:3];
    MUX_ram_word64_set$b_put_1__SEL_2: ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_2;
    WILL_FIRE_RL_rl_rereq: ram_word64_set$ADDRB = rg_addr[11:3];
    WILL_FIRE_RL_rl_start_cache_refill: ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_4;
    default: ram_word64_set$ADDRB = 9'h0aa;
  endcase

  always @(WILL_FIRE_RL_rl_start_cache_refill or WILL_FIRE_RL_rl_rereq or MUX_ram_word64_set$b_put_1__SEL_2 or MUX_ram_state_and_ctag_cset$b_put_1__SEL_1) case (1'b1)
    MUX_ram_state_and_ctag_cset$b_put_1__SEL_1: ram_word64_set$DIB = 64'haaaaaaaaaaaaaaaa;
    MUX_ram_word64_set$b_put_1__SEL_2: ram_word64_set$DIB = 64'haaaaaaaaaaaaaaaa;
    WILL_FIRE_RL_rl_rereq: ram_word64_set$DIB = 64'haaaaaaaaaaaaaaaa;
    WILL_FIRE_RL_rl_start_cache_refill: ram_word64_set$DIB = 64'haaaaaaaaaaaaaaaa;
    default: ram_word64_set$DIB = 64'haaaaaaaaaaaaaaaa;
  endcase

  always @(f_fabric_write_reqs$D_OUT) case (f_fabric_write_reqs$D_OUT[97:96])
    2'h0: x__h2520 = 3'h0;
    2'h1: x__h2520 = 3'h1;
    2'h2: x__h2520 = 3'h2;
    2'h3: x__h2520 = 3'h3;
  endcase

  always @(rg_f3) case (rg_f3[1:0])
    2'h0: value__h17372 = 3'h0;
    2'h1: value__h17372 = 3'h1;
    2'h2: value__h17372 = 3'h2;
    2'h3: value__h17372 = 3'h3;
  endcase

  always @(strobe64__h2641 or strobe64__h2639 or strobe64__h2637 or f_fabric_write_reqs$D_OUT) case (f_fabric_write_reqs$D_OUT[97:96])
    2'h0: mem_req_wr_data_wstrb__h2700 = strobe64__h2637;
    2'h1: mem_req_wr_data_wstrb__h2700 = strobe64__h2639;
    2'h2: mem_req_wr_data_wstrb__h2700 = strobe64__h2641;
    2'h3: mem_req_wr_data_wstrb__h2700 = 8'hff;
  endcase

  always @(_theResult___snd_fst__h2707 or f_fabric_write_reqs$D_OUT) case (f_fabric_write_reqs$D_OUT[97:96])
    2'h0: mem_req_wr_data_wdata__h2699 = _theResult___snd_fst__h2707;
    2'h1: mem_req_wr_data_wdata__h2699 = _theResult___snd_fst__h2707;
    2'h2: mem_req_wr_data_wdata__h2699 = _theResult___snd_fst__h2707;
    2'h3: mem_req_wr_data_wdata__h2699 = f_fabric_write_reqs$D_OUT[63:0];
  endcase

  always @(result__h12195 or result__h12167 or result__h12139 or result__h12111 or rg_addr) case (rg_addr[2:0])
    3'h0: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d276 = result__h12111;
    3'h2: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d276 = result__h12139;
    3'h4: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d276 = result__h12167;
    3'h6: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d276 = result__h12195;
    default: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d276 = 64'h0000000000000000;
  endcase

  always @(rg_st_amo_val or ram_word64_set$DOB or rg_addr) case (rg_addr[2:0])
    3'h0: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d167 = {ram_word64_set$DOB[63:16], rg_st_amo_val[15:0]};
    3'h2: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d167 = {ram_word64_set$DOB[63:32], rg_st_amo_val[15:0], ram_word64_set$DOB[15:0]};
    3'h4: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d167 = {ram_word64_set$DOB[63:48], rg_st_amo_val[15:0], ram_word64_set$DOB[31:0]};
    3'h6: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d167 = {rg_st_amo_val[15:0], ram_word64_set$DOB[47:0]};
    default: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d167 = ram_word64_set$DOB;
  endcase

  always @(result__h11825 or result__h11797 or result__h11769 or result__h11741 or result__h11713 or result__h11685 or result__h11657 or result__h5301 or rg_addr) case (rg_addr[2:0])
    3'h0: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d247 = result__h5301;
    3'h1: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d247 = result__h11657;
    3'h2: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d247 = result__h11685;
    3'h3: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d247 = result__h11713;
    3'h4: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d247 = result__h11741;
    3'h5: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d247 = result__h11769;
    3'h6: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d247 = result__h11797;
    3'h7: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d247 = result__h11825;
  endcase

  always @(rg_st_amo_val or ram_word64_set$DOB or rg_addr) case (rg_addr[2:0])
    3'h0: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d157 = {ram_word64_set$DOB[63:8], rg_st_amo_val[7:0]};
    3'h1: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d157 = {ram_word64_set$DOB[63:16], rg_st_amo_val[7:0], ram_word64_set$DOB[7:0]};
    3'h2: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d157 = {ram_word64_set$DOB[63:24], rg_st_amo_val[7:0], ram_word64_set$DOB[15:0]};
    3'h3: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d157 = {ram_word64_set$DOB[63:32], rg_st_amo_val[7:0], ram_word64_set$DOB[23:0]};
    3'h4: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d157 = {ram_word64_set$DOB[63:40], rg_st_amo_val[7:0], ram_word64_set$DOB[31:0]};
    3'h5: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d157 = {ram_word64_set$DOB[63:48], rg_st_amo_val[7:0], ram_word64_set$DOB[39:0]};
    3'h6: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d157 = {ram_word64_set$DOB[63:56], rg_st_amo_val[7:0], ram_word64_set$DOB[47:0]};
    3'h7: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d157 = {rg_st_amo_val[7:0], ram_word64_set$DOB[55:0]};
  endcase

  always @(result__h18325 or result__h18298 or result__h18271 or result__h18244 or rg_addr) case (rg_addr[2:0])
    3'h0: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d447 = result__h18244;
    3'h2: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d447 = result__h18271;
    3'h4: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d447 = result__h18298;
    3'h6: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d447 = result__h18325;
    default: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d447 = 64'h0000000000000000;
  endcase

  always @(result__h12320 or result__h12292 or result__h12264 or result__h12236 or rg_addr) case (rg_addr[2:0])
    3'h0: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d285 = result__h12236;
    3'h2: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d285 = result__h12264;
    3'h4: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d285 = result__h12292;
    3'h6: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d285 = result__h12320;
    default: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d285 = 64'h0000000000000000;
  endcase

  always @(result__h18204 or result__h18177 or result__h18150 or result__h18123 or rg_addr) case (rg_addr[2:0])
    3'h0: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d439 = result__h18123;
    3'h2: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d439 = result__h18150;
    3'h4: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d439 = result__h18177;
    3'h6: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d439 = result__h18204;
    default: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d439 = 64'h0000000000000000;
  endcase

  always @(result__h18079 or result__h18052 or result__h18025 or result__h17998 or result__h17971 or result__h17944 or result__h17917 or result__h17890 or rg_addr) case (rg_addr[2:0])
    3'h0: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d427 = result__h17890;
    3'h1: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d427 = result__h17917;
    3'h2: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d427 = result__h17944;
    3'h3: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d427 = result__h17971;
    3'h4: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d427 = result__h17998;
    3'h5: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d427 = result__h18025;
    3'h6: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d427 = result__h18052;
    3'h7: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d427 = result__h18079;
  endcase

  always @(result__h12066 or result__h12038 or result__h12010 or result__h11982 or result__h11954 or result__h11926 or result__h11898 or result__h11870 or rg_addr) case (rg_addr[2:0])
    3'h0: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d264 = result__h11870;
    3'h1: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d264 = result__h11898;
    3'h2: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d264 = result__h11926;
    3'h3: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d264 = result__h11954;
    3'h4: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d264 = result__h11982;
    3'h5: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d264 = result__h12010;
    3'h6: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d264 = result__h12038;
    3'h7: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d264 = result__h12066;
  endcase

  always @(result__h17846 or result__h17819 or result__h17792 or result__h17765 or result__h17738 or result__h17711 or result__h17684 or result__h17654 or rg_addr) case (rg_addr[2:0])
    3'h0: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d411 = result__h17654;
    3'h1: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d411 = result__h17684;
    3'h2: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d411 = result__h17711;
    3'h3: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d411 = result__h17738;
    3'h4: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d411 = result__h17765;
    3'h5: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d411 = result__h17792;
    3'h6: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d411 = result__h17819;
    3'h7: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d411 = result__h17846;
  endcase

  always @(result__h18392 or result__h18365 or rg_addr) case (rg_addr[2:0])
    3'h0: CASE_rg_addr_BITS_2_TO_0_0x0_result8365_0x4_re_ETC__q29 = result__h18365;
    3'h4: CASE_rg_addr_BITS_2_TO_0_0x0_result8365_0x4_re_ETC__q29 = result__h18392;
    default: CASE_rg_addr_BITS_2_TO_0_0x0_result8365_0x4_re_ETC__q29 = 64'h0000000000000000;
  endcase

  always @(result__h18457 or result__h18430 or rg_addr) case (rg_addr[2:0])
    3'h0: CASE_rg_addr_BITS_2_TO_0_0x0_result8430_0x4_re_ETC__q30 = result__h18430;
    3'h4: CASE_rg_addr_BITS_2_TO_0_0x0_result8430_0x4_re_ETC__q30 = result__h18457;
    default: CASE_rg_addr_BITS_2_TO_0_0x0_result8430_0x4_re_ETC__q30 = 64'h0000000000000000;
  endcase

  always @(CASE_rg_addr_BITS_2_TO_0_0x0_result8430_0x4_re_ETC__q30 or IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d447 or IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d427 or master_xactor_f_rd_data$D_OUT or rg_addr or CASE_rg_addr_BITS_2_TO_0_0x0_result8365_0x4_re_ETC__q29 or IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d439 or IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d411 or rg_f3) case (rg_f3)
    3'h0: ld_val__h17594 = IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d411;
    3'h1: ld_val__h17594 = IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d439;
    3'h2: ld_val__h17594 = CASE_rg_addr_BITS_2_TO_0_0x0_result8365_0x4_re_ETC__q29;
    3'h3: ld_val__h17594 = ((rg_addr[2:0] == 3'h0) ? master_xactor_f_rd_data$D_OUT[66:3] : 64'h0000000000000000);
    3'h4: ld_val__h17594 = IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d427;
    3'h5: ld_val__h17594 = IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d447;
    3'h6: ld_val__h17594 = CASE_rg_addr_BITS_2_TO_0_0x0_result8430_0x4_re_ETC__q30;
    3'h7: ld_val__h17594 = 64'h0000000000000000;
  endcase

  always @(rg_st_amo_val or ram_word64_set$DOB or rg_addr) case (rg_addr[2:0])
    3'h0: CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q31 = {ram_word64_set$DOB[63:32], rg_st_amo_val[31:0]};
    3'h4: CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q31 = {rg_st_amo_val[31:0], ram_word64_set$DOB[31:0]};
    default: CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q31 = ram_word64_set$DOB;
  endcase

  always @(rg_st_amo_val or CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q31 or IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d167 or IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d157 or ram_word64_set$DOB or rg_f3) case (rg_f3)
    3'h0: IF_rg_f3_16_EQ_0b0_17_THEN_IF_rg_addr_6_BITS_2_ETC___d178 = IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d157;
    3'h1: IF_rg_f3_16_EQ_0b0_17_THEN_IF_rg_addr_6_BITS_2_ETC___d178 = IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d167;
    3'h2: IF_rg_f3_16_EQ_0b0_17_THEN_IF_rg_addr_6_BITS_2_ETC___d178 = CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q31;
    3'h3: IF_rg_f3_16_EQ_0b0_17_THEN_IF_rg_addr_6_BITS_2_ETC___d178 = rg_st_amo_val;
    default: IF_rg_f3_16_EQ_0b0_17_THEN_IF_rg_addr_6_BITS_2_ETC___d178 = ram_word64_set$DOB;
  endcase

  always @(result__h12389 or result__h12361 or rg_addr) case (rg_addr[2:0])
    3'h0: CASE_rg_addr_BITS_2_TO_0_0x0_result2361_0x4_re_ETC__q32 = result__h12361;
    3'h4: CASE_rg_addr_BITS_2_TO_0_0x0_result2361_0x4_re_ETC__q32 = result__h12389;
    default: CASE_rg_addr_BITS_2_TO_0_0x0_result2361_0x4_re_ETC__q32 = 64'h0000000000000000;
  endcase

  always @(result__h12456 or result__h12428 or rg_addr) case (rg_addr[2:0])
    3'h0: CASE_rg_addr_BITS_2_TO_0_0x0_result2428_0x4_re_ETC__q33 = result__h12428;
    3'h4: CASE_rg_addr_BITS_2_TO_0_0x0_result2428_0x4_re_ETC__q33 = result__h12456;
    default: CASE_rg_addr_BITS_2_TO_0_0x0_result2428_0x4_re_ETC__q33 = 64'h0000000000000000;
  endcase

  always @(posedge CLK) begin
    if ((RST_N == 1'b0)) begin
      cfg_verbosity <= 4'h0;
      ctr_wr_rsps_pending_crg <= 4'h0;
      rg_cset_in_cache <= 7'h00;
      rg_lower_word32_full <= 1'b0;
      rg_state <= 4'h0;
    end
    else begin
      if (cfg_verbosity$EN) cfg_verbosity <= cfg_verbosity$D_IN;
      if (ctr_wr_rsps_pending_crg$EN) ctr_wr_rsps_pending_crg <= ctr_wr_rsps_pending_crg$D_IN;
      if (rg_cset_in_cache$EN) rg_cset_in_cache <= rg_cset_in_cache$D_IN;
      if (rg_lower_word32_full$EN) rg_lower_word32_full <= rg_lower_word32_full$D_IN;
      if (rg_state$EN) rg_state <= rg_state$D_IN;
    end
    if (rg_addr$EN) rg_addr <= rg_addr$D_IN;
    if (rg_error_during_refill$EN) rg_error_during_refill <= rg_error_during_refill$D_IN;
    if (rg_exc_code$EN) rg_exc_code <= rg_exc_code$D_IN;
    if (rg_f3$EN) rg_f3 <= rg_f3$D_IN;
    if (rg_ld_val$EN) rg_ld_val <= rg_ld_val$D_IN;
    if (rg_lower_word32$EN) rg_lower_word32 <= rg_lower_word32$D_IN;
    if (rg_op$EN) rg_op <= rg_op$D_IN;
    if (rg_pa$EN) rg_pa <= rg_pa$D_IN;
    if (rg_pte_pa$EN) rg_pte_pa <= rg_pte_pa$D_IN;
    if (rg_st_amo_val$EN) rg_st_amo_val <= rg_st_amo_val$D_IN;
    if (rg_word64_set_in_cache$EN) rg_word64_set_in_cache <= rg_word64_set_in_cache$D_IN;
  end

  always @(negedge CLK) begin
    #0;
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && (ctr_wr_rsps_pending_crg == 4'hf))) begin
      v__h2948 = $stime;
      #0;
    end
    v__h2942 = (v__h2948 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && (ctr_wr_rsps_pending_crg == 4'hf))) $display("%0d: ERROR: CreditCounter: overflow", v__h2942);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && (ctr_wr_rsps_pending_crg == 4'hf))) $finish(32'h00000001);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("            To fabric: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("AXI4_Wr_Addr { ", "awid: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "awaddr: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", mem_req_wr_addr_awaddr__h2473);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "awlen: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 8'h00);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "awsize: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", x__h2520);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "awburst: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 2'h1);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "awlock: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 1'b0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "awcache: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "awprot: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 3'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "awqos: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "awregion: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "awuser: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 1'b0, " }");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("\n");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("                       ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("AXI4_Wr_Data { ", "wdata: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", mem_req_wr_data_wdata__h2699);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "wstrb: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", mem_req_wr_data_wstrb__h2700);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "wlast: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("True");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "wuser: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 1'b0, " }");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("\n");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_reset && (rg_cset_in_cache == 7'h7f)) && (cfg_verbosity != 4'h0)) && (!f_reset_reqs$D_OUT))) begin
      v__h3848 = $stime;
      #0;
    end
    v__h3842 = (v__h3848 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_reset && (rg_cset_in_cache == 7'h7f)) && (cfg_verbosity != 4'h0)) && (!f_reset_reqs$D_OUT))) $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY", v__h3842, "D_MMU_Cache", 128, 1);
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_reset && (rg_cset_in_cache == 7'h7f)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && f_reset_reqs$D_OUT)) begin
      v__h3949 = $stime;
      #0;
    end
    v__h3943 = (v__h3949 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_reset && (rg_cset_in_cache == 7'h7f)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && f_reset_reqs$D_OUT)) $display("%0d: %s.rl_reset: Flushed", v__h3943, "D_MMU_Cache");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h4098 = $stime;
      #0;
    end
    v__h4092 = (v__h4098 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h", v__h4092, "D_MMU_Cache", rg_addr);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word64 0x%0h  Byte 0x%0h}", pa_ctag__h4952, rg_addr[11:5], rg_addr[4:3], rg_addr[2:0]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("        CSet 0x%0x: (state, tag):", rg_addr[11:5]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(" (");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && ram_state_and_ctag_cset$DOB[22])) $write("CTAG_CLEAN");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && (!ram_state_and_ctag_cset$DOB[22]))) $write("CTAG_EMPTY");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && ram_state_and_ctag_cset$DOB[22])) $write(", 0x%0x", ram_state_and_ctag_cset$DOB[21:0]);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && (!ram_state_and_ctag_cset$DOB[22]))) $write(", --");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(")");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("\n");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("        CSet 0x%0x, Word64 0x%0x: ", rg_addr[11:5], rg_addr[4:3]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(" 0x%0x", ram_word64_set$DOB);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("\n");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("    TLB result: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("VM_Xlate_Result { ", "outcome: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("VM_XLATE_OK");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "pa: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", rg_addr);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "exc_code: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'ha, " }");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("\n");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_probe_and_immed_rsp && dmem_not_imem) && (!soc_map$m_is_mem_addr)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("    => IO_REQ");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && (1'b0 || soc_map$m_is_mem_addr)) && rg_op_1_AND_ram_state_and_ctag_cset_b_read__5__ETC___d180)) $display("        Write-Cache-Hit: pa 0x%0h word64 0x%0h", rg_addr, rg_st_amo_val);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && (1'b0 || soc_map$m_is_mem_addr)) && rg_op_1_AND_ram_state_and_ctag_cset_b_read__5__ETC___d180)) $write("        New Word64_Set:");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && (1'b0 || soc_map$m_is_mem_addr)) && rg_op_1_AND_ram_state_and_ctag_cset_b_read__5__ETC___d180)) $write("        CSet 0x%0x, Word64 0x%0x: ", rg_addr[11:5], rg_addr[4:3]);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && (1'b0 || soc_map$m_is_mem_addr)) && rg_op_1_AND_ram_state_and_ctag_cset_b_read__5__ETC___d180)) $write(" 0x%0x", IF_rg_f3_16_EQ_0b0_17_THEN_IF_rg_addr_6_BITS_2_ETC___d178);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && (1'b0 || soc_map$m_is_mem_addr)) && rg_op_1_AND_ram_state_and_ctag_cset_b_read__5__ETC___d180)) $write("\n");
    if ((RST_N != 1'b0)) if (((((WILL_FIRE_RL_rl_probe_and_immed_rsp && (1'b0 || soc_map$m_is_mem_addr)) && rg_op) && ((!ram_state_and_ctag_cset$DOB[22]) || (!ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d102))) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("        Write-Cache-Miss: pa 0x%0h word64 0x%0h", rg_addr, rg_st_amo_val);
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_probe_and_immed_rsp && (1'b0 || soc_map$m_is_mem_addr)) && rg_op) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("        Write-Cache-Hit/Miss: eaddr 0x%0h word64 0x%0h", rg_addr, rg_st_amo_val);
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_probe_and_immed_rsp && (1'b0 || soc_map$m_is_mem_addr)) && rg_op) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("        => rl_write_response");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && (1'b0 || soc_map$m_is_mem_addr)) && NOT_rg_op_1_2_AND_ram_state_and_ctag_cset_b_re_ETC___d305)) begin
      v__h12540 = $stime;
      #0;
    end
    v__h12534 = (v__h12540 / 32'h0000000a);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && (1'b0 || soc_map$m_is_mem_addr)) && NOT_rg_op_1_2_AND_ram_state_and_ctag_cset_b_re_ETC___d305)) $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h", v__h12534, "D_MMU_Cache", rg_addr, word64__h5094, 64'h0000000000000000);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && (1'b0 || soc_map$m_is_mem_addr)) && NOT_rg_op_1_2_AND_ram_state_and_ctag_cset_b_re_ETC___d305)) $display("        Read-hit: addr 0x%0h word64 0x%0h", rg_addr, word64__h5094);
    if ((RST_N != 1'b0)) if (((((WILL_FIRE_RL_rl_probe_and_immed_rsp && (1'b0 || soc_map$m_is_mem_addr)) && (!rg_op)) && ((!ram_state_and_ctag_cset$DOB[22]) || (!ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d102))) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("        Read Miss: -> CACHE_START_REFILL.");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h14531 = $stime;
      #0;
    end
    v__h14525 = (v__h14531 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("%0d: %s.rl_start_cache_refill: ", v__h14525, "D_MMU_Cache");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("    To fabric: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("AXI4_Rd_Addr { ", "arid: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "araddr: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", cline_fabric_addr__h14584);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arlen: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 8'h03);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arsize: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 3'h3);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arburst: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 2'h1);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arlock: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 1'b0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arcache: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arprot: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 3'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arqos: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arregion: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "aruser: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 1'b0, " }");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("\n");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("    Victim way %0d; => CACHE_REFILL", 1'b0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) begin
      v__h15336 = $stime;
      #0;
    end
    v__h15330 = (v__h15336 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $display("%0d: %s.rl_cache_refill_rsps_loop:", v__h15330, "D_MMU_Cache");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write("        ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write("AXI4_Rd_Data { ", "rid: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write("'h%h", master_xactor_f_rd_data$D_OUT[70:67]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write(", ", "rdata: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write("'h%h", master_xactor_f_rd_data$D_OUT[66:3]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write(", ", "rresp: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write(", ", "rlast: ");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331) && master_xactor_f_rd_data$D_OUT[0])) $write("True");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331) && (!master_xactor_f_rd_data$D_OUT[0]))) $write("False");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write(", ", "ruser: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write("'h%h", 1'b0, " }");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write("\n");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_cache_refill_rsps_loop && (master_xactor_f_rd_data$D_OUT[2:1] != 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h15578 = $stime;
      #0;
    end
    v__h15572 = (v__h15578 / 32'h0000000a);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_cache_refill_rsps_loop && (master_xactor_f_rd_data$D_OUT[2:1] != 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d", v__h15572, "D_MMU_Cache", access_exc_code__h2256);
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_cache_refill_rsps_loop && (rg_word64_set_in_cache[1:0] == 2'h3)) && ((master_xactor_f_rd_data$D_OUT[2:1] != 2'h0) || rg_error_during_refill)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("    => MODULE_EXCEPTION_RSP");
    if ((RST_N != 1'b0)) if (((((WILL_FIRE_RL_rl_cache_refill_rsps_loop && (rg_word64_set_in_cache[1:0] == 2'h3)) && (master_xactor_f_rd_data$D_OUT[2:1] == 2'h0)) && (!rg_error_during_refill)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("    => CACHE_REREQ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $display("        Updating Cache word64_set 0x%0h, word64_in_cline %0d) old => new", rg_word64_set_in_cache, rg_word64_set_in_cache[1:0]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write("        CSet 0x%0x, Word64 0x%0x: ", rg_addr[11:5], rg_word64_set_in_cache[1:0]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write(" 0x%0x", ram_word64_set$DOB);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write("\n");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write("        CSet 0x%0x, Word64 0x%0x: ", rg_addr[11:5], rg_word64_set_in_cache[1:0]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write(" 0x%0x", master_xactor_f_rd_data$D_OUT[66:3]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write("\n");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_rereq && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]", rg_addr[11:5], rg_addr[11:3]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h17191 = $stime;
      #0;
    end
    v__h17185 = (v__h17191 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h", v__h17185, "D_MMU_Cache", rg_f3, rg_addr, rg_pa);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("            To fabric: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("AXI4_Rd_Addr { ", "arid: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "araddr: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", fabric_addr__h17243);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arlen: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 8'h00);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arsize: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", value__h17372);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arburst: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 2'h1);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arlock: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 1'b0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arcache: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arprot: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 3'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arqos: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arregion: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "aruser: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 1'b0, " }");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("\n");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h17485 = $stime;
      #0;
    end
    v__h17479 = (v__h17485 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h", v__h17479, "D_MMU_Cache", rg_addr, rg_pa);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("    ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("AXI4_Rd_Data { ", "rid: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", master_xactor_f_rd_data$D_OUT[70:67]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "rdata: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", master_xactor_f_rd_data$D_OUT[66:3]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "rresp: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "rlast: ");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && master_xactor_f_rd_data$D_OUT[0])) $write("True");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && (!master_xactor_f_rd_data$D_OUT[0]))) $write("False");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "ruser: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 1'b0, " }");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("\n");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_io_read_rsp && (master_xactor_f_rd_data$D_OUT[2:1] == 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h18585 = $stime;
      #0;
    end
    v__h18579 = (v__h18585 / 32'h0000000a);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_io_read_rsp && (master_xactor_f_rd_data$D_OUT[2:1] == 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h", v__h18579, "D_MMU_Cache", rg_addr, ld_val__h17594);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_io_read_rsp && (master_xactor_f_rd_data$D_OUT[2:1] != 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h18692 = $stime;
      #0;
    end
    v__h18686 = (v__h18692 / 32'h0000000a);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_io_read_rsp && (master_xactor_f_rd_data$D_OUT[2:1] != 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT", v__h18686, "D_MMU_Cache");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_maintain_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h18797 = $stime;
      #0;
    end
    v__h18791 = (v__h18797 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_maintain_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h", v__h18791, "D_MMU_Cache", rg_addr, rg_ld_val);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h18877 = $stime;
      #0;
    end
    v__h18871 = (v__h18877 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h", v__h18871, "D_MMU_Cache", rg_f3, rg_addr, rg_pa, rg_st_amo_val);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("    => rl_ST_AMO_response");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] == 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h19505 = $stime;
      #0;
    end
    v__h19499 = (v__h19505 / 32'h0000000a);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] == 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("%0d: %s.rl_discard_write_rsp: pending %0d ", v__h19499, "D_MMU_Cache", b__h14485);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] == 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("AXI4_Wr_Resp { ", "bid: ");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] == 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", master_xactor_f_wr_resp$D_OUT[5:2]);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] == 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "bresp: ");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] == 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", master_xactor_f_wr_resp$D_OUT[1:0]);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] == 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "buser: ");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] == 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 1'b0, " }");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] == 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("\n");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] != 2'h0))) begin
      v__h19466 = $stime;
      #0;
    end
    v__h19460 = (v__h19466 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] != 2'h0))) $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit", v__h19460, "D_MMU_Cache");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] != 2'h0))) $write("    ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] != 2'h0))) $write("AXI4_Wr_Resp { ", "bid: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] != 2'h0))) $write("'h%h", master_xactor_f_wr_resp$D_OUT[5:2]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] != 2'h0))) $write(", ", "bresp: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] != 2'h0))) $write("'h%h", master_xactor_f_wr_resp$D_OUT[1:0]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] != 2'h0))) $write(", ", "buser: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] != 2'h0))) $write("'h%h", 1'b0, " }");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] != 2'h0))) $write("\n");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_reset && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h3483 = $stime;
      #0;
    end
    v__h3477 = (v__h3483 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_reset && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("%0d: %s.rl_start_reset", v__h3477, "D_MMU_Cache");
    if ((RST_N != 1'b0)) if ((EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h19852 = $stime;
      #0;
    end
    v__h19846 = (v__h19852 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("%0d: %m.req: op:", v__h19846);
    if ((RST_N != 1'b0)) if (((EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && req_op)) $write("CACHE_ST");
    if ((RST_N != 1'b0)) if (((EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && (!req_op))) $write("CACHE_LD");
    if ((RST_N != 1'b0)) if ((EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(" f3:%0d addr:0x%0h st_value:0x%0h", req_f3, req_addr, req_st_value, "\n");
    if ((RST_N != 1'b0)) if ((EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("    priv:");
    if ((RST_N != 1'b0)) if (((EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && (req_priv == 2'h0))) $write("U");
    if ((RST_N != 1'b0)) if (((EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && (req_priv == 2'h1))) $write("S");
    if ((RST_N != 1'b0)) if (((EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && (req_priv == 2'h3))) $write("M");
    if ((RST_N != 1'b0)) if (((((EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && (req_priv != 2'h0)) && (req_priv != 2'h1)) && (req_priv != 2'h3))) $write("RESERVED");
    if ((RST_N != 1'b0)) if ((EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h", req_sstatus_SUM, req_mstatus_MXR, req_satp, "\n");
    if ((RST_N != 1'b0)) if (((EN_req && req_f3_BITS_1_TO_0_18_EQ_0b0_19_OR_req_f3_BITS_ETC___d548) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]", req_addr[11:5], req_addr[11:3]);
  end

  \FIFO2[wrapper.RTL.near_mem.dcache.f_fabric_write_reqs]  f_fabric_write_reqs(CLK, RST_N, f_fabric_write_reqs$D_IN, f_fabric_write_reqs$ENQ, f_fabric_write_reqs$FULL_N, f_fabric_write_reqs$D_OUT, f_fabric_write_reqs$DEQ, f_fabric_write_reqs$EMPTY_N, f_fabric_write_reqs$CLR, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */);

  \FIFO2[wrapper.RTL.near_mem.dcache.f_reset_reqs]  f_reset_reqs(CLK, RST_N, f_reset_reqs$D_IN, f_reset_reqs$ENQ, f_reset_reqs$FULL_N, f_reset_reqs$D_OUT, f_reset_reqs$DEQ, f_reset_reqs$EMPTY_N, f_reset_reqs$CLR, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, /* Empty */);

  \FIFO2[wrapper.RTL.near_mem.dcache.f_reset_rsps]  f_reset_rsps(CLK, RST_N, f_reset_rsps$D_IN, f_reset_rsps$ENQ, f_reset_rsps$FULL_N, f_reset_rsps$D_OUT, f_reset_rsps$DEQ, f_reset_rsps$EMPTY_N, f_reset_rsps$CLR, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */);

  \FIFO2[wrapper.RTL.near_mem.dcache.master_xactor_f_rd_addr]  master_xactor_f_rd_addr(CLK, RST_N, master_xactor_f_rd_addr$D_IN, master_xactor_f_rd_addr$ENQ, master_xactor_f_rd_addr$FULL_N, master_xactor_f_rd_addr$D_OUT, master_xactor_f_rd_addr$DEQ, master_xactor_f_rd_addr$EMPTY_N, master_xactor_f_rd_addr$CLR, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */);

  \FIFO2[wrapper.RTL.near_mem.dcache.master_xactor_f_rd_data]  master_xactor_f_rd_data(CLK, RST_N, master_xactor_f_rd_data$D_IN, master_xactor_f_rd_data$ENQ, master_xactor_f_rd_data$FULL_N, master_xactor_f_rd_data$D_OUT, master_xactor_f_rd_data$DEQ, master_xactor_f_rd_data$EMPTY_N, master_xactor_f_rd_data$CLR, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */);

  \FIFO2[wrapper.RTL.near_mem.dcache.master_xactor_f_wr_addr]  master_xactor_f_wr_addr(CLK, RST_N, master_xactor_f_wr_addr$D_IN, master_xactor_f_wr_addr$ENQ, master_xactor_f_wr_addr$FULL_N, master_xactor_f_wr_addr$D_OUT, master_xactor_f_wr_addr$DEQ, master_xactor_f_wr_addr$EMPTY_N, master_xactor_f_wr_addr$CLR, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */);

  \FIFO2[wrapper.RTL.near_mem.dcache.master_xactor_f_wr_data]  master_xactor_f_wr_data(CLK, RST_N, master_xactor_f_wr_data$D_IN, master_xactor_f_wr_data$ENQ, master_xactor_f_wr_data$FULL_N, master_xactor_f_wr_data$D_OUT, master_xactor_f_wr_data$DEQ, master_xactor_f_wr_data$EMPTY_N, master_xactor_f_wr_data$CLR, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */);

  \FIFO2[wrapper.RTL.near_mem.dcache.master_xactor_f_wr_resp]  master_xactor_f_wr_resp(CLK, RST_N, master_xactor_f_wr_resp$D_IN, master_xactor_f_wr_resp$ENQ, master_xactor_f_wr_resp$FULL_N, master_xactor_f_wr_resp$D_OUT, master_xactor_f_wr_resp$DEQ, master_xactor_f_wr_resp$EMPTY_N, master_xactor_f_wr_resp$CLR, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */);

  \BRAM2[wrapper.RTL.near_mem.dcache.ram_state_and_ctag_cset]  ram_state_and_ctag_cset(CLK, ram_state_and_ctag_cset$ENA, ram_state_and_ctag_cset$WEA, ram_state_and_ctag_cset$ADDRA, ram_state_and_ctag_cset$DIA, /* Empty */, CLK, ram_state_and_ctag_cset$ENB, ram_state_and_ctag_cset$WEB, ram_state_and_ctag_cset$ADDRB, ram_state_and_ctag_cset$DIB, ram_state_and_ctag_cset$DOB);

  \BRAM2[wrapper.RTL.near_mem.dcache.ram_word64_set]  ram_word64_set(CLK, ram_word64_set$ENA, ram_word64_set$WEA, ram_word64_set$ADDRA, ram_word64_set$DIA, /* Empty */, CLK, ram_word64_set$ENB, ram_word64_set$WEB, ram_word64_set$ADDRB, ram_word64_set$DIB, ram_word64_set$DOB);

  mkSoC_Map soc_map(CLK, RST_N, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, soc_map$m_is_mem_addr_addr, soc_map$m_is_mem_addr, soc_map$m_is_IO_addr_addr, /* Empty */, soc_map$m_is_near_mem_IO_addr_addr, /* Empty */, /* Empty */, /* Empty */, /* Empty */);
endmodule  /* \mkMMU_Cache[wrapper.RTL.near_mem.dcache]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3622. */
module \FIFO20[wrapper.RTL.near_mem.f_reset_rsps] (CLK, RST, ENQ, FULL_N, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__stage1_f_reset_rsps__DOT__full_reg, RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage1_f_reset_reqs__DOT__full_reg, RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg, RTL__DOT__stage3_f_reset_reqs__DOT__full_reg, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg, RTL__DOT__stage3_f_reset_rsps__DOT__full_reg, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg, RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__stage2_f_reset_reqs__DOT__full_reg, RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg, RTL__DOT__stage2_f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input ENQ;
  output FULL_N;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage1_f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage1_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__stage3_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__stage3_f_reset_rsps__DOT__full_reg;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__stage2_f_reset_reqs__DOT__full_reg;
  output RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__stage2_f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage1_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage1_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage2_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage2_f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__stage3_f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__stage3_f_reset_rsps__DOT__full_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign RTL__DOT__stage2_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage2_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage2_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage3_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__csr_regfile__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__stage2_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__gpr_regfile__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage3_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__stage1_f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage1_f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__stage1_f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__stage1_f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if (((!ENQ) && DEQ)) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO20: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO20: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO20[wrapper.RTL.near_mem.f_reset_rsps]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 12695. */
module \mkMMU_Cache[wrapper.RTL.near_mem.icache] (CLK, RST_N, set_verbosity_verbosity, EN_set_verbosity, RDY_set_verbosity, EN_server_reset_request_put, RDY_server_reset_request_put, EN_server_reset_response_get, RDY_server_reset_response_get, req_op, req_f3, req_addr, req_st_value, req_priv, req_sstatus_SUM, req_mstatus_MXR, req_satp, EN_req, valid, addr, word64, st_amo_val, exc, exc_code, EN_server_flush_request_put, RDY_server_flush_request_put, EN_server_flush_response_get, RDY_server_flush_response_get, EN_tlb_flush, RDY_tlb_flush, mem_master_awvalid, mem_master_awid, mem_master_awaddr, mem_master_awlen, mem_master_awsize, mem_master_awburst, mem_master_awlock, mem_master_awcache, mem_master_awprot, mem_master_awqos, mem_master_awregion, mem_master_awready, mem_master_wvalid, mem_master_wdata, mem_master_wstrb, mem_master_wlast, mem_master_wready, mem_master_bvalid, mem_master_bid, mem_master_bresp, mem_master_bready, mem_master_arvalid, mem_master_arid, mem_master_araddr, mem_master_arlen, mem_master_arsize, mem_master_arburst, mem_master_arlock, mem_master_arcache, mem_master_arprot, mem_master_arqos, mem_master_arregion, mem_master_arready, mem_master_rvalid, mem_master_rid, mem_master_rdata, mem_master_rresp, mem_master_rlast, mem_master_rready, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__rg_pa, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__rg_addr);
  input CLK;
  input RST_N;
  input [3:0] set_verbosity_verbosity;
  input EN_set_verbosity;
  output RDY_set_verbosity;
  input EN_server_reset_request_put;
  output RDY_server_reset_request_put;
  input EN_server_reset_response_get;
  output RDY_server_reset_response_get;
  input req_op;
  input [2:0] req_f3;
  input [31:0] req_addr;
  input [63:0] req_st_value;
  input [1:0] req_priv;
  input req_sstatus_SUM;
  input req_mstatus_MXR;
  input [31:0] req_satp;
  input EN_req;
  output valid;
  output [31:0] addr;
  output [63:0] word64;
  output [63:0] st_amo_val;
  output exc;
  output [3:0] exc_code;
  input EN_server_flush_request_put;
  output RDY_server_flush_request_put;
  input EN_server_flush_response_get;
  output RDY_server_flush_response_get;
  input EN_tlb_flush;
  output RDY_tlb_flush;
  output mem_master_awvalid;
  output [3:0] mem_master_awid;
  output [63:0] mem_master_awaddr;
  output [7:0] mem_master_awlen;
  output [2:0] mem_master_awsize;
  output [1:0] mem_master_awburst;
  output mem_master_awlock;
  output [3:0] mem_master_awcache;
  output [2:0] mem_master_awprot;
  output [3:0] mem_master_awqos;
  output [3:0] mem_master_awregion;
  input mem_master_awready;
  output mem_master_wvalid;
  output [63:0] mem_master_wdata;
  output [7:0] mem_master_wstrb;
  output mem_master_wlast;
  input mem_master_wready;
  input mem_master_bvalid;
  input [3:0] mem_master_bid;
  input [1:0] mem_master_bresp;
  output mem_master_bready;
  output mem_master_arvalid;
  output [3:0] mem_master_arid;
  output [63:0] mem_master_araddr;
  output [7:0] mem_master_arlen;
  output [2:0] mem_master_arsize;
  output [1:0] mem_master_arburst;
  output mem_master_arlock;
  output [3:0] mem_master_arcache;
  output [2:0] mem_master_arprot;
  output [3:0] mem_master_arqos;
  output [3:0] mem_master_arregion;
  input mem_master_arready;
  input mem_master_rvalid;
  input [3:0] mem_master_rid;
  input [63:0] mem_master_rdata;
  input [1:0] mem_master_rresp;
  input mem_master_rlast;
  output mem_master_rready;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  output [31:0] RTL__DOT__near_mem__DOT__dcache__DOT__rg_pa;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output [31:0] RTL__DOT__near_mem__DOT__dcache__DOT__rg_addr;

  parameter dmem_not_imem = 1'b0;

  wire CAN_FIRE_RL_rl_ST_AMO_response;
  wire CAN_FIRE_RL_rl_cache_refill_rsps_loop;
  wire CAN_FIRE_RL_rl_discard_write_rsp;
  wire CAN_FIRE_RL_rl_drive_exception_rsp;
  wire CAN_FIRE_RL_rl_fabric_send_write_req;
  wire CAN_FIRE_RL_rl_io_read_req;
  wire CAN_FIRE_RL_rl_io_read_rsp;
  wire CAN_FIRE_RL_rl_io_write_req;
  wire CAN_FIRE_RL_rl_maintain_io_read_rsp;
  wire CAN_FIRE_RL_rl_probe_and_immed_rsp;
  wire CAN_FIRE_RL_rl_rereq;
  wire CAN_FIRE_RL_rl_reset;
  wire CAN_FIRE_RL_rl_start_cache_refill;
  wire CAN_FIRE_RL_rl_start_reset;
  wire CAN_FIRE_mem_master_m_arready;
  wire CAN_FIRE_mem_master_m_awready;
  wire CAN_FIRE_mem_master_m_bvalid;
  wire CAN_FIRE_mem_master_m_rvalid;
  wire CAN_FIRE_mem_master_m_wready;
  wire CAN_FIRE_req;
  wire CAN_FIRE_server_flush_request_put;
  wire CAN_FIRE_server_flush_response_get;
  wire CAN_FIRE_server_reset_request_put;
  wire CAN_FIRE_server_reset_response_get;
  wire CAN_FIRE_set_verbosity;
  wire CAN_FIRE_tlb_flush;
  reg [63:0] CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q31;
  reg [63:0] CASE_rg_addr_BITS_2_TO_0_0x0_result2361_0x4_re_ETC__q32;
  reg [63:0] CASE_rg_addr_BITS_2_TO_0_0x0_result2428_0x4_re_ETC__q33;
  reg [63:0] CASE_rg_addr_BITS_2_TO_0_0x0_result8365_0x4_re_ETC__q29;
  reg [63:0] CASE_rg_addr_BITS_2_TO_0_0x0_result8430_0x4_re_ETC__q30;
  wire CLK;
  wire EN_req;
  wire EN_server_flush_request_put;
  wire EN_server_flush_response_get;
  wire EN_server_reset_request_put;
  wire EN_server_reset_response_get;
  wire EN_set_verbosity;
  wire EN_tlb_flush;
  reg [63:0] IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d264;
  reg [63:0] IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d285;
  reg [63:0] IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d427;
  reg [63:0] IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d447;
  reg [63:0] IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d247;
  reg [63:0] IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d276;
  reg [63:0] IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d411;
  reg [63:0] IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d439;
  reg [63:0] IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d157;
  reg [63:0] IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d167;
  reg [63:0] IF_rg_f3_16_EQ_0b0_17_THEN_IF_rg_addr_6_BITS_2_ETC___d178;
  wire MUX_dw_output_ld_val$wset_1__SEL_1;
  wire MUX_dw_output_ld_val$wset_1__SEL_2;
  wire MUX_dw_output_ld_val$wset_1__SEL_3;
  reg [63:0] MUX_dw_output_ld_val$wset_1__VAL_2;
  wire MUX_f_fabric_write_reqs$enq_1__SEL_1;
  wire [98:0] MUX_f_fabric_write_reqs$enq_1__VAL_1;
  wire [98:0] MUX_f_fabric_write_reqs$enq_1__VAL_2;
  wire [96:0] MUX_master_xactor_f_rd_addr$enq_1__VAL_1;
  wire [96:0] MUX_master_xactor_f_rd_addr$enq_1__VAL_2;
  wire [22:0] MUX_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire MUX_ram_state_and_ctag_cset$b_put_1__SEL_1;
  wire MUX_ram_word64_set$a_put_1__SEL_1;
  wire MUX_ram_word64_set$b_put_1__SEL_2;
  wire [8:0] MUX_ram_word64_set$b_put_2__VAL_2;
  wire [8:0] MUX_ram_word64_set$b_put_2__VAL_4;
  wire [6:0] MUX_rg_cset_in_cache$write_1__VAL_1;
  wire [6:0] MUX_rg_cset_in_cache$write_1__VAL_1_any_val;
  wire MUX_rg_error_during_refill$write_1__SEL_1;
  wire MUX_rg_exc_code$write_1__SEL_1;
  wire MUX_rg_exc_code$write_1__SEL_2;
  wire [3:0] MUX_rg_exc_code$write_1__VAL_1;
  wire MUX_rg_state$write_1__SEL_10;
  wire MUX_rg_state$write_1__SEL_2;
  wire MUX_rg_state$write_1__SEL_3;
  wire MUX_rg_state$write_1__SEL_7;
  wire MUX_rg_state$write_1__SEL_9;
  wire [3:0] MUX_rg_state$write_1__VAL_1;
  wire [3:0] MUX_rg_state$write_1__VAL_4;
  wire [3:0] MUX_rg_state$write_1__VAL_7;
  wire [3:0] MUX_rg_state$write_1__VAL_9;
  wire NOT_cfg_verbosity_read__0_ULE_1_1___d42;
  wire NOT_cfg_verbosity_read__0_ULE_2_30___d331;
  wire NOT_dmem_not_imem_10_OR_soc_map_m_is_mem_addr__ETC___d114;
  wire NOT_dmem_not_imem_10_OR_soc_map_m_is_mem_addr__ETC___d190;
  wire NOT_req_f3_BITS_1_TO_0_18_EQ_0b0_19_20_AND_NOT_ETC___d539;
  wire NOT_rg_op_1_2_AND_ram_state_and_ctag_cset_b_re_ETC___d305;
  wire RDY_server_flush_request_put;
  wire RDY_server_flush_response_get;
  wire RDY_server_reset_request_put;
  wire RDY_server_reset_response_get;
  wire RDY_set_verbosity;
  wire RDY_tlb_flush;
  wire RST_N;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire [31:0] RTL__DOT__near_mem__DOT__dcache__DOT__rg_addr;
  wire [31:0] RTL__DOT__near_mem__DOT__dcache__DOT__rg_pa;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire WILL_FIRE_RL_rl_ST_AMO_response;
  wire WILL_FIRE_RL_rl_cache_refill_rsps_loop;
  wire WILL_FIRE_RL_rl_discard_write_rsp;
  wire WILL_FIRE_RL_rl_drive_exception_rsp;
  wire WILL_FIRE_RL_rl_fabric_send_write_req;
  wire WILL_FIRE_RL_rl_io_read_req;
  wire WILL_FIRE_RL_rl_io_read_rsp;
  wire WILL_FIRE_RL_rl_io_write_req;
  wire WILL_FIRE_RL_rl_maintain_io_read_rsp;
  wire WILL_FIRE_RL_rl_probe_and_immed_rsp;
  wire WILL_FIRE_RL_rl_rereq;
  wire WILL_FIRE_RL_rl_reset;
  wire WILL_FIRE_RL_rl_start_cache_refill;
  wire WILL_FIRE_RL_rl_start_reset;
  wire WILL_FIRE_mem_master_m_arready;
  wire WILL_FIRE_mem_master_m_awready;
  wire WILL_FIRE_mem_master_m_bvalid;
  wire WILL_FIRE_mem_master_m_rvalid;
  wire WILL_FIRE_mem_master_m_wready;
  wire WILL_FIRE_req;
  wire WILL_FIRE_server_flush_request_put;
  wire WILL_FIRE_server_flush_response_get;
  wire WILL_FIRE_server_reset_request_put;
  wire WILL_FIRE_server_reset_response_get;
  wire WILL_FIRE_set_verbosity;
  wire WILL_FIRE_tlb_flush;
  wire [63:0] _theResult___snd_fst__h2707;
  wire [3:0] access_exc_code__h2256;
  wire [31:0] addr;
  wire [3:0] b__h14485;
  reg [3:0] cfg_verbosity;
  wire [3:0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;
  wire [31:0] cline_addr__h14583;
  wire [63:0] cline_fabric_addr__h14584;
  reg [3:0] ctr_wr_rsps_pending_crg;
  wire [3:0] ctr_wr_rsps_pending_crg$D_IN;
  wire ctr_wr_rsps_pending_crg$EN;
  wire ctr_wr_rsps_pending_crg$EN_port2__write;
  wire [3:0] ctr_wr_rsps_pending_crg$port0__write_1;
  wire [3:0] ctr_wr_rsps_pending_crg$port1__write_1;
  wire [3:0] ctr_wr_rsps_pending_crg$port2__read;
  wire [3:0] ctr_wr_rsps_pending_crg$port3__read;
  wire dmem_not_imem_AND_NOT_soc_map_m_is_mem_addr_0__ETC___d106;
  wire dw_valid$whas;
  wire exc;
  wire [3:0] exc_code;
  wire f_fabric_write_reqs$CLR;
  wire f_fabric_write_reqs$DEQ;
  wire [98:0] f_fabric_write_reqs$D_IN;
  wire [98:0] f_fabric_write_reqs$D_OUT;
  wire f_fabric_write_reqs$EMPTY_N;
  wire f_fabric_write_reqs$ENQ;
  wire f_fabric_write_reqs$FULL_N;
  wire f_reset_reqs$CLR;
  wire f_reset_reqs$DEQ;
  wire f_reset_reqs$D_IN;
  wire f_reset_reqs$D_OUT;
  wire f_reset_reqs$EMPTY_N;
  wire f_reset_reqs$ENQ;
  wire f_reset_reqs$FULL_N;
  wire f_reset_rsps$CLR;
  wire f_reset_rsps$DEQ;
  wire f_reset_rsps$D_IN;
  wire f_reset_rsps$D_OUT;
  wire f_reset_rsps$EMPTY_N;
  wire f_reset_rsps$ENQ;
  wire f_reset_rsps$FULL_N;
  wire [63:0] fabric_addr__h17243;
  reg [63:0] ld_val__h17594;
  wire master_xactor_f_rd_addr$CLR;
  wire master_xactor_f_rd_addr$DEQ;
  wire [96:0] master_xactor_f_rd_addr$D_IN;
  wire [96:0] master_xactor_f_rd_addr$D_OUT;
  wire master_xactor_f_rd_addr$EMPTY_N;
  wire master_xactor_f_rd_addr$ENQ;
  wire master_xactor_f_rd_addr$FULL_N;
  wire master_xactor_f_rd_data$CLR;
  wire master_xactor_f_rd_data$DEQ;
  wire [70:0] master_xactor_f_rd_data$D_IN;
  wire [70:0] master_xactor_f_rd_data$D_OUT;
  wire master_xactor_f_rd_data$EMPTY_N;
  wire master_xactor_f_rd_data$ENQ;
  wire master_xactor_f_rd_data$FULL_N;
  wire [7:0] master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1;
  wire [7:0] master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4;
  wire [15:0] master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2;
  wire [7:0] master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5;
  wire [15:0] master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6;
  wire [7:0] master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7;
  wire [31:0] master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3;
  wire [7:0] master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8;
  wire [15:0] master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9;
  wire [7:0] master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11;
  wire [7:0] master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12;
  wire [31:0] master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10;
  wire [15:0] master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13;
  wire [7:0] master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14;
  wire master_xactor_f_wr_addr$CLR;
  wire master_xactor_f_wr_addr$DEQ;
  wire [96:0] master_xactor_f_wr_addr$D_IN;
  wire [96:0] master_xactor_f_wr_addr$D_OUT;
  wire master_xactor_f_wr_addr$EMPTY_N;
  wire master_xactor_f_wr_addr$ENQ;
  wire master_xactor_f_wr_addr$FULL_N;
  wire master_xactor_f_wr_data$CLR;
  wire master_xactor_f_wr_data$DEQ;
  wire [72:0] master_xactor_f_wr_data$D_IN;
  wire [72:0] master_xactor_f_wr_data$D_OUT;
  wire master_xactor_f_wr_data$EMPTY_N;
  wire master_xactor_f_wr_data$ENQ;
  wire master_xactor_f_wr_data$FULL_N;
  wire master_xactor_f_wr_resp$CLR;
  wire master_xactor_f_wr_resp$DEQ;
  wire [5:0] master_xactor_f_wr_resp$D_IN;
  wire [5:0] master_xactor_f_wr_resp$D_OUT;
  wire master_xactor_f_wr_resp$EMPTY_N;
  wire master_xactor_f_wr_resp$ENQ;
  wire master_xactor_f_wr_resp$FULL_N;
  wire [63:0] mem_master_araddr;
  wire [1:0] mem_master_arburst;
  wire [3:0] mem_master_arcache;
  wire [3:0] mem_master_arid;
  wire [7:0] mem_master_arlen;
  wire mem_master_arlock;
  wire [2:0] mem_master_arprot;
  wire [3:0] mem_master_arqos;
  wire mem_master_arready;
  wire [3:0] mem_master_arregion;
  wire [2:0] mem_master_arsize;
  wire mem_master_arvalid;
  wire [63:0] mem_master_awaddr;
  wire [1:0] mem_master_awburst;
  wire [3:0] mem_master_awcache;
  wire [3:0] mem_master_awid;
  wire [7:0] mem_master_awlen;
  wire mem_master_awlock;
  wire [2:0] mem_master_awprot;
  wire [3:0] mem_master_awqos;
  wire mem_master_awready;
  wire [3:0] mem_master_awregion;
  wire [2:0] mem_master_awsize;
  wire mem_master_awvalid;
  wire [3:0] mem_master_bid;
  wire mem_master_bready;
  wire [1:0] mem_master_bresp;
  wire mem_master_bvalid;
  wire [63:0] mem_master_rdata;
  wire [3:0] mem_master_rid;
  wire mem_master_rlast;
  wire mem_master_rready;
  wire [1:0] mem_master_rresp;
  wire mem_master_rvalid;
  wire [63:0] mem_master_wdata;
  wire mem_master_wlast;
  wire mem_master_wready;
  wire [7:0] mem_master_wstrb;
  wire mem_master_wvalid;
  wire [63:0] mem_req_wr_addr_awaddr__h2473;
  reg [63:0] mem_req_wr_data_wdata__h2699;
  reg [7:0] mem_req_wr_data_wstrb__h2700;
  wire [21:0] pa_ctag__h4952;
  wire [6:0] ram_state_and_ctag_cset$ADDRA;
  wire [6:0] ram_state_and_ctag_cset$ADDRB;
  wire [22:0] ram_state_and_ctag_cset$DIA;
  wire [22:0] ram_state_and_ctag_cset$DIB;
  wire [22:0] ram_state_and_ctag_cset$DOB;
  wire ram_state_and_ctag_cset$ENA;
  wire ram_state_and_ctag_cset$ENB;
  wire ram_state_and_ctag_cset$WEA;
  wire ram_state_and_ctag_cset$WEB;
  wire ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d102;
  wire [8:0] ram_word64_set$ADDRA;
  reg [8:0] ram_word64_set$ADDRB;
  wire [63:0] ram_word64_set$DIA;
  reg [63:0] ram_word64_set$DIB;
  wire [63:0] ram_word64_set$DOB;
  wire ram_word64_set$ENA;
  wire ram_word64_set$ENB;
  wire ram_word64_set$WEA;
  wire ram_word64_set$WEB;
  wire [31:0] req_addr;
  wire [2:0] req_f3;
  wire req_f3_BITS_1_TO_0_18_EQ_0b0_19_OR_req_f3_BITS_ETC___d548;
  wire req_mstatus_MXR;
  wire req_op;
  wire [1:0] req_priv;
  wire [31:0] req_satp;
  wire req_sstatus_SUM;
  wire [63:0] req_st_value;
  wire [63:0] result__h11657;
  wire [63:0] result__h11685;
  wire [63:0] result__h11713;
  wire [63:0] result__h11741;
  wire [63:0] result__h11769;
  wire [63:0] result__h11797;
  wire [63:0] result__h11825;
  wire [63:0] result__h11870;
  wire [63:0] result__h11898;
  wire [63:0] result__h11926;
  wire [63:0] result__h11954;
  wire [63:0] result__h11982;
  wire [63:0] result__h12010;
  wire [63:0] result__h12038;
  wire [63:0] result__h12066;
  wire [63:0] result__h12111;
  wire [63:0] result__h12139;
  wire [63:0] result__h12167;
  wire [63:0] result__h12195;
  wire [63:0] result__h12236;
  wire [63:0] result__h12264;
  wire [63:0] result__h12292;
  wire [63:0] result__h12320;
  wire [63:0] result__h12361;
  wire [63:0] result__h12389;
  wire [63:0] result__h12428;
  wire [63:0] result__h12456;
  wire [63:0] result__h17654;
  wire [63:0] result__h17684;
  wire [63:0] result__h17711;
  wire [63:0] result__h17738;
  wire [63:0] result__h17765;
  wire [63:0] result__h17792;
  wire [63:0] result__h17819;
  wire [63:0] result__h17846;
  wire [63:0] result__h17890;
  wire [63:0] result__h17917;
  wire [63:0] result__h17944;
  wire [63:0] result__h17971;
  wire [63:0] result__h17998;
  wire [63:0] result__h18025;
  wire [63:0] result__h18052;
  wire [63:0] result__h18079;
  wire [63:0] result__h18123;
  wire [63:0] result__h18150;
  wire [63:0] result__h18177;
  wire [63:0] result__h18204;
  wire [63:0] result__h18244;
  wire [63:0] result__h18271;
  wire [63:0] result__h18298;
  wire [63:0] result__h18325;
  wire [63:0] result__h18365;
  wire [63:0] result__h18392;
  wire [63:0] result__h18430;
  wire [63:0] result__h18457;
  wire [63:0] result__h5301;
  reg [31:0] rg_addr;
  wire [31:0] rg_addr$D_IN;
  wire rg_addr$EN;
  reg [6:0] rg_cset_in_cache;
  wire [6:0] rg_cset_in_cache$D_IN;
  wire rg_cset_in_cache$EN;
  reg rg_error_during_refill;
  wire rg_error_during_refill$D_IN;
  wire rg_error_during_refill$EN;
  reg [3:0] rg_exc_code;
  reg [3:0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;
  reg [2:0] rg_f3;
  wire [2:0] rg_f3$D_IN;
  wire rg_f3$EN;
  reg [63:0] rg_ld_val;
  wire [63:0] rg_ld_val$D_IN;
  wire rg_ld_val$EN;
  reg [31:0] rg_lower_word32;
  wire [31:0] rg_lower_word32$D_IN;
  wire rg_lower_word32$EN;
  reg rg_lower_word32_full;
  wire rg_lower_word32_full$D_IN;
  wire rg_lower_word32_full$EN;
  reg rg_op;
  wire rg_op$D_IN;
  wire rg_op$EN;
  wire rg_op_1_AND_ram_state_and_ctag_cset_b_read__5__ETC___d180;
  reg [31:0] rg_pa;
  wire [31:0] rg_pa$D_IN;
  wire rg_pa$EN;
  reg [31:0] rg_pte_pa;
  wire [31:0] rg_pte_pa$D_IN;
  wire rg_pte_pa$EN;
  reg [63:0] rg_st_amo_val;
  wire [63:0] rg_st_amo_val$D_IN;
  wire rg_st_amo_val$EN;
  reg [3:0] rg_state;
  reg [3:0] rg_state$D_IN;
  wire rg_state$EN;
  reg [8:0] rg_word64_set_in_cache;
  wire [8:0] rg_word64_set_in_cache$D_IN;
  wire rg_word64_set_in_cache$EN;
  wire [3:0] set_verbosity_verbosity;
  wire [5:0] shift_bits__h2487;
  wire [63:0] soc_map$m_is_IO_addr_addr;
  wire soc_map$m_is_mem_addr;
  wire [63:0] soc_map$m_is_mem_addr_addr;
  wire [63:0] soc_map$m_is_near_mem_IO_addr_addr;
  wire [63:0] st_amo_val;
  wire [7:0] strobe64__h2637;
  wire [7:0] strobe64__h2639;
  wire [7:0] strobe64__h2641;
  reg [31:0] v__h12534;
  reg [31:0] v__h12540;
  reg [31:0] v__h14525;
  reg [31:0] v__h14531;
  reg [31:0] v__h15330;
  reg [31:0] v__h15336;
  reg [31:0] v__h15572;
  reg [31:0] v__h15578;
  reg [31:0] v__h17185;
  reg [31:0] v__h17191;
  reg [31:0] v__h17479;
  reg [31:0] v__h17485;
  reg [31:0] v__h18579;
  reg [31:0] v__h18585;
  reg [31:0] v__h18686;
  reg [31:0] v__h18692;
  reg [31:0] v__h18791;
  reg [31:0] v__h18797;
  reg [31:0] v__h18871;
  reg [31:0] v__h18877;
  reg [31:0] v__h19460;
  reg [31:0] v__h19466;
  reg [31:0] v__h19499;
  reg [31:0] v__h19505;
  reg [31:0] v__h19846;
  reg [31:0] v__h19852;
  reg [31:0] v__h2942;
  reg [31:0] v__h2948;
  reg [31:0] v__h3477;
  reg [31:0] v__h3483;
  reg [31:0] v__h3842;
  reg [31:0] v__h3848;
  reg [31:0] v__h3943;
  reg [31:0] v__h3949;
  reg [31:0] v__h4092;
  reg [31:0] v__h4098;
  wire valid;
  reg [2:0] value__h17372;
  reg [63:0] word64;
  wire [15:0] word64094_BITS_15_TO_0__q16;
  wire [7:0] word64094_BITS_15_TO_8__q18;
  wire [7:0] word64094_BITS_23_TO_16__q19;
  wire [31:0] word64094_BITS_31_TO_0__q17;
  wire [15:0] word64094_BITS_31_TO_16__q20;
  wire [7:0] word64094_BITS_31_TO_24__q21;
  wire [7:0] word64094_BITS_39_TO_32__q22;
  wire [15:0] word64094_BITS_47_TO_32__q23;
  wire [7:0] word64094_BITS_47_TO_40__q25;
  wire [7:0] word64094_BITS_55_TO_48__q26;
  wire [31:0] word64094_BITS_63_TO_32__q24;
  wire [15:0] word64094_BITS_63_TO_48__q27;
  wire [7:0] word64094_BITS_63_TO_56__q28;
  wire [7:0] word64094_BITS_7_TO_0__q15;
  wire [63:0] word64__h5094;
  reg [2:0] x__h2520;
  wire [63:0] y__h5337;


  assign CAN_FIRE_mem_master_m_arready = 1'b1;
  assign CAN_FIRE_mem_master_m_awready = 1'b1;
  assign CAN_FIRE_mem_master_m_bvalid = 1'b1;
  assign CAN_FIRE_mem_master_m_rvalid = 1'b1;
  assign CAN_FIRE_mem_master_m_wready = 1'b1;
  assign CAN_FIRE_req = 1'b1;
  assign CAN_FIRE_set_verbosity = 1'b1;
  assign CAN_FIRE_tlb_flush = 1'b1;
  assign RDY_set_verbosity = 1'b1;
  assign RDY_tlb_flush = 1'b1;
  assign WILL_FIRE_mem_master_m_arready = 1'b1;
  assign WILL_FIRE_mem_master_m_awready = 1'b1;
  assign WILL_FIRE_mem_master_m_bvalid = 1'b1;
  assign WILL_FIRE_mem_master_m_rvalid = 1'b1;
  assign WILL_FIRE_mem_master_m_wready = 1'b1;
  assign access_exc_code__h2256 = 4'h1;
  assign ctr_wr_rsps_pending_crg$EN = 1'b1;
  assign f_fabric_write_reqs$CLR = 1'b0;
  assign f_reset_reqs$CLR = 1'b0;
  assign f_reset_rsps$CLR = 1'b0;
  assign ram_state_and_ctag_cset$WEA = 1'b1;
  assign ram_state_and_ctag_cset$WEB = 1'b0;
  assign ram_word64_set$WEA = 1'b1;
  assign ram_word64_set$WEB = 1'b0;
  assign rg_lower_word32$D_IN = 32'h00000000;
  assign rg_lower_word32$EN = 1'b0;
  assign rg_lower_word32_full$D_IN = 1'b0;
  assign rg_pte_pa$D_IN = 32'h00000000;
  assign rg_pte_pa$EN = 1'b0;
  assign soc_map$m_is_IO_addr_addr = 64'h0000000000000000;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0000000000000000;

  assign st_amo_val = (MUX_dw_output_ld_val$wset_1__SEL_2 ? 64'h0000000000000000 : rg_st_amo_val);
  assign exc = (rg_state == 4'h4);
  assign mem_master_awid = master_xactor_f_wr_addr$D_OUT[96:93];
  assign mem_master_awaddr = master_xactor_f_wr_addr$D_OUT[92:29];
  assign mem_master_awlen = master_xactor_f_wr_addr$D_OUT[28:21];
  assign mem_master_awsize = master_xactor_f_wr_addr$D_OUT[20:18];
  assign mem_master_awburst = master_xactor_f_wr_addr$D_OUT[17:16];
  assign mem_master_awlock = master_xactor_f_wr_addr$D_OUT[15];
  assign mem_master_awcache = master_xactor_f_wr_addr$D_OUT[14:11];
  assign mem_master_awprot = master_xactor_f_wr_addr$D_OUT[10:8];
  assign mem_master_awqos = master_xactor_f_wr_addr$D_OUT[7:4];
  assign mem_master_awregion = master_xactor_f_wr_addr$D_OUT[3:0];
  assign mem_master_wdata = master_xactor_f_wr_data$D_OUT[72:9];
  assign mem_master_wstrb = master_xactor_f_wr_data$D_OUT[8:1];
  assign mem_master_wlast = master_xactor_f_wr_data$D_OUT[0];
  assign mem_master_arid = master_xactor_f_rd_addr$D_OUT[96:93];
  assign mem_master_araddr = master_xactor_f_rd_addr$D_OUT[92:29];
  assign mem_master_arlen = master_xactor_f_rd_addr$D_OUT[28:21];
  assign mem_master_arsize = master_xactor_f_rd_addr$D_OUT[20:18];
  assign mem_master_arburst = master_xactor_f_rd_addr$D_OUT[17:16];
  assign mem_master_arlock = master_xactor_f_rd_addr$D_OUT[15];
  assign mem_master_arcache = master_xactor_f_rd_addr$D_OUT[14:11];
  assign mem_master_arprot = master_xactor_f_rd_addr$D_OUT[10:8];
  assign mem_master_arqos = master_xactor_f_rd_addr$D_OUT[7:4];
  assign mem_master_arregion = master_xactor_f_rd_addr$D_OUT[3:0];
  assign CAN_FIRE_RL_rl_rereq = (rg_state == 4'ha);
  assign CAN_FIRE_RL_rl_ST_AMO_response = (rg_state == 4'hb);
  assign CAN_FIRE_RL_rl_maintain_io_read_rsp = (rg_state == 4'he);
  assign CAN_FIRE_RL_rl_drive_exception_rsp = (rg_state == 4'h4);
  assign WILL_FIRE_RL_rl_drive_exception_rsp = (rg_state == 4'h4);
  assign MUX_f_fabric_write_reqs$enq_1__VAL_1 = {rg_f3, rg_addr, rg_st_amo_val};
  assign MUX_f_fabric_write_reqs$enq_1__VAL_2 = {rg_f3, rg_pa, rg_st_amo_val};
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_1 = {4'h0, cline_fabric_addr__h14584, 29'h006d0000};
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_2 = {4'h0, fabric_addr__h17243, 8'h00, value__h17372, 18'h10000};
  assign MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 = {3'h4, rg_pa[31:12]};
  assign MUX_ram_word64_set$b_put_2__VAL_2 = (rg_word64_set_in_cache + 9'h001);
  assign MUX_ram_word64_set$b_put_2__VAL_4 = {rg_addr[11:5], 2'h0};
  assign MUX_rg_cset_in_cache$write_1__VAL_1 = (rg_cset_in_cache + 7'h01);
  assign MUX_rg_exc_code$write_1__VAL_1 = (req_op ? 4'h6 : 4'h4);
  assign MUX_rg_state$write_1__VAL_1 = (NOT_req_f3_BITS_1_TO_0_18_EQ_0b0_19_20_AND_NOT_ETC___d539 ? 4'h4 : 4'h3);
  assign MUX_rg_state$write_1__VAL_4 = ((master_xactor_f_rd_data$D_OUT[2:1] == 2'h0) ? 4'he : 4'h4);
  assign MUX_rg_state$write_1__VAL_7 = (((master_xactor_f_rd_data$D_OUT[2:1] != 2'h0) | rg_error_during_refill) ? 4'h4 : 4'ha);
  assign MUX_rg_state$write_1__VAL_9 = (rg_op ? 4'hb : 4'h8);
  assign ctr_wr_rsps_pending_crg$port0__write_1 = (ctr_wr_rsps_pending_crg + 4'h1);
  assign ctr_wr_rsps_pending_crg$port1__write_1 = (b__h14485 - 4'h1);
  assign ctr_wr_rsps_pending_crg$port2__read = (CAN_FIRE_RL_rl_discard_write_rsp ? ctr_wr_rsps_pending_crg$port1__write_1 : b__h14485);
  assign ctr_wr_rsps_pending_crg$port3__read = (ctr_wr_rsps_pending_crg$EN_port2__write ? 4'h0 : ctr_wr_rsps_pending_crg$port2__read);
  assign rg_cset_in_cache$D_IN = (WILL_FIRE_RL_rl_reset ? MUX_rg_cset_in_cache$write_1__VAL_1_any_val : 7'h00);
  assign rg_pa$D_IN = (EN_req ? req_addr : rg_addr);
  assign rg_word64_set_in_cache$D_IN = (MUX_ram_word64_set$b_put_1__SEL_2 ? MUX_ram_word64_set$b_put_2__VAL_2 : MUX_ram_word64_set$b_put_2__VAL_4);
  assign f_fabric_write_reqs$D_IN = (MUX_f_fabric_write_reqs$enq_1__SEL_1 ? MUX_f_fabric_write_reqs$enq_1__VAL_1 : MUX_f_fabric_write_reqs$enq_1__VAL_2);
  assign f_reset_reqs$D_IN = (~|EN_server_reset_request_put);
  assign master_xactor_f_rd_addr$D_IN = (WILL_FIRE_RL_rl_start_cache_refill ? MUX_master_xactor_f_rd_addr$enq_1__VAL_1 : MUX_master_xactor_f_rd_addr$enq_1__VAL_2);
  assign master_xactor_f_rd_data$D_IN = {mem_master_rid, mem_master_rdata, mem_master_rresp, mem_master_rlast};
  assign master_xactor_f_wr_addr$D_IN = {4'h0, mem_req_wr_addr_awaddr__h2473, 8'h00, x__h2520, 18'h10000};
  assign master_xactor_f_wr_data$D_IN = {mem_req_wr_data_wdata__h2699, mem_req_wr_data_wstrb__h2700, 1'b1};
  assign master_xactor_f_wr_resp$D_IN = {mem_master_bid, mem_master_bresp};
  assign ram_state_and_ctag_cset$ADDRA = (WILL_FIRE_RL_rl_start_cache_refill ? rg_addr[11:5] : rg_cset_in_cache);
  assign ram_state_and_ctag_cset$ADDRB = (MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ? req_addr[11:5] : rg_addr[11:5]);
  assign ram_state_and_ctag_cset$DIA = (WILL_FIRE_RL_rl_start_cache_refill ? MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 : 23'h2aaaaa);
  assign ram_state_and_ctag_cset$DIB = (MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ? 23'h2aaaaa : 23'h2aaaaa);
  assign ram_word64_set$ADDRA = (MUX_ram_word64_set$a_put_1__SEL_1 ? rg_word64_set_in_cache : rg_addr[11:3]);
  assign ram_word64_set$DIA = (MUX_ram_word64_set$a_put_1__SEL_1 ? master_xactor_f_rd_data$D_OUT[66:3] : IF_rg_f3_16_EQ_0b0_17_THEN_IF_rg_addr_6_BITS_2_ETC___d178);
  assign soc_map$m_is_mem_addr_addr = {32'h00000000, rg_addr};
  assign NOT_cfg_verbosity_read__0_ULE_1_1___d42 = (cfg_verbosity > 4'h1);
  assign NOT_cfg_verbosity_read__0_ULE_2_30___d331 = (cfg_verbosity > 4'h2);
  assign _theResult___snd_fst__h2707 = (f_fabric_write_reqs$D_OUT[63:0] << shift_bits__h2487);
  assign b__h14485 = (CAN_FIRE_RL_rl_fabric_send_write_req ? ctr_wr_rsps_pending_crg$port0__write_1 : ctr_wr_rsps_pending_crg);
  assign cline_addr__h14583 = {rg_pa[31:5], 5'h00};
  assign cline_fabric_addr__h14584 = {32'h00000000, cline_addr__h14583};
  assign fabric_addr__h17243 = {32'h00000000, rg_pa};
  assign master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1 = master_xactor_f_rd_data$D_OUT[10:3];
  assign master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4 = master_xactor_f_rd_data$D_OUT[18:11];
  assign master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2 = master_xactor_f_rd_data$D_OUT[18:3];
  assign master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5 = master_xactor_f_rd_data$D_OUT[26:19];
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6 = master_xactor_f_rd_data$D_OUT[34:19];
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7 = master_xactor_f_rd_data$D_OUT[34:27];
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3 = master_xactor_f_rd_data$D_OUT[34:3];
  assign master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8 = master_xactor_f_rd_data$D_OUT[42:35];
  assign master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9 = master_xactor_f_rd_data$D_OUT[50:35];
  assign master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11 = master_xactor_f_rd_data$D_OUT[50:43];
  assign master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12 = master_xactor_f_rd_data$D_OUT[58:51];
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10 = master_xactor_f_rd_data$D_OUT[66:35];
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13 = master_xactor_f_rd_data$D_OUT[66:51];
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14 = master_xactor_f_rd_data$D_OUT[66:59];
  assign mem_req_wr_addr_awaddr__h2473 = {32'h00000000, f_fabric_write_reqs$D_OUT[95:64]};
  assign pa_ctag__h4952 = {2'h0, rg_addr[31:12]};
  assign ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d102 = (ram_state_and_ctag_cset$DOB[21:0] == pa_ctag__h4952);
  assign result__h11657 = {{56{word64094_BITS_15_TO_8__q18[7]}}, word64094_BITS_15_TO_8__q18};
  assign result__h11685 = {{56{word64094_BITS_23_TO_16__q19[7]}}, word64094_BITS_23_TO_16__q19};
  assign result__h11713 = {{56{word64094_BITS_31_TO_24__q21[7]}}, word64094_BITS_31_TO_24__q21};
  assign result__h11741 = {{56{word64094_BITS_39_TO_32__q22[7]}}, word64094_BITS_39_TO_32__q22};
  assign result__h11769 = {{56{word64094_BITS_47_TO_40__q25[7]}}, word64094_BITS_47_TO_40__q25};
  assign result__h11797 = {{56{word64094_BITS_55_TO_48__q26[7]}}, word64094_BITS_55_TO_48__q26};
  assign result__h11825 = {{56{word64094_BITS_63_TO_56__q28[7]}}, word64094_BITS_63_TO_56__q28};
  assign result__h11870 = {56'h00000000000000, word64__h5094[7:0]};
  assign result__h11898 = {56'h00000000000000, word64__h5094[15:8]};
  assign result__h11926 = {56'h00000000000000, word64__h5094[23:16]};
  assign result__h11954 = {56'h00000000000000, word64__h5094[31:24]};
  assign result__h11982 = {56'h00000000000000, word64__h5094[39:32]};
  assign result__h12010 = {56'h00000000000000, word64__h5094[47:40]};
  assign result__h12038 = {56'h00000000000000, word64__h5094[55:48]};
  assign result__h12066 = {56'h00000000000000, word64__h5094[63:56]};
  assign result__h12111 = {{48{word64094_BITS_15_TO_0__q16[15]}}, word64094_BITS_15_TO_0__q16};
  assign result__h12139 = {{48{word64094_BITS_31_TO_16__q20[15]}}, word64094_BITS_31_TO_16__q20};
  assign result__h12167 = {{48{word64094_BITS_47_TO_32__q23[15]}}, word64094_BITS_47_TO_32__q23};
  assign result__h12195 = {{48{word64094_BITS_63_TO_48__q27[15]}}, word64094_BITS_63_TO_48__q27};
  assign result__h12236 = {48'h000000000000, word64__h5094[15:0]};
  assign result__h12264 = {48'h000000000000, word64__h5094[31:16]};
  assign result__h12292 = {48'h000000000000, word64__h5094[47:32]};
  assign result__h12320 = {48'h000000000000, word64__h5094[63:48]};
  assign result__h12361 = {{32{word64094_BITS_31_TO_0__q17[31]}}, word64094_BITS_31_TO_0__q17};
  assign result__h12389 = {{32{word64094_BITS_63_TO_32__q24[31]}}, word64094_BITS_63_TO_32__q24};
  assign result__h12428 = {32'h00000000, word64__h5094[31:0]};
  assign result__h12456 = {32'h00000000, word64__h5094[63:32]};
  assign result__h17654 = {{56{master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1[7]}}, master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1};
  assign result__h17684 = {{56{master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4[7]}}, master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4};
  assign result__h17711 = {{56{master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5[7]}}, master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5};
  assign result__h17738 = {{56{master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7[7]}}, master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7};
  assign result__h17765 = {{56{master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8[7]}}, master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8};
  assign result__h17792 = {{56{master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11[7]}}, master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11};
  assign result__h17819 = {{56{master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12[7]}}, master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12};
  assign result__h17846 = {{56{master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14[7]}}, master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14};
  assign result__h17890 = {56'h00000000000000, master_xactor_f_rd_data$D_OUT[10:3]};
  assign result__h17917 = {56'h00000000000000, master_xactor_f_rd_data$D_OUT[18:11]};
  assign result__h17944 = {56'h00000000000000, master_xactor_f_rd_data$D_OUT[26:19]};
  assign result__h17971 = {56'h00000000000000, master_xactor_f_rd_data$D_OUT[34:27]};
  assign result__h17998 = {56'h00000000000000, master_xactor_f_rd_data$D_OUT[42:35]};
  assign result__h18025 = {56'h00000000000000, master_xactor_f_rd_data$D_OUT[50:43]};
  assign result__h18052 = {56'h00000000000000, master_xactor_f_rd_data$D_OUT[58:51]};
  assign result__h18079 = {56'h00000000000000, master_xactor_f_rd_data$D_OUT[66:59]};
  assign result__h18123 = {{48{master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2[15]}}, master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2};
  assign result__h18150 = {{48{master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6[15]}}, master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6};
  assign result__h18177 = {{48{master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9[15]}}, master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9};
  assign result__h18204 = {{48{master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13[15]}}, master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13};
  assign result__h18244 = {48'h000000000000, master_xactor_f_rd_data$D_OUT[18:3]};
  assign result__h18271 = {48'h000000000000, master_xactor_f_rd_data$D_OUT[34:19]};
  assign result__h18298 = {48'h000000000000, master_xactor_f_rd_data$D_OUT[50:35]};
  assign result__h18325 = {48'h000000000000, master_xactor_f_rd_data$D_OUT[66:51]};
  assign result__h18365 = {{32{master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3[31]}}, master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3};
  assign result__h18392 = {{32{master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10[31]}}, master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10};
  assign result__h18430 = {32'h00000000, master_xactor_f_rd_data$D_OUT[34:3]};
  assign result__h18457 = {32'h00000000, master_xactor_f_rd_data$D_OUT[66:35]};
  assign result__h5301 = {{56{word64094_BITS_7_TO_0__q15[7]}}, word64094_BITS_7_TO_0__q15};
  assign shift_bits__h2487 = {f_fabric_write_reqs$D_OUT[66:64], 3'h0};
  assign strobe64__h2637 = (8'h01 << f_fabric_write_reqs$D_OUT[66:64]);
  assign strobe64__h2639 = (8'h03 << f_fabric_write_reqs$D_OUT[66:64]);
  assign strobe64__h2641 = (8'h0f << f_fabric_write_reqs$D_OUT[66:64]);
  assign word64094_BITS_15_TO_0__q16 = word64__h5094[15:0];
  assign word64094_BITS_15_TO_8__q18 = word64__h5094[15:8];
  assign word64094_BITS_23_TO_16__q19 = word64__h5094[23:16];
  assign word64094_BITS_31_TO_0__q17 = word64__h5094[31:0];
  assign word64094_BITS_31_TO_16__q20 = word64__h5094[31:16];
  assign word64094_BITS_31_TO_24__q21 = word64__h5094[31:24];
  assign word64094_BITS_39_TO_32__q22 = word64__h5094[39:32];
  assign word64094_BITS_47_TO_32__q23 = word64__h5094[47:32];
  assign word64094_BITS_47_TO_40__q25 = word64__h5094[47:40];
  assign word64094_BITS_55_TO_48__q26 = word64__h5094[55:48];
  assign word64094_BITS_63_TO_32__q24 = word64__h5094[63:32];
  assign word64094_BITS_63_TO_48__q27 = word64__h5094[63:48];
  assign word64094_BITS_63_TO_56__q28 = word64__h5094[63:56];
  assign word64094_BITS_7_TO_0__q15 = word64__h5094[7:0];
  assign y__h5337 = {64{(ram_state_and_ctag_cset$DOB[22] & ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d102)}};
  assign WILL_FIRE_set_verbosity = EN_set_verbosity;
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put;
  assign RDY_server_reset_response_get = ((~|f_reset_rsps$D_OUT) & f_reset_rsps$EMPTY_N);
  assign CAN_FIRE_server_reset_response_get = ((~|f_reset_rsps$D_OUT) & f_reset_rsps$EMPTY_N);
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get;
  assign WILL_FIRE_req = EN_req;
  assign valid = dw_valid$whas;
  assign addr = rg_addr;
  assign exc_code = rg_exc_code;
  assign RDY_server_flush_request_put = f_reset_reqs$FULL_N;
  assign CAN_FIRE_server_flush_request_put = f_reset_reqs$FULL_N;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put;
  assign RDY_server_flush_response_get = (f_reset_rsps$D_OUT & f_reset_rsps$EMPTY_N);
  assign CAN_FIRE_server_flush_response_get = (f_reset_rsps$D_OUT & f_reset_rsps$EMPTY_N);
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush;
  assign mem_master_awvalid = master_xactor_f_wr_addr$EMPTY_N;
  assign mem_master_wvalid = master_xactor_f_wr_data$EMPTY_N;
  assign mem_master_bready = master_xactor_f_wr_resp$FULL_N;
  assign mem_master_arvalid = master_xactor_f_rd_addr$EMPTY_N;
  assign mem_master_rready = master_xactor_f_rd_data$FULL_N;
  assign CAN_FIRE_RL_rl_fabric_send_write_req = ((f_fabric_write_reqs$EMPTY_N & master_xactor_f_wr_addr$FULL_N) & master_xactor_f_wr_data$FULL_N);
  assign WILL_FIRE_RL_rl_fabric_send_write_req = CAN_FIRE_RL_rl_fabric_send_write_req;
  assign CAN_FIRE_RL_rl_reset = (((rg_cset_in_cache != 7'h7f) | (f_reset_reqs$EMPTY_N & f_reset_rsps$FULL_N)) & (rg_state == 4'h1));
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset;
  assign CAN_FIRE_RL_rl_probe_and_immed_rsp = (((1'b0 | (~|rg_op)) | f_fabric_write_reqs$FULL_N) & (rg_state == 4'h3));
  assign WILL_FIRE_RL_rl_probe_and_immed_rsp = (CAN_FIRE_RL_rl_probe_and_immed_rsp & (~|WILL_FIRE_RL_rl_start_reset));
  assign CAN_FIRE_RL_rl_start_cache_refill = ((master_xactor_f_rd_addr$FULL_N & (rg_state == 4'h8)) & (b__h14485 == 4'h0));
  assign WILL_FIRE_RL_rl_start_cache_refill = ((CAN_FIRE_RL_rl_start_cache_refill & (~|WILL_FIRE_RL_rl_start_reset)) & (~|EN_req));
  assign CAN_FIRE_RL_rl_cache_refill_rsps_loop = (master_xactor_f_rd_data$EMPTY_N & (rg_state == 4'h9));
  assign WILL_FIRE_RL_rl_cache_refill_rsps_loop = ((CAN_FIRE_RL_rl_cache_refill_rsps_loop & (~|WILL_FIRE_RL_rl_start_reset)) & (~|EN_req));
  assign WILL_FIRE_RL_rl_rereq = ((CAN_FIRE_RL_rl_rereq & (~|WILL_FIRE_RL_rl_start_reset)) & (~|EN_req));
  assign WILL_FIRE_RL_rl_ST_AMO_response = CAN_FIRE_RL_rl_ST_AMO_response;
  assign CAN_FIRE_RL_rl_io_read_req = (((master_xactor_f_rd_addr$FULL_N & (rg_state == 4'hc)) & (~|rg_op)) & (b__h14485 == 4'h0));
  assign WILL_FIRE_RL_rl_io_read_req = (CAN_FIRE_RL_rl_io_read_req & (~|WILL_FIRE_RL_rl_start_reset));
  assign CAN_FIRE_RL_rl_io_read_rsp = (master_xactor_f_rd_data$EMPTY_N & (rg_state == 4'hd));
  assign WILL_FIRE_RL_rl_io_read_rsp = (CAN_FIRE_RL_rl_io_read_rsp & (~|WILL_FIRE_RL_rl_start_reset));
  assign WILL_FIRE_RL_rl_maintain_io_read_rsp = CAN_FIRE_RL_rl_maintain_io_read_rsp;
  assign CAN_FIRE_RL_rl_io_write_req = ((f_fabric_write_reqs$FULL_N & (rg_state == 4'hc)) & rg_op);
  assign WILL_FIRE_RL_rl_io_write_req = MUX_rg_state$write_1__SEL_3;
  assign CAN_FIRE_RL_rl_discard_write_rsp = ((b__h14485 != 4'h0) & master_xactor_f_wr_resp$EMPTY_N);
  assign WILL_FIRE_RL_rl_discard_write_rsp = CAN_FIRE_RL_rl_discard_write_rsp;
  assign CAN_FIRE_RL_rl_start_reset = MUX_rg_state$write_1__SEL_2;
  assign WILL_FIRE_RL_rl_start_reset = MUX_rg_state$write_1__SEL_2;
  assign MUX_dw_output_ld_val$wset_1__SEL_1 = (WILL_FIRE_RL_rl_io_read_rsp & (master_xactor_f_rd_data$D_OUT[2:1] == 2'h0));
  assign MUX_dw_output_ld_val$wset_1__SEL_2 = (WILL_FIRE_RL_rl_probe_and_immed_rsp & NOT_dmem_not_imem_10_OR_soc_map_m_is_mem_addr__ETC___d190);
  assign MUX_dw_output_ld_val$wset_1__SEL_3 = (WILL_FIRE_RL_rl_maintain_io_read_rsp | WILL_FIRE_RL_rl_ST_AMO_response);
  assign MUX_f_fabric_write_reqs$enq_1__SEL_1 = ((WILL_FIRE_RL_rl_probe_and_immed_rsp & 1'b1) & rg_op);
  assign MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 = (EN_req & req_f3_BITS_1_TO_0_18_EQ_0b0_19_OR_req_f3_BITS_ETC___d548);
  assign MUX_ram_word64_set$a_put_1__SEL_1 = (WILL_FIRE_RL_rl_cache_refill_rsps_loop & (master_xactor_f_rd_data$D_OUT[2:1] == 2'h0));
  assign MUX_ram_word64_set$b_put_1__SEL_2 = (WILL_FIRE_RL_rl_cache_refill_rsps_loop & (rg_word64_set_in_cache[1:0] != 2'h3));
  assign MUX_rg_error_during_refill$write_1__SEL_1 = (WILL_FIRE_RL_rl_cache_refill_rsps_loop & (master_xactor_f_rd_data$D_OUT[2:1] != 2'h0));
  assign MUX_rg_exc_code$write_1__SEL_1 = (EN_req & NOT_req_f3_BITS_1_TO_0_18_EQ_0b0_19_20_AND_NOT_ETC___d539);
  assign MUX_rg_exc_code$write_1__SEL_2 = (WILL_FIRE_RL_rl_io_read_rsp & (master_xactor_f_rd_data$D_OUT[2:1] != 2'h0));
  assign MUX_rg_state$write_1__SEL_2 = (f_reset_reqs$EMPTY_N & (rg_state != 4'h1));
  assign MUX_rg_state$write_1__SEL_3 = (CAN_FIRE_RL_rl_io_write_req & (~|WILL_FIRE_RL_rl_start_reset));
  assign MUX_rg_state$write_1__SEL_7 = (WILL_FIRE_RL_rl_cache_refill_rsps_loop & (rg_word64_set_in_cache[1:0] == 2'h3));
  assign MUX_rg_state$write_1__SEL_9 = (WILL_FIRE_RL_rl_probe_and_immed_rsp & dmem_not_imem_AND_NOT_soc_map_m_is_mem_addr_0__ETC___d106);
  assign MUX_rg_state$write_1__SEL_10 = (WILL_FIRE_RL_rl_reset & (rg_cset_in_cache == 7'h7f));
  assign dw_valid$whas = (((((WILL_FIRE_RL_rl_io_read_rsp & (master_xactor_f_rd_data$D_OUT[2:1] == 2'h0)) | (WILL_FIRE_RL_rl_probe_and_immed_rsp & NOT_dmem_not_imem_10_OR_soc_map_m_is_mem_addr__ETC___d190)) | WILL_FIRE_RL_rl_drive_exception_rsp) | WILL_FIRE_RL_rl_maintain_io_read_rsp) | WILL_FIRE_RL_rl_ST_AMO_response);
  assign ctr_wr_rsps_pending_crg$EN_port2__write = (WILL_FIRE_RL_rl_start_reset & (~|f_reset_reqs$D_OUT));
  assign cfg_verbosity$D_IN = set_verbosity_verbosity;
  assign cfg_verbosity$EN = EN_set_verbosity;
  assign ctr_wr_rsps_pending_crg$D_IN = ctr_wr_rsps_pending_crg$port3__read;
  assign rg_addr$D_IN = req_addr;
  assign rg_addr$EN = EN_req;
  assign rg_cset_in_cache$EN = (WILL_FIRE_RL_rl_reset | WILL_FIRE_RL_rl_start_reset);
  assign rg_error_during_refill$D_IN = MUX_rg_error_during_refill$write_1__SEL_1;
  assign rg_error_during_refill$EN = ((WILL_FIRE_RL_rl_cache_refill_rsps_loop & (master_xactor_f_rd_data$D_OUT[2:1] != 2'h0)) | WILL_FIRE_RL_rl_start_cache_refill);
  assign rg_exc_code$EN = (((WILL_FIRE_RL_rl_cache_refill_rsps_loop & (master_xactor_f_rd_data$D_OUT[2:1] != 2'h0)) | (WILL_FIRE_RL_rl_io_read_rsp & (master_xactor_f_rd_data$D_OUT[2:1] != 2'h0))) | (EN_req & NOT_req_f3_BITS_1_TO_0_18_EQ_0b0_19_20_AND_NOT_ETC___d539));
  assign rg_f3$D_IN = req_f3;
  assign rg_f3$EN = EN_req;
  assign rg_ld_val$D_IN = ld_val__h17594;
  assign rg_ld_val$EN = WILL_FIRE_RL_rl_io_read_rsp;
  assign rg_lower_word32_full$EN = (WILL_FIRE_RL_rl_start_cache_refill | WILL_FIRE_RL_rl_start_reset);
  assign rg_op$D_IN = req_op;
  assign rg_op$EN = EN_req;
  assign rg_pa$EN = (EN_req | WILL_FIRE_RL_rl_probe_and_immed_rsp);
  assign rg_st_amo_val$D_IN = req_st_value;
  assign rg_st_amo_val$EN = EN_req;
  assign rg_state$EN = ((((((((((WILL_FIRE_RL_rl_reset & (rg_cset_in_cache == 7'h7f)) | (WILL_FIRE_RL_rl_cache_refill_rsps_loop & (rg_word64_set_in_cache[1:0] == 2'h3))) | (WILL_FIRE_RL_rl_probe_and_immed_rsp & dmem_not_imem_AND_NOT_soc_map_m_is_mem_addr_0__ETC___d106)) | WILL_FIRE_RL_rl_io_read_rsp) | EN_req) | WILL_FIRE_RL_rl_start_reset) | WILL_FIRE_RL_rl_rereq) | WILL_FIRE_RL_rl_start_cache_refill) | WILL_FIRE_RL_rl_io_write_req) | WILL_FIRE_RL_rl_io_read_req);
  assign rg_word64_set_in_cache$EN = ((WILL_FIRE_RL_rl_cache_refill_rsps_loop & (rg_word64_set_in_cache[1:0] != 2'h3)) | WILL_FIRE_RL_rl_start_cache_refill);
  assign f_fabric_write_reqs$ENQ = (((WILL_FIRE_RL_rl_probe_and_immed_rsp & 1'b1) & rg_op) | WILL_FIRE_RL_rl_io_write_req);
  assign f_fabric_write_reqs$DEQ = CAN_FIRE_RL_rl_fabric_send_write_req;
  assign f_reset_reqs$ENQ = (EN_server_reset_request_put | EN_server_flush_request_put);
  assign f_reset_reqs$DEQ = (WILL_FIRE_RL_rl_reset & (rg_cset_in_cache == 7'h7f));
  assign f_reset_rsps$D_IN = f_reset_reqs$D_OUT;
  assign f_reset_rsps$ENQ = (WILL_FIRE_RL_rl_reset & (rg_cset_in_cache == 7'h7f));
  assign f_reset_rsps$DEQ = (EN_server_flush_response_get | EN_server_reset_response_get);
  assign master_xactor_f_rd_addr$ENQ = (WILL_FIRE_RL_rl_start_cache_refill | WILL_FIRE_RL_rl_io_read_req);
  assign master_xactor_f_rd_addr$DEQ = (master_xactor_f_rd_addr$EMPTY_N & mem_master_arready);
  assign master_xactor_f_rd_addr$CLR = (WILL_FIRE_RL_rl_start_reset & (~|f_reset_reqs$D_OUT));
  assign master_xactor_f_rd_data$ENQ = (mem_master_rvalid & master_xactor_f_rd_data$FULL_N);
  assign master_xactor_f_rd_data$DEQ = (WILL_FIRE_RL_rl_io_read_rsp | WILL_FIRE_RL_rl_cache_refill_rsps_loop);
  assign master_xactor_f_rd_data$CLR = (WILL_FIRE_RL_rl_start_reset & (~|f_reset_reqs$D_OUT));
  assign master_xactor_f_wr_addr$ENQ = CAN_FIRE_RL_rl_fabric_send_write_req;
  assign master_xactor_f_wr_addr$DEQ = (master_xactor_f_wr_addr$EMPTY_N & mem_master_awready);
  assign master_xactor_f_wr_addr$CLR = (WILL_FIRE_RL_rl_start_reset & (~|f_reset_reqs$D_OUT));
  assign master_xactor_f_wr_data$ENQ = CAN_FIRE_RL_rl_fabric_send_write_req;
  assign master_xactor_f_wr_data$DEQ = (master_xactor_f_wr_data$EMPTY_N & mem_master_wready);
  assign master_xactor_f_wr_data$CLR = (WILL_FIRE_RL_rl_start_reset & (~|f_reset_reqs$D_OUT));
  assign master_xactor_f_wr_resp$ENQ = (mem_master_bvalid & master_xactor_f_wr_resp$FULL_N);
  assign master_xactor_f_wr_resp$DEQ = CAN_FIRE_RL_rl_discard_write_rsp;
  assign master_xactor_f_wr_resp$CLR = (WILL_FIRE_RL_rl_start_reset & (~|f_reset_reqs$D_OUT));
  assign ram_state_and_ctag_cset$ENA = (WILL_FIRE_RL_rl_start_cache_refill | WILL_FIRE_RL_rl_reset);
  assign ram_state_and_ctag_cset$ENB = ((EN_req & req_f3_BITS_1_TO_0_18_EQ_0b0_19_OR_req_f3_BITS_ETC___d548) | WILL_FIRE_RL_rl_rereq);
  assign ram_word64_set$ENA = ((WILL_FIRE_RL_rl_cache_refill_rsps_loop & (master_xactor_f_rd_data$D_OUT[2:1] == 2'h0)) | (WILL_FIRE_RL_rl_probe_and_immed_rsp & NOT_dmem_not_imem_10_OR_soc_map_m_is_mem_addr__ETC___d114));
  assign ram_word64_set$ENB = ((((EN_req & req_f3_BITS_1_TO_0_18_EQ_0b0_19_OR_req_f3_BITS_ETC___d548) | (WILL_FIRE_RL_rl_cache_refill_rsps_loop & (rg_word64_set_in_cache[1:0] != 2'h3))) | WILL_FIRE_RL_rl_rereq) | WILL_FIRE_RL_rl_start_cache_refill);
  assign NOT_dmem_not_imem_10_OR_soc_map_m_is_mem_addr__ETC___d114 = (((1'b1 & rg_op) & ram_state_and_ctag_cset$DOB[22]) & ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d102);
  assign NOT_dmem_not_imem_10_OR_soc_map_m_is_mem_addr__ETC___d190 = (((1'b1 & (~|rg_op)) & ram_state_and_ctag_cset$DOB[22]) & ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d102);
  assign NOT_req_f3_BITS_1_TO_0_18_EQ_0b0_19_20_AND_NOT_ETC___d539 = ((((req_f3[1:0] != 2'h0) & ((req_f3[1:0] != 2'h1) | req_addr[0])) & ((req_f3[1:0] != 2'h2) | (req_addr[1:0] != 2'h0))) & ((req_f3[1:0] != 2'h3) | (req_addr[2:0] != 3'h0)));
  assign NOT_rg_op_1_2_AND_ram_state_and_ctag_cset_b_re_ETC___d305 = ((((~|rg_op) & ram_state_and_ctag_cset$DOB[22]) & ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d102) & NOT_cfg_verbosity_read__0_ULE_1_1___d42);
  assign dmem_not_imem_AND_NOT_soc_map_m_is_mem_addr_0__ETC___d106 = (((1'b0 | rg_op) | (~|ram_state_and_ctag_cset$DOB[22])) | (~|ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d102));
  assign req_f3_BITS_1_TO_0_18_EQ_0b0_19_OR_req_f3_BITS_ETC___d548 = ((((req_f3[1:0] == 2'h0) | ((req_f3[1:0] == 2'h1) & (~|req_addr[0]))) | ((req_f3[1:0] == 2'h2) & (req_addr[1:0] == 2'h0))) | ((req_f3[1:0] == 2'h3) & (req_addr[2:0] == 3'h0)));
  assign rg_op_1_AND_ram_state_and_ctag_cset_b_read__5__ETC___d180 = (((rg_op & ram_state_and_ctag_cset$DOB[22]) & ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d102) & NOT_cfg_verbosity_read__0_ULE_1_1___d42);
  assign word64__h5094 = (ram_word64_set$DOB & y__h5337);
  assign RTL__DOT__near_mem__DOT__dcache__DOT__rg_addr = rg_addr;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__rg_pa = rg_pa;

  always @(rg_ld_val or MUX_dw_output_ld_val$wset_1__SEL_3 or MUX_dw_output_ld_val$wset_1__VAL_2 or MUX_dw_output_ld_val$wset_1__SEL_2 or ld_val__h17594 or MUX_dw_output_ld_val$wset_1__SEL_1) case (1'b1)
    MUX_dw_output_ld_val$wset_1__SEL_1: word64 = ld_val__h17594;
    MUX_dw_output_ld_val$wset_1__SEL_2: word64 = MUX_dw_output_ld_val$wset_1__VAL_2;
    MUX_dw_output_ld_val$wset_1__SEL_3: word64 = rg_ld_val;
    default: word64 = 64'haaaaaaaaaaaaaaaa;
  endcase

  always @(CASE_rg_addr_BITS_2_TO_0_0x0_result2428_0x4_re_ETC__q33 or IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d285 or IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d264 or word64__h5094 or rg_addr or CASE_rg_addr_BITS_2_TO_0_0x0_result2361_0x4_re_ETC__q32 or IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d276 or IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d247 or rg_f3) case (rg_f3)
    3'h0: MUX_dw_output_ld_val$wset_1__VAL_2 = IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d247;
    3'h1: MUX_dw_output_ld_val$wset_1__VAL_2 = IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d276;
    3'h2: MUX_dw_output_ld_val$wset_1__VAL_2 = CASE_rg_addr_BITS_2_TO_0_0x0_result2361_0x4_re_ETC__q32;
    3'h3: MUX_dw_output_ld_val$wset_1__VAL_2 = ((rg_addr[2:0] == 3'h0) ? word64__h5094 : 64'h0000000000000000);
    3'h4: MUX_dw_output_ld_val$wset_1__VAL_2 = IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d264;
    3'h5: MUX_dw_output_ld_val$wset_1__VAL_2 = IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d285;
    3'h6: MUX_dw_output_ld_val$wset_1__VAL_2 = CASE_rg_addr_BITS_2_TO_0_0x0_result2428_0x4_re_ETC__q33;
    3'h7: MUX_dw_output_ld_val$wset_1__VAL_2 = 64'h0000000000000000;
  endcase

  always @(access_exc_code__h2256 or MUX_rg_error_during_refill$write_1__SEL_1 or MUX_rg_exc_code$write_1__SEL_2 or MUX_rg_exc_code$write_1__VAL_1 or MUX_rg_exc_code$write_1__SEL_1) case (1'b1)
    MUX_rg_exc_code$write_1__SEL_1: rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_1;
    MUX_rg_exc_code$write_1__SEL_2: rg_exc_code$D_IN = 4'h5;
    MUX_rg_error_during_refill$write_1__SEL_1: rg_exc_code$D_IN = access_exc_code__h2256;
    default: rg_exc_code$D_IN = 4'ha;
  endcase

  always @(MUX_rg_state$write_1__SEL_10 or MUX_rg_state$write_1__VAL_9 or MUX_rg_state$write_1__SEL_9 or WILL_FIRE_RL_rl_start_cache_refill or MUX_rg_state$write_1__VAL_7 or MUX_rg_state$write_1__SEL_7 or WILL_FIRE_RL_rl_rereq or WILL_FIRE_RL_rl_io_read_req or MUX_rg_state$write_1__VAL_4 or WILL_FIRE_RL_rl_io_read_rsp or WILL_FIRE_RL_rl_io_write_req or WILL_FIRE_RL_rl_start_reset or MUX_rg_state$write_1__VAL_1 or EN_req) case (1'b1)
    EN_req: rg_state$D_IN = MUX_rg_state$write_1__VAL_1;
    WILL_FIRE_RL_rl_start_reset: rg_state$D_IN = 4'h1;
    WILL_FIRE_RL_rl_io_write_req: rg_state$D_IN = 4'hb;
    WILL_FIRE_RL_rl_io_read_rsp: rg_state$D_IN = MUX_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_rl_io_read_req: rg_state$D_IN = 4'hd;
    WILL_FIRE_RL_rl_rereq: rg_state$D_IN = 4'h3;
    MUX_rg_state$write_1__SEL_7: rg_state$D_IN = MUX_rg_state$write_1__VAL_7;
    WILL_FIRE_RL_rl_start_cache_refill: rg_state$D_IN = 4'h9;
    MUX_rg_state$write_1__SEL_9: rg_state$D_IN = MUX_rg_state$write_1__VAL_9;
    MUX_rg_state$write_1__SEL_10: rg_state$D_IN = 4'h2;
    default: rg_state$D_IN = 4'ha;
  endcase

  always @(MUX_ram_word64_set$b_put_2__VAL_4 or WILL_FIRE_RL_rl_start_cache_refill or rg_addr or WILL_FIRE_RL_rl_rereq or MUX_ram_word64_set$b_put_2__VAL_2 or MUX_ram_word64_set$b_put_1__SEL_2 or req_addr or MUX_ram_state_and_ctag_cset$b_put_1__SEL_1) case (1'b1)
    MUX_ram_state_and_ctag_cset$b_put_1__SEL_1: ram_word64_set$ADDRB = req_addr[11:3];
    MUX_ram_word64_set$b_put_1__SEL_2: ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_2;
    WILL_FIRE_RL_rl_rereq: ram_word64_set$ADDRB = rg_addr[11:3];
    WILL_FIRE_RL_rl_start_cache_refill: ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_4;
    default: ram_word64_set$ADDRB = 9'h0aa;
  endcase

  always @(WILL_FIRE_RL_rl_start_cache_refill or WILL_FIRE_RL_rl_rereq or MUX_ram_word64_set$b_put_1__SEL_2 or MUX_ram_state_and_ctag_cset$b_put_1__SEL_1) case (1'b1)
    MUX_ram_state_and_ctag_cset$b_put_1__SEL_1: ram_word64_set$DIB = 64'haaaaaaaaaaaaaaaa;
    MUX_ram_word64_set$b_put_1__SEL_2: ram_word64_set$DIB = 64'haaaaaaaaaaaaaaaa;
    WILL_FIRE_RL_rl_rereq: ram_word64_set$DIB = 64'haaaaaaaaaaaaaaaa;
    WILL_FIRE_RL_rl_start_cache_refill: ram_word64_set$DIB = 64'haaaaaaaaaaaaaaaa;
    default: ram_word64_set$DIB = 64'haaaaaaaaaaaaaaaa;
  endcase

  always @(f_fabric_write_reqs$D_OUT) case (f_fabric_write_reqs$D_OUT[97:96])
    2'h0: x__h2520 = 3'h0;
    2'h1: x__h2520 = 3'h1;
    2'h2: x__h2520 = 3'h2;
    2'h3: x__h2520 = 3'h3;
  endcase

  always @(rg_f3) case (rg_f3[1:0])
    2'h0: value__h17372 = 3'h0;
    2'h1: value__h17372 = 3'h1;
    2'h2: value__h17372 = 3'h2;
    2'h3: value__h17372 = 3'h3;
  endcase

  always @(strobe64__h2641 or strobe64__h2639 or strobe64__h2637 or f_fabric_write_reqs$D_OUT) case (f_fabric_write_reqs$D_OUT[97:96])
    2'h0: mem_req_wr_data_wstrb__h2700 = strobe64__h2637;
    2'h1: mem_req_wr_data_wstrb__h2700 = strobe64__h2639;
    2'h2: mem_req_wr_data_wstrb__h2700 = strobe64__h2641;
    2'h3: mem_req_wr_data_wstrb__h2700 = 8'hff;
  endcase

  always @(_theResult___snd_fst__h2707 or f_fabric_write_reqs$D_OUT) case (f_fabric_write_reqs$D_OUT[97:96])
    2'h0: mem_req_wr_data_wdata__h2699 = _theResult___snd_fst__h2707;
    2'h1: mem_req_wr_data_wdata__h2699 = _theResult___snd_fst__h2707;
    2'h2: mem_req_wr_data_wdata__h2699 = _theResult___snd_fst__h2707;
    2'h3: mem_req_wr_data_wdata__h2699 = f_fabric_write_reqs$D_OUT[63:0];
  endcase

  always @(result__h12195 or result__h12167 or result__h12139 or result__h12111 or rg_addr) case (rg_addr[2:0])
    3'h0: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d276 = result__h12111;
    3'h2: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d276 = result__h12139;
    3'h4: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d276 = result__h12167;
    3'h6: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d276 = result__h12195;
    default: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d276 = 64'h0000000000000000;
  endcase

  always @(rg_st_amo_val or ram_word64_set$DOB or rg_addr) case (rg_addr[2:0])
    3'h0: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d167 = {ram_word64_set$DOB[63:16], rg_st_amo_val[15:0]};
    3'h2: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d167 = {ram_word64_set$DOB[63:32], rg_st_amo_val[15:0], ram_word64_set$DOB[15:0]};
    3'h4: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d167 = {ram_word64_set$DOB[63:48], rg_st_amo_val[15:0], ram_word64_set$DOB[31:0]};
    3'h6: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d167 = {rg_st_amo_val[15:0], ram_word64_set$DOB[47:0]};
    default: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d167 = ram_word64_set$DOB;
  endcase

  always @(result__h11825 or result__h11797 or result__h11769 or result__h11741 or result__h11713 or result__h11685 or result__h11657 or result__h5301 or rg_addr) case (rg_addr[2:0])
    3'h0: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d247 = result__h5301;
    3'h1: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d247 = result__h11657;
    3'h2: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d247 = result__h11685;
    3'h3: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d247 = result__h11713;
    3'h4: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d247 = result__h11741;
    3'h5: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d247 = result__h11769;
    3'h6: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d247 = result__h11797;
    3'h7: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d247 = result__h11825;
  endcase

  always @(rg_st_amo_val or ram_word64_set$DOB or rg_addr) case (rg_addr[2:0])
    3'h0: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d157 = {ram_word64_set$DOB[63:8], rg_st_amo_val[7:0]};
    3'h1: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d157 = {ram_word64_set$DOB[63:16], rg_st_amo_val[7:0], ram_word64_set$DOB[7:0]};
    3'h2: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d157 = {ram_word64_set$DOB[63:24], rg_st_amo_val[7:0], ram_word64_set$DOB[15:0]};
    3'h3: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d157 = {ram_word64_set$DOB[63:32], rg_st_amo_val[7:0], ram_word64_set$DOB[23:0]};
    3'h4: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d157 = {ram_word64_set$DOB[63:40], rg_st_amo_val[7:0], ram_word64_set$DOB[31:0]};
    3'h5: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d157 = {ram_word64_set$DOB[63:48], rg_st_amo_val[7:0], ram_word64_set$DOB[39:0]};
    3'h6: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d157 = {ram_word64_set$DOB[63:56], rg_st_amo_val[7:0], ram_word64_set$DOB[47:0]};
    3'h7: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d157 = {rg_st_amo_val[7:0], ram_word64_set$DOB[55:0]};
  endcase

  always @(result__h18325 or result__h18298 or result__h18271 or result__h18244 or rg_addr) case (rg_addr[2:0])
    3'h0: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d447 = result__h18244;
    3'h2: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d447 = result__h18271;
    3'h4: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d447 = result__h18298;
    3'h6: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d447 = result__h18325;
    default: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d447 = 64'h0000000000000000;
  endcase

  always @(result__h12320 or result__h12292 or result__h12264 or result__h12236 or rg_addr) case (rg_addr[2:0])
    3'h0: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d285 = result__h12236;
    3'h2: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d285 = result__h12264;
    3'h4: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d285 = result__h12292;
    3'h6: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d285 = result__h12320;
    default: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d285 = 64'h0000000000000000;
  endcase

  always @(result__h18204 or result__h18177 or result__h18150 or result__h18123 or rg_addr) case (rg_addr[2:0])
    3'h0: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d439 = result__h18123;
    3'h2: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d439 = result__h18150;
    3'h4: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d439 = result__h18177;
    3'h6: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d439 = result__h18204;
    default: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d439 = 64'h0000000000000000;
  endcase

  always @(result__h18079 or result__h18052 or result__h18025 or result__h17998 or result__h17971 or result__h17944 or result__h17917 or result__h17890 or rg_addr) case (rg_addr[2:0])
    3'h0: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d427 = result__h17890;
    3'h1: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d427 = result__h17917;
    3'h2: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d427 = result__h17944;
    3'h3: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d427 = result__h17971;
    3'h4: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d427 = result__h17998;
    3'h5: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d427 = result__h18025;
    3'h6: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d427 = result__h18052;
    3'h7: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d427 = result__h18079;
  endcase

  always @(result__h12066 or result__h12038 or result__h12010 or result__h11982 or result__h11954 or result__h11926 or result__h11898 or result__h11870 or rg_addr) case (rg_addr[2:0])
    3'h0: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d264 = result__h11870;
    3'h1: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d264 = result__h11898;
    3'h2: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d264 = result__h11926;
    3'h3: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d264 = result__h11954;
    3'h4: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d264 = result__h11982;
    3'h5: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d264 = result__h12010;
    3'h6: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d264 = result__h12038;
    3'h7: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d264 = result__h12066;
  endcase

  always @(result__h17846 or result__h17819 or result__h17792 or result__h17765 or result__h17738 or result__h17711 or result__h17684 or result__h17654 or rg_addr) case (rg_addr[2:0])
    3'h0: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d411 = result__h17654;
    3'h1: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d411 = result__h17684;
    3'h2: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d411 = result__h17711;
    3'h3: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d411 = result__h17738;
    3'h4: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d411 = result__h17765;
    3'h5: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d411 = result__h17792;
    3'h6: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d411 = result__h17819;
    3'h7: IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d411 = result__h17846;
  endcase

  always @(result__h18392 or result__h18365 or rg_addr) case (rg_addr[2:0])
    3'h0: CASE_rg_addr_BITS_2_TO_0_0x0_result8365_0x4_re_ETC__q29 = result__h18365;
    3'h4: CASE_rg_addr_BITS_2_TO_0_0x0_result8365_0x4_re_ETC__q29 = result__h18392;
    default: CASE_rg_addr_BITS_2_TO_0_0x0_result8365_0x4_re_ETC__q29 = 64'h0000000000000000;
  endcase

  always @(result__h18457 or result__h18430 or rg_addr) case (rg_addr[2:0])
    3'h0: CASE_rg_addr_BITS_2_TO_0_0x0_result8430_0x4_re_ETC__q30 = result__h18430;
    3'h4: CASE_rg_addr_BITS_2_TO_0_0x0_result8430_0x4_re_ETC__q30 = result__h18457;
    default: CASE_rg_addr_BITS_2_TO_0_0x0_result8430_0x4_re_ETC__q30 = 64'h0000000000000000;
  endcase

  always @(CASE_rg_addr_BITS_2_TO_0_0x0_result8430_0x4_re_ETC__q30 or IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d447 or IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d427 or master_xactor_f_rd_data$D_OUT or rg_addr or CASE_rg_addr_BITS_2_TO_0_0x0_result8365_0x4_re_ETC__q29 or IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d439 or IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d411 or rg_f3) case (rg_f3)
    3'h0: ld_val__h17594 = IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d411;
    3'h1: ld_val__h17594 = IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_SEXT_ETC___d439;
    3'h2: ld_val__h17594 = CASE_rg_addr_BITS_2_TO_0_0x0_result8365_0x4_re_ETC__q29;
    3'h3: ld_val__h17594 = ((rg_addr[2:0] == 3'h0) ? master_xactor_f_rd_data$D_OUT[66:3] : 64'h0000000000000000);
    3'h4: ld_val__h17594 = IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d427;
    3'h5: ld_val__h17594 = IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_0_CO_ETC___d447;
    3'h6: ld_val__h17594 = CASE_rg_addr_BITS_2_TO_0_0x0_result8430_0x4_re_ETC__q30;
    3'h7: ld_val__h17594 = 64'h0000000000000000;
  endcase

  always @(rg_st_amo_val or ram_word64_set$DOB or rg_addr) case (rg_addr[2:0])
    3'h0: CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q31 = {ram_word64_set$DOB[63:32], rg_st_amo_val[31:0]};
    3'h4: CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q31 = {rg_st_amo_val[31:0], ram_word64_set$DOB[31:0]};
    default: CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q31 = ram_word64_set$DOB;
  endcase

  always @(rg_st_amo_val or CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q31 or IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d167 or IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d157 or ram_word64_set$DOB or rg_f3) case (rg_f3)
    3'h0: IF_rg_f3_16_EQ_0b0_17_THEN_IF_rg_addr_6_BITS_2_ETC___d178 = IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d157;
    3'h1: IF_rg_f3_16_EQ_0b0_17_THEN_IF_rg_addr_6_BITS_2_ETC___d178 = IF_rg_addr_6_BITS_2_TO_0_4_EQ_0x0_18_THEN_ram__ETC___d167;
    3'h2: IF_rg_f3_16_EQ_0b0_17_THEN_IF_rg_addr_6_BITS_2_ETC___d178 = CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q31;
    3'h3: IF_rg_f3_16_EQ_0b0_17_THEN_IF_rg_addr_6_BITS_2_ETC___d178 = rg_st_amo_val;
    default: IF_rg_f3_16_EQ_0b0_17_THEN_IF_rg_addr_6_BITS_2_ETC___d178 = ram_word64_set$DOB;
  endcase

  always @(result__h12389 or result__h12361 or rg_addr) case (rg_addr[2:0])
    3'h0: CASE_rg_addr_BITS_2_TO_0_0x0_result2361_0x4_re_ETC__q32 = result__h12361;
    3'h4: CASE_rg_addr_BITS_2_TO_0_0x0_result2361_0x4_re_ETC__q32 = result__h12389;
    default: CASE_rg_addr_BITS_2_TO_0_0x0_result2361_0x4_re_ETC__q32 = 64'h0000000000000000;
  endcase

  always @(result__h12456 or result__h12428 or rg_addr) case (rg_addr[2:0])
    3'h0: CASE_rg_addr_BITS_2_TO_0_0x0_result2428_0x4_re_ETC__q33 = result__h12428;
    3'h4: CASE_rg_addr_BITS_2_TO_0_0x0_result2428_0x4_re_ETC__q33 = result__h12456;
    default: CASE_rg_addr_BITS_2_TO_0_0x0_result2428_0x4_re_ETC__q33 = 64'h0000000000000000;
  endcase

  always @(posedge CLK) begin
    if ((RST_N == 1'b0)) begin
      cfg_verbosity <= 4'h0;
      ctr_wr_rsps_pending_crg <= 4'h0;
      rg_cset_in_cache <= 7'h00;
      rg_lower_word32_full <= 1'b0;
      rg_state <= 4'h0;
    end
    else begin
      if (cfg_verbosity$EN) cfg_verbosity <= cfg_verbosity$D_IN;
      if (ctr_wr_rsps_pending_crg$EN) ctr_wr_rsps_pending_crg <= ctr_wr_rsps_pending_crg$D_IN;
      if (rg_cset_in_cache$EN) rg_cset_in_cache <= rg_cset_in_cache$D_IN;
      if (rg_lower_word32_full$EN) rg_lower_word32_full <= rg_lower_word32_full$D_IN;
      if (rg_state$EN) rg_state <= rg_state$D_IN;
    end
    if (rg_addr$EN) rg_addr <= rg_addr$D_IN;
    if (rg_error_during_refill$EN) rg_error_during_refill <= rg_error_during_refill$D_IN;
    if (rg_exc_code$EN) rg_exc_code <= rg_exc_code$D_IN;
    if (rg_f3$EN) rg_f3 <= rg_f3$D_IN;
    if (rg_ld_val$EN) rg_ld_val <= rg_ld_val$D_IN;
    if (rg_lower_word32$EN) rg_lower_word32 <= rg_lower_word32$D_IN;
    if (rg_op$EN) rg_op <= rg_op$D_IN;
    if (rg_pa$EN) rg_pa <= rg_pa$D_IN;
    if (rg_pte_pa$EN) rg_pte_pa <= rg_pte_pa$D_IN;
    if (rg_st_amo_val$EN) rg_st_amo_val <= rg_st_amo_val$D_IN;
    if (rg_word64_set_in_cache$EN) rg_word64_set_in_cache <= rg_word64_set_in_cache$D_IN;
  end

  always @(negedge CLK) begin
    #0;
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && (ctr_wr_rsps_pending_crg == 4'hf))) begin
      v__h2948 = $stime;
      #0;
    end
    v__h2942 = (v__h2948 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && (ctr_wr_rsps_pending_crg == 4'hf))) $display("%0d: ERROR: CreditCounter: overflow", v__h2942);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && (ctr_wr_rsps_pending_crg == 4'hf))) $finish(32'h00000001);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("            To fabric: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("AXI4_Wr_Addr { ", "awid: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "awaddr: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", mem_req_wr_addr_awaddr__h2473);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "awlen: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 8'h00);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "awsize: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", x__h2520);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "awburst: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 2'h1);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "awlock: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 1'b0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "awcache: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "awprot: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 3'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "awqos: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "awregion: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "awuser: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 1'b0, " }");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("\n");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("                       ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("AXI4_Wr_Data { ", "wdata: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", mem_req_wr_data_wdata__h2699);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "wstrb: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", mem_req_wr_data_wstrb__h2700);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "wlast: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("True");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "wuser: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 1'b0, " }");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_fabric_send_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("\n");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_reset && (rg_cset_in_cache == 7'h7f)) && (cfg_verbosity != 4'h0)) && (!f_reset_reqs$D_OUT))) begin
      v__h3848 = $stime;
      #0;
    end
    v__h3842 = (v__h3848 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_reset && (rg_cset_in_cache == 7'h7f)) && (cfg_verbosity != 4'h0)) && (!f_reset_reqs$D_OUT))) $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY", v__h3842, "I_MMU_Cache", 128, 1);
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_reset && (rg_cset_in_cache == 7'h7f)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && f_reset_reqs$D_OUT)) begin
      v__h3949 = $stime;
      #0;
    end
    v__h3943 = (v__h3949 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_reset && (rg_cset_in_cache == 7'h7f)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && f_reset_reqs$D_OUT)) $display("%0d: %s.rl_reset: Flushed", v__h3943, "I_MMU_Cache");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h4098 = $stime;
      #0;
    end
    v__h4092 = (v__h4098 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h", v__h4092, "I_MMU_Cache", rg_addr);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word64 0x%0h  Byte 0x%0h}", pa_ctag__h4952, rg_addr[11:5], rg_addr[4:3], rg_addr[2:0]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("        CSet 0x%0x: (state, tag):", rg_addr[11:5]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(" (");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && ram_state_and_ctag_cset$DOB[22])) $write("CTAG_CLEAN");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && (!ram_state_and_ctag_cset$DOB[22]))) $write("CTAG_EMPTY");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && ram_state_and_ctag_cset$DOB[22])) $write(", 0x%0x", ram_state_and_ctag_cset$DOB[21:0]);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && (!ram_state_and_ctag_cset$DOB[22]))) $write(", --");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(")");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("\n");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("        CSet 0x%0x, Word64 0x%0x: ", rg_addr[11:5], rg_addr[4:3]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(" 0x%0x", ram_word64_set$DOB);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("\n");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("    TLB result: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("VM_Xlate_Result { ", "outcome: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("VM_XLATE_OK");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "pa: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", rg_addr);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "exc_code: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'ha, " }");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_probe_and_immed_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("\n");
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_probe_and_immed_rsp && dmem_not_imem) && (!soc_map$m_is_mem_addr)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("    => IO_REQ");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && 1'b1) && rg_op_1_AND_ram_state_and_ctag_cset_b_read__5__ETC___d180)) $display("        Write-Cache-Hit: pa 0x%0h word64 0x%0h", rg_addr, rg_st_amo_val);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && 1'b1) && rg_op_1_AND_ram_state_and_ctag_cset_b_read__5__ETC___d180)) $write("        New Word64_Set:");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && 1'b1) && rg_op_1_AND_ram_state_and_ctag_cset_b_read__5__ETC___d180)) $write("        CSet 0x%0x, Word64 0x%0x: ", rg_addr[11:5], rg_addr[4:3]);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && 1'b1) && rg_op_1_AND_ram_state_and_ctag_cset_b_read__5__ETC___d180)) $write(" 0x%0x", IF_rg_f3_16_EQ_0b0_17_THEN_IF_rg_addr_6_BITS_2_ETC___d178);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && 1'b1) && rg_op_1_AND_ram_state_and_ctag_cset_b_read__5__ETC___d180)) $write("\n");
    if ((RST_N != 1'b0)) if (((((WILL_FIRE_RL_rl_probe_and_immed_rsp && 1'b1) && rg_op) && ((!ram_state_and_ctag_cset$DOB[22]) || (!ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d102))) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("        Write-Cache-Miss: pa 0x%0h word64 0x%0h", rg_addr, rg_st_amo_val);
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_probe_and_immed_rsp && 1'b1) && rg_op) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("        Write-Cache-Hit/Miss: eaddr 0x%0h word64 0x%0h", rg_addr, rg_st_amo_val);
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_probe_and_immed_rsp && 1'b1) && rg_op) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("        => rl_write_response");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && 1'b1) && NOT_rg_op_1_2_AND_ram_state_and_ctag_cset_b_re_ETC___d305)) begin
      v__h12540 = $stime;
      #0;
    end
    v__h12534 = (v__h12540 / 32'h0000000a);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && 1'b1) && NOT_rg_op_1_2_AND_ram_state_and_ctag_cset_b_re_ETC___d305)) $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h", v__h12534, "I_MMU_Cache", rg_addr, word64__h5094, 64'h0000000000000000);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_probe_and_immed_rsp && 1'b1) && NOT_rg_op_1_2_AND_ram_state_and_ctag_cset_b_re_ETC___d305)) $display("        Read-hit: addr 0x%0h word64 0x%0h", rg_addr, word64__h5094);
    if ((RST_N != 1'b0)) if (((((WILL_FIRE_RL_rl_probe_and_immed_rsp && 1'b1) && (!rg_op)) && ((!ram_state_and_ctag_cset$DOB[22]) || (!ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d102))) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("        Read Miss: -> CACHE_START_REFILL.");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h14531 = $stime;
      #0;
    end
    v__h14525 = (v__h14531 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("%0d: %s.rl_start_cache_refill: ", v__h14525, "I_MMU_Cache");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("    To fabric: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("AXI4_Rd_Addr { ", "arid: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "araddr: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", cline_fabric_addr__h14584);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arlen: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 8'h03);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arsize: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 3'h3);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arburst: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 2'h1);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arlock: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 1'b0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arcache: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arprot: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 3'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arqos: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arregion: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "aruser: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 1'b0, " }");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("\n");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_cache_refill && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("    Victim way %0d; => CACHE_REFILL", 1'b0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) begin
      v__h15336 = $stime;
      #0;
    end
    v__h15330 = (v__h15336 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $display("%0d: %s.rl_cache_refill_rsps_loop:", v__h15330, "I_MMU_Cache");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write("        ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write("AXI4_Rd_Data { ", "rid: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write("'h%h", master_xactor_f_rd_data$D_OUT[70:67]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write(", ", "rdata: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write("'h%h", master_xactor_f_rd_data$D_OUT[66:3]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write(", ", "rresp: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write(", ", "rlast: ");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331) && master_xactor_f_rd_data$D_OUT[0])) $write("True");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331) && (!master_xactor_f_rd_data$D_OUT[0]))) $write("False");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write(", ", "ruser: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write("'h%h", 1'b0, " }");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write("\n");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_cache_refill_rsps_loop && (master_xactor_f_rd_data$D_OUT[2:1] != 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h15578 = $stime;
      #0;
    end
    v__h15572 = (v__h15578 / 32'h0000000a);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_cache_refill_rsps_loop && (master_xactor_f_rd_data$D_OUT[2:1] != 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d", v__h15572, "I_MMU_Cache", access_exc_code__h2256);
    if ((RST_N != 1'b0)) if ((((WILL_FIRE_RL_rl_cache_refill_rsps_loop && (rg_word64_set_in_cache[1:0] == 2'h3)) && ((master_xactor_f_rd_data$D_OUT[2:1] != 2'h0) || rg_error_during_refill)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("    => MODULE_EXCEPTION_RSP");
    if ((RST_N != 1'b0)) if (((((WILL_FIRE_RL_rl_cache_refill_rsps_loop && (rg_word64_set_in_cache[1:0] == 2'h3)) && (master_xactor_f_rd_data$D_OUT[2:1] == 2'h0)) && (!rg_error_during_refill)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("    => CACHE_REREQ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $display("        Updating Cache word64_set 0x%0h, word64_in_cline %0d) old => new", rg_word64_set_in_cache, rg_word64_set_in_cache[1:0]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write("        CSet 0x%0x, Word64 0x%0x: ", rg_addr[11:5], rg_word64_set_in_cache[1:0]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write(" 0x%0x", ram_word64_set$DOB);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write("\n");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write("        CSet 0x%0x, Word64 0x%0x: ", rg_addr[11:5], rg_word64_set_in_cache[1:0]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write(" 0x%0x", master_xactor_f_rd_data$D_OUT[66:3]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_cache_refill_rsps_loop && NOT_cfg_verbosity_read__0_ULE_2_30___d331)) $write("\n");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_rereq && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]", rg_addr[11:5], rg_addr[11:3]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h17191 = $stime;
      #0;
    end
    v__h17185 = (v__h17191 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h", v__h17185, "I_MMU_Cache", rg_f3, rg_addr, rg_pa);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("            To fabric: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("AXI4_Rd_Addr { ", "arid: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "araddr: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", fabric_addr__h17243);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arlen: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 8'h00);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arsize: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", value__h17372);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arburst: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 2'h1);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arlock: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 1'b0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arcache: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arprot: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 3'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arqos: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "arregion: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 4'h0);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "aruser: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 1'b0, " }");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("\n");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h17485 = $stime;
      #0;
    end
    v__h17479 = (v__h17485 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h", v__h17479, "I_MMU_Cache", rg_addr, rg_pa);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("    ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("AXI4_Rd_Data { ", "rid: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", master_xactor_f_rd_data$D_OUT[70:67]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "rdata: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", master_xactor_f_rd_data$D_OUT[66:3]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "rresp: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "rlast: ");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && master_xactor_f_rd_data$D_OUT[0])) $write("True");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && (!master_xactor_f_rd_data$D_OUT[0]))) $write("False");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "ruser: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 1'b0, " }");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("\n");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_io_read_rsp && (master_xactor_f_rd_data$D_OUT[2:1] == 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h18585 = $stime;
      #0;
    end
    v__h18579 = (v__h18585 / 32'h0000000a);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_io_read_rsp && (master_xactor_f_rd_data$D_OUT[2:1] == 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h", v__h18579, "I_MMU_Cache", rg_addr, ld_val__h17594);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_io_read_rsp && (master_xactor_f_rd_data$D_OUT[2:1] != 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h18692 = $stime;
      #0;
    end
    v__h18686 = (v__h18692 / 32'h0000000a);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_io_read_rsp && (master_xactor_f_rd_data$D_OUT[2:1] != 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT", v__h18686, "I_MMU_Cache");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_maintain_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h18797 = $stime;
      #0;
    end
    v__h18791 = (v__h18797 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_maintain_io_read_rsp && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h", v__h18791, "I_MMU_Cache", rg_addr, rg_ld_val);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h18877 = $stime;
      #0;
    end
    v__h18871 = (v__h18877 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h", v__h18871, "I_MMU_Cache", rg_f3, rg_addr, rg_pa, rg_st_amo_val);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_io_write_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("    => rl_ST_AMO_response");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] == 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h19505 = $stime;
      #0;
    end
    v__h19499 = (v__h19505 / 32'h0000000a);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] == 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("%0d: %s.rl_discard_write_rsp: pending %0d ", v__h19499, "I_MMU_Cache", b__h14485);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] == 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("AXI4_Wr_Resp { ", "bid: ");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] == 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", master_xactor_f_wr_resp$D_OUT[5:2]);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] == 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "bresp: ");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] == 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", master_xactor_f_wr_resp$D_OUT[1:0]);
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] == 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(", ", "buser: ");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] == 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("'h%h", 1'b0, " }");
    if ((RST_N != 1'b0)) if (((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] == 2'h0)) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("\n");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] != 2'h0))) begin
      v__h19466 = $stime;
      #0;
    end
    v__h19460 = (v__h19466 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] != 2'h0))) $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit", v__h19460, "I_MMU_Cache");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] != 2'h0))) $write("    ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] != 2'h0))) $write("AXI4_Wr_Resp { ", "bid: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] != 2'h0))) $write("'h%h", master_xactor_f_wr_resp$D_OUT[5:2]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] != 2'h0))) $write(", ", "bresp: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] != 2'h0))) $write("'h%h", master_xactor_f_wr_resp$D_OUT[1:0]);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] != 2'h0))) $write(", ", "buser: ");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] != 2'h0))) $write("'h%h", 1'b0, " }");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_discard_write_rsp && (master_xactor_f_wr_resp$D_OUT[1:0] != 2'h0))) $write("\n");
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_reset && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h3483 = $stime;
      #0;
    end
    v__h3477 = (v__h3483 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((WILL_FIRE_RL_rl_start_reset && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("%0d: %s.rl_start_reset", v__h3477, "I_MMU_Cache");
    if ((RST_N != 1'b0)) if ((EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) begin
      v__h19852 = $stime;
      #0;
    end
    v__h19846 = (v__h19852 / 32'h0000000a);
    if ((RST_N != 1'b0)) if ((EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("%0d: %m.req: op:", v__h19846);
    if ((RST_N != 1'b0)) if (((EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && req_op)) $write("CACHE_ST");
    if ((RST_N != 1'b0)) if (((EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && (!req_op))) $write("CACHE_LD");
    if ((RST_N != 1'b0)) if ((EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(" f3:%0d addr:0x%0h st_value:0x%0h", req_f3, req_addr, req_st_value, "\n");
    if ((RST_N != 1'b0)) if ((EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write("    priv:");
    if ((RST_N != 1'b0)) if (((EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && (req_priv == 2'h0))) $write("U");
    if ((RST_N != 1'b0)) if (((EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && (req_priv == 2'h1))) $write("S");
    if ((RST_N != 1'b0)) if (((EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && (req_priv == 2'h3))) $write("M");
    if ((RST_N != 1'b0)) if (((((EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42) && (req_priv != 2'h0)) && (req_priv != 2'h1)) && (req_priv != 2'h3))) $write("RESERVED");
    if ((RST_N != 1'b0)) if ((EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h", req_sstatus_SUM, req_mstatus_MXR, req_satp, "\n");
    if ((RST_N != 1'b0)) if (((EN_req && req_f3_BITS_1_TO_0_18_EQ_0b0_19_OR_req_f3_BITS_ETC___d548) && NOT_cfg_verbosity_read__0_ULE_1_1___d42)) $display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]", req_addr[11:5], req_addr[11:3]);
  end

  \FIFO2[wrapper.RTL.near_mem.icache.f_fabric_write_reqs]  f_fabric_write_reqs(CLK, RST_N, f_fabric_write_reqs$D_IN, f_fabric_write_reqs$ENQ, f_fabric_write_reqs$FULL_N, f_fabric_write_reqs$D_OUT, f_fabric_write_reqs$DEQ, f_fabric_write_reqs$EMPTY_N, f_fabric_write_reqs$CLR, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */);

  \FIFO2[wrapper.RTL.near_mem.icache.f_reset_reqs]  f_reset_reqs(CLK, RST_N, f_reset_reqs$D_IN, f_reset_reqs$ENQ, f_reset_reqs$FULL_N, f_reset_reqs$D_OUT, f_reset_reqs$DEQ, f_reset_reqs$EMPTY_N, f_reset_reqs$CLR, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, /* Empty */);

  \FIFO2[wrapper.RTL.near_mem.icache.f_reset_rsps]  f_reset_rsps(CLK, RST_N, f_reset_rsps$D_IN, f_reset_rsps$ENQ, f_reset_rsps$FULL_N, f_reset_rsps$D_OUT, f_reset_rsps$DEQ, f_reset_rsps$EMPTY_N, f_reset_rsps$CLR, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */);

  \FIFO2[wrapper.RTL.near_mem.icache.master_xactor_f_rd_addr]  master_xactor_f_rd_addr(CLK, RST_N, master_xactor_f_rd_addr$D_IN, master_xactor_f_rd_addr$ENQ, master_xactor_f_rd_addr$FULL_N, master_xactor_f_rd_addr$D_OUT, master_xactor_f_rd_addr$DEQ, master_xactor_f_rd_addr$EMPTY_N, master_xactor_f_rd_addr$CLR, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */);

  \FIFO2[wrapper.RTL.near_mem.icache.master_xactor_f_rd_data]  master_xactor_f_rd_data(CLK, RST_N, master_xactor_f_rd_data$D_IN, master_xactor_f_rd_data$ENQ, master_xactor_f_rd_data$FULL_N, master_xactor_f_rd_data$D_OUT, master_xactor_f_rd_data$DEQ, master_xactor_f_rd_data$EMPTY_N, master_xactor_f_rd_data$CLR, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */);

  \FIFO2[wrapper.RTL.near_mem.icache.master_xactor_f_wr_addr]  master_xactor_f_wr_addr(CLK, RST_N, master_xactor_f_wr_addr$D_IN, master_xactor_f_wr_addr$ENQ, master_xactor_f_wr_addr$FULL_N, master_xactor_f_wr_addr$D_OUT, master_xactor_f_wr_addr$DEQ, master_xactor_f_wr_addr$EMPTY_N, master_xactor_f_wr_addr$CLR, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */);

  \FIFO2[wrapper.RTL.near_mem.icache.master_xactor_f_wr_data]  master_xactor_f_wr_data(CLK, RST_N, master_xactor_f_wr_data$D_IN, master_xactor_f_wr_data$ENQ, master_xactor_f_wr_data$FULL_N, master_xactor_f_wr_data$D_OUT, master_xactor_f_wr_data$DEQ, master_xactor_f_wr_data$EMPTY_N, master_xactor_f_wr_data$CLR, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */);

  \FIFO2[wrapper.RTL.near_mem.icache.master_xactor_f_wr_resp]  master_xactor_f_wr_resp(CLK, RST_N, master_xactor_f_wr_resp$D_IN, master_xactor_f_wr_resp$ENQ, master_xactor_f_wr_resp$FULL_N, master_xactor_f_wr_resp$D_OUT, master_xactor_f_wr_resp$DEQ, master_xactor_f_wr_resp$EMPTY_N, master_xactor_f_wr_resp$CLR, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, /* Empty */, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */);

  \BRAM2[wrapper.RTL.near_mem.icache.ram_state_and_ctag_cset]  ram_state_and_ctag_cset(CLK, ram_state_and_ctag_cset$ENA, ram_state_and_ctag_cset$WEA, ram_state_and_ctag_cset$ADDRA, ram_state_and_ctag_cset$DIA, /* Empty */, CLK, ram_state_and_ctag_cset$ENB, ram_state_and_ctag_cset$WEB, ram_state_and_ctag_cset$ADDRB, ram_state_and_ctag_cset$DIB, ram_state_and_ctag_cset$DOB);

  \BRAM2[wrapper.RTL.near_mem.icache.ram_word64_set]  ram_word64_set(CLK, ram_word64_set$ENA, ram_word64_set$WEA, ram_word64_set$ADDRA, ram_word64_set$DIA, /* Empty */, CLK, ram_word64_set$ENB, ram_word64_set$WEB, ram_word64_set$ADDRB, ram_word64_set$DIB, ram_word64_set$DOB);

  mkSoC_Map soc_map(CLK, RST_N, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, /* Empty */, soc_map$m_is_mem_addr_addr, soc_map$m_is_mem_addr, soc_map$m_is_IO_addr_addr, /* Empty */, soc_map$m_is_near_mem_IO_addr_addr, /* Empty */, /* Empty */, /* Empty */, /* Empty */);
endmodule  /* \mkMMU_Cache[wrapper.RTL.near_mem.icache]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3795. */
module \FIFO2[wrapper.RTL.near_mem.dcache.f_fabric_write_reqs] (CLK, RST, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input [98:0] D_IN;
  input ENQ;
  output FULL_N;
  output [98:0] D_OUT;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;
  parameter width = 32'h00000063;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire [98:0] D_IN;
  wire [98:0] D_OUT;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire d0d1;
  wire d0di;
  wire d0h;
  wire d1di;
  reg [98:0] data0_reg;
  reg [98:0] data1_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign D_OUT = data0_reg;
  assign d0di = ((ENQ & (~|empty_reg)) | ((ENQ & DEQ) & full_reg));
  assign d0d1 = (DEQ & (~|full_reg));
  assign d0h = ((((~|DEQ) & (~|ENQ)) | ((~|DEQ) & empty_reg)) | ((~|ENQ) & full_reg));
  assign d1di = (ENQ & empty_reg);
  assign RTL__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if ((DEQ && (!ENQ))) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin
    data0_reg <= ((({99{d0di}} & D_IN) | ({99{d0d1}} & data1_reg)) | ({99{d0h}} & data0_reg));
    data1_reg <= (d1di ? D_IN : data1_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO2: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO2: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO2[wrapper.RTL.near_mem.dcache.f_fabric_write_reqs]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3795. */
module \FIFO2[wrapper.RTL.near_mem.dcache.f_reset_reqs] (CLK, RST, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input D_IN;
  input ENQ;
  output FULL_N;
  output D_OUT;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;
  parameter width = 32'h00000001;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire D_IN;
  wire D_OUT;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire d0d1;
  wire d0di;
  wire d0h;
  wire d1di;
  reg data0_reg;
  reg data1_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign D_OUT = data0_reg;
  assign d0di = ((ENQ & (~|empty_reg)) | ((ENQ & DEQ) & full_reg));
  assign d0d1 = (DEQ & (~|full_reg));
  assign d0h = ((((~|DEQ) & (~|ENQ)) | ((~|DEQ) & empty_reg)) | ((~|ENQ) & full_reg));
  assign d1di = (ENQ & empty_reg);
  assign RTL__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if ((DEQ && (!ENQ))) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin
    data0_reg <= ((({d0di} & D_IN) | ({d0d1} & data1_reg)) | ({d0h} & data0_reg));
    data1_reg <= (d1di ? D_IN : data1_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO2: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO2: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO2[wrapper.RTL.near_mem.dcache.f_reset_reqs]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3795. */
module \FIFO2[wrapper.RTL.near_mem.dcache.f_reset_rsps] (CLK, RST, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input D_IN;
  input ENQ;
  output FULL_N;
  output D_OUT;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;
  parameter width = 32'h00000001;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire D_IN;
  wire D_OUT;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire d0d1;
  wire d0di;
  wire d0h;
  wire d1di;
  reg data0_reg;
  reg data1_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign D_OUT = data0_reg;
  assign d0di = ((ENQ & (~|empty_reg)) | ((ENQ & DEQ) & full_reg));
  assign d0d1 = (DEQ & (~|full_reg));
  assign d0h = ((((~|DEQ) & (~|ENQ)) | ((~|DEQ) & empty_reg)) | ((~|ENQ) & full_reg));
  assign d1di = (ENQ & empty_reg);
  assign RTL__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if ((DEQ && (!ENQ))) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin
    data0_reg <= ((({d0di} & D_IN) | ({d0d1} & data1_reg)) | ({d0h} & data0_reg));
    data1_reg <= (d1di ? D_IN : data1_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO2: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO2: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO2[wrapper.RTL.near_mem.dcache.f_reset_rsps]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3795. */
module \FIFO2[wrapper.RTL.near_mem.dcache.master_xactor_f_rd_addr] (CLK, RST, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input [96:0] D_IN;
  input ENQ;
  output FULL_N;
  output [96:0] D_OUT;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;
  parameter width = 32'h00000061;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire [96:0] D_IN;
  wire [96:0] D_OUT;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire d0d1;
  wire d0di;
  wire d0h;
  wire d1di;
  reg [96:0] data0_reg;
  reg [96:0] data1_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign D_OUT = data0_reg;
  assign d0di = ((ENQ & (~|empty_reg)) | ((ENQ & DEQ) & full_reg));
  assign d0d1 = (DEQ & (~|full_reg));
  assign d0h = ((((~|DEQ) & (~|ENQ)) | ((~|DEQ) & empty_reg)) | ((~|ENQ) & full_reg));
  assign d1di = (ENQ & empty_reg);
  assign RTL__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if ((DEQ && (!ENQ))) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin
    data0_reg <= ((({97{d0di}} & D_IN) | ({97{d0d1}} & data1_reg)) | ({97{d0h}} & data0_reg));
    data1_reg <= (d1di ? D_IN : data1_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO2: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO2: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO2[wrapper.RTL.near_mem.dcache.master_xactor_f_rd_addr]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3795. */
module \FIFO2[wrapper.RTL.near_mem.dcache.master_xactor_f_rd_data] (CLK, RST, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input [70:0] D_IN;
  input ENQ;
  output FULL_N;
  output [70:0] D_OUT;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;
  parameter width = 32'h00000047;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire [70:0] D_IN;
  wire [70:0] D_OUT;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire d0d1;
  wire d0di;
  wire d0h;
  wire d1di;
  reg [70:0] data0_reg;
  reg [70:0] data1_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign D_OUT = data0_reg;
  assign d0di = ((ENQ & (~|empty_reg)) | ((ENQ & DEQ) & full_reg));
  assign d0d1 = (DEQ & (~|full_reg));
  assign d0h = ((((~|DEQ) & (~|ENQ)) | ((~|DEQ) & empty_reg)) | ((~|ENQ) & full_reg));
  assign d1di = (ENQ & empty_reg);
  assign RTL__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if ((DEQ && (!ENQ))) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin
    data0_reg <= ((({71{d0di}} & D_IN) | ({71{d0d1}} & data1_reg)) | ({71{d0h}} & data0_reg));
    data1_reg <= (d1di ? D_IN : data1_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO2: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO2: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO2[wrapper.RTL.near_mem.dcache.master_xactor_f_rd_data]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3795. */
module \FIFO2[wrapper.RTL.near_mem.dcache.master_xactor_f_wr_addr] (CLK, RST, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input [96:0] D_IN;
  input ENQ;
  output FULL_N;
  output [96:0] D_OUT;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;
  parameter width = 32'h00000061;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire [96:0] D_IN;
  wire [96:0] D_OUT;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire d0d1;
  wire d0di;
  wire d0h;
  wire d1di;
  reg [96:0] data0_reg;
  reg [96:0] data1_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign D_OUT = data0_reg;
  assign d0di = ((ENQ & (~|empty_reg)) | ((ENQ & DEQ) & full_reg));
  assign d0d1 = (DEQ & (~|full_reg));
  assign d0h = ((((~|DEQ) & (~|ENQ)) | ((~|DEQ) & empty_reg)) | ((~|ENQ) & full_reg));
  assign d1di = (ENQ & empty_reg);
  assign RTL__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if ((DEQ && (!ENQ))) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin
    data0_reg <= ((({97{d0di}} & D_IN) | ({97{d0d1}} & data1_reg)) | ({97{d0h}} & data0_reg));
    data1_reg <= (d1di ? D_IN : data1_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO2: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO2: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO2[wrapper.RTL.near_mem.dcache.master_xactor_f_wr_addr]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3795. */
module \FIFO2[wrapper.RTL.near_mem.dcache.master_xactor_f_wr_data] (CLK, RST, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input [72:0] D_IN;
  input ENQ;
  output FULL_N;
  output [72:0] D_OUT;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;
  parameter width = 32'h00000049;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire [72:0] D_IN;
  wire [72:0] D_OUT;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire d0d1;
  wire d0di;
  wire d0h;
  wire d1di;
  reg [72:0] data0_reg;
  reg [72:0] data1_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign D_OUT = data0_reg;
  assign d0di = ((ENQ & (~|empty_reg)) | ((ENQ & DEQ) & full_reg));
  assign d0d1 = (DEQ & (~|full_reg));
  assign d0h = ((((~|DEQ) & (~|ENQ)) | ((~|DEQ) & empty_reg)) | ((~|ENQ) & full_reg));
  assign d1di = (ENQ & empty_reg);
  assign RTL__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if ((DEQ && (!ENQ))) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin
    data0_reg <= ((({73{d0di}} & D_IN) | ({73{d0d1}} & data1_reg)) | ({73{d0h}} & data0_reg));
    data1_reg <= (d1di ? D_IN : data1_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO2: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO2: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO2[wrapper.RTL.near_mem.dcache.master_xactor_f_wr_data]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3795. */
module \FIFO2[wrapper.RTL.near_mem.dcache.master_xactor_f_wr_resp] (CLK, RST, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input [5:0] D_IN;
  input ENQ;
  output FULL_N;
  output [5:0] D_OUT;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;
  parameter width = 32'h00000006;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire [5:0] D_IN;
  wire [5:0] D_OUT;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire d0d1;
  wire d0di;
  wire d0h;
  wire d1di;
  reg [5:0] data0_reg;
  reg [5:0] data1_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign D_OUT = data0_reg;
  assign d0di = ((ENQ & (~|empty_reg)) | ((ENQ & DEQ) & full_reg));
  assign d0d1 = (DEQ & (~|full_reg));
  assign d0h = ((((~|DEQ) & (~|ENQ)) | ((~|DEQ) & empty_reg)) | ((~|ENQ) & full_reg));
  assign d1di = (ENQ & empty_reg);
  assign RTL__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if ((DEQ && (!ENQ))) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin
    data0_reg <= ((({6{d0di}} & D_IN) | ({6{d0d1}} & data1_reg)) | ({6{d0h}} & data0_reg));
    data1_reg <= (d1di ? D_IN : data1_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO2: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO2: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO2[wrapper.RTL.near_mem.dcache.master_xactor_f_wr_resp]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 12510. */
module \BRAM2[wrapper.RTL.near_mem.dcache.ram_state_and_ctag_cset] (CLKA, ENA, WEA, ADDRA, DIA, DOA, CLKB, ENB, WEB, ADDRB, DIB, DOB);
  input CLKA;
  input ENA;
  input WEA;
  input [6:0] ADDRA;
  input [22:0] DIA;
  output [22:0] DOA;
  input CLKB;
  input ENB;
  input WEB;
  input [6:0] ADDRB;
  input [22:0] DIB;
  output [22:0] DOB;

  parameter ADDR_WIDTH = 32'h00000007;
  parameter DATA_WIDTH = 32'h00000017;
  parameter MEMSIZE = 8'h80;
  parameter PIPELINED = 1'b0;

  wire [6:0] ADDRA;
  wire [6:0] ADDRB;
  wire CLKA;
  wire CLKB;
  wire [22:0] DIA;
  wire [22:0] DIB;
  wire [22:0] DOA;
  reg [22:0] DOA_R;
  reg [22:0] DOA_R2;
  wire [22:0] DOB;
  reg [22:0] DOB_R;
  reg [22:0] DOB_R2;
  wire ENA;
  wire ENB;
  wire WEA;
  wire WEB;
  wire [22:0] arb1;
  wire [22:0] arb2;


  assign DOA = DOA_R;
  assign DOB = DOB_R;

  always @(posedge CLKA) begin
    if (ENA) if (WEA) DOA_R <= DIA;
    else DOA_R <= arb1;
    DOA_R2 <= DOA_R;
  end

  always @(posedge CLKA) begin
    if (ENB) if (WEB) DOB_R <= DIB;
    else DOB_R <= arb2;
    DOB_R2 <= DOB_R;
  end
endmodule  /* \BRAM2[wrapper.RTL.near_mem.dcache.ram_state_and_ctag_cset]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 12510. */
module \BRAM2[wrapper.RTL.near_mem.dcache.ram_word64_set] (CLKA, ENA, WEA, ADDRA, DIA, DOA, CLKB, ENB, WEB, ADDRB, DIB, DOB);
  input CLKA;
  input ENA;
  input WEA;
  input [8:0] ADDRA;
  input [63:0] DIA;
  output [63:0] DOA;
  input CLKB;
  input ENB;
  input WEB;
  input [8:0] ADDRB;
  input [63:0] DIB;
  output [63:0] DOB;

  parameter ADDR_WIDTH = 32'h00000009;
  parameter DATA_WIDTH = 32'h00000040;
  parameter MEMSIZE = 10'h200;
  parameter PIPELINED = 1'b0;

  wire [8:0] ADDRA;
  wire [8:0] ADDRB;
  wire CLKA;
  wire CLKB;
  wire [63:0] DIA;
  wire [63:0] DIB;
  wire [63:0] DOA;
  reg [63:0] DOA_R;
  reg [63:0] DOA_R2;
  wire [63:0] DOB;
  reg [63:0] DOB_R;
  reg [63:0] DOB_R2;
  wire ENA;
  wire ENB;
  wire WEA;
  wire WEB;
  wire [63:0] arb1;
  wire [63:0] arb2;


  assign DOA = DOA_R;
  assign DOB = DOB_R;

  always @(posedge CLKA) begin
    if (ENA) if (WEA) DOA_R <= DIA;
    else DOA_R <= arb1;
    DOA_R2 <= DOA_R;
  end

  always @(posedge CLKA) begin
    if (ENB) if (WEB) DOB_R <= DIB;
    else DOB_R <= arb2;
    DOB_R2 <= DOB_R;
  end
endmodule  /* \BRAM2[wrapper.RTL.near_mem.dcache.ram_word64_set]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3795. */
module \FIFO2[wrapper.RTL.near_mem.icache.f_fabric_write_reqs] (CLK, RST, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input [98:0] D_IN;
  input ENQ;
  output FULL_N;
  output [98:0] D_OUT;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;
  parameter width = 32'h00000063;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire [98:0] D_IN;
  wire [98:0] D_OUT;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire d0d1;
  wire d0di;
  wire d0h;
  wire d1di;
  reg [98:0] data0_reg;
  reg [98:0] data1_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign D_OUT = data0_reg;
  assign d0di = ((ENQ & (~|empty_reg)) | ((ENQ & DEQ) & full_reg));
  assign d0d1 = (DEQ & (~|full_reg));
  assign d0h = ((((~|DEQ) & (~|ENQ)) | ((~|DEQ) & empty_reg)) | ((~|ENQ) & full_reg));
  assign d1di = (ENQ & empty_reg);
  assign RTL__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if ((DEQ && (!ENQ))) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin
    data0_reg <= ((({99{d0di}} & D_IN) | ({99{d0d1}} & data1_reg)) | ({99{d0h}} & data0_reg));
    data1_reg <= (d1di ? D_IN : data1_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO2: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO2: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO2[wrapper.RTL.near_mem.icache.f_fabric_write_reqs]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3795. */
module \FIFO2[wrapper.RTL.near_mem.icache.f_reset_reqs] (CLK, RST, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input D_IN;
  input ENQ;
  output FULL_N;
  output D_OUT;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;
  parameter width = 32'h00000001;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire D_IN;
  wire D_OUT;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire d0d1;
  wire d0di;
  wire d0h;
  wire d1di;
  reg data0_reg;
  reg data1_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign D_OUT = data0_reg;
  assign d0di = ((ENQ & (~|empty_reg)) | ((ENQ & DEQ) & full_reg));
  assign d0d1 = (DEQ & (~|full_reg));
  assign d0h = ((((~|DEQ) & (~|ENQ)) | ((~|DEQ) & empty_reg)) | ((~|ENQ) & full_reg));
  assign d1di = (ENQ & empty_reg);
  assign RTL__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if ((DEQ && (!ENQ))) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin
    data0_reg <= ((({d0di} & D_IN) | ({d0d1} & data1_reg)) | ({d0h} & data0_reg));
    data1_reg <= (d1di ? D_IN : data1_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO2: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO2: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO2[wrapper.RTL.near_mem.icache.f_reset_reqs]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3795. */
module \FIFO2[wrapper.RTL.near_mem.icache.f_reset_rsps] (CLK, RST, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input D_IN;
  input ENQ;
  output FULL_N;
  output D_OUT;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;
  parameter width = 32'h00000001;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire D_IN;
  wire D_OUT;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire d0d1;
  wire d0di;
  wire d0h;
  wire d1di;
  reg data0_reg;
  reg data1_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign D_OUT = data0_reg;
  assign d0di = ((ENQ & (~|empty_reg)) | ((ENQ & DEQ) & full_reg));
  assign d0d1 = (DEQ & (~|full_reg));
  assign d0h = ((((~|DEQ) & (~|ENQ)) | ((~|DEQ) & empty_reg)) | ((~|ENQ) & full_reg));
  assign d1di = (ENQ & empty_reg);
  assign RTL__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if ((DEQ && (!ENQ))) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin
    data0_reg <= ((({d0di} & D_IN) | ({d0d1} & data1_reg)) | ({d0h} & data0_reg));
    data1_reg <= (d1di ? D_IN : data1_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO2: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO2: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO2[wrapper.RTL.near_mem.icache.f_reset_rsps]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3795. */
module \FIFO2[wrapper.RTL.near_mem.icache.master_xactor_f_rd_addr] (CLK, RST, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input [96:0] D_IN;
  input ENQ;
  output FULL_N;
  output [96:0] D_OUT;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;
  parameter width = 32'h00000061;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire [96:0] D_IN;
  wire [96:0] D_OUT;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire d0d1;
  wire d0di;
  wire d0h;
  wire d1di;
  reg [96:0] data0_reg;
  reg [96:0] data1_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign D_OUT = data0_reg;
  assign d0di = ((ENQ & (~|empty_reg)) | ((ENQ & DEQ) & full_reg));
  assign d0d1 = (DEQ & (~|full_reg));
  assign d0h = ((((~|DEQ) & (~|ENQ)) | ((~|DEQ) & empty_reg)) | ((~|ENQ) & full_reg));
  assign d1di = (ENQ & empty_reg);
  assign RTL__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if ((DEQ && (!ENQ))) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin
    data0_reg <= ((({97{d0di}} & D_IN) | ({97{d0d1}} & data1_reg)) | ({97{d0h}} & data0_reg));
    data1_reg <= (d1di ? D_IN : data1_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO2: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO2: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO2[wrapper.RTL.near_mem.icache.master_xactor_f_rd_addr]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3795. */
module \FIFO2[wrapper.RTL.near_mem.icache.master_xactor_f_rd_data] (CLK, RST, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input [70:0] D_IN;
  input ENQ;
  output FULL_N;
  output [70:0] D_OUT;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;
  parameter width = 32'h00000047;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire [70:0] D_IN;
  wire [70:0] D_OUT;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire d0d1;
  wire d0di;
  wire d0h;
  wire d1di;
  reg [70:0] data0_reg;
  reg [70:0] data1_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign D_OUT = data0_reg;
  assign d0di = ((ENQ & (~|empty_reg)) | ((ENQ & DEQ) & full_reg));
  assign d0d1 = (DEQ & (~|full_reg));
  assign d0h = ((((~|DEQ) & (~|ENQ)) | ((~|DEQ) & empty_reg)) | ((~|ENQ) & full_reg));
  assign d1di = (ENQ & empty_reg);
  assign RTL__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if ((DEQ && (!ENQ))) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin
    data0_reg <= ((({71{d0di}} & D_IN) | ({71{d0d1}} & data1_reg)) | ({71{d0h}} & data0_reg));
    data1_reg <= (d1di ? D_IN : data1_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO2: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO2: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO2[wrapper.RTL.near_mem.icache.master_xactor_f_rd_data]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3795. */
module \FIFO2[wrapper.RTL.near_mem.icache.master_xactor_f_wr_addr] (CLK, RST, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input [96:0] D_IN;
  input ENQ;
  output FULL_N;
  output [96:0] D_OUT;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;
  parameter width = 32'h00000061;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire [96:0] D_IN;
  wire [96:0] D_OUT;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire d0d1;
  wire d0di;
  wire d0h;
  wire d1di;
  reg [96:0] data0_reg;
  reg [96:0] data1_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign D_OUT = data0_reg;
  assign d0di = ((ENQ & (~|empty_reg)) | ((ENQ & DEQ) & full_reg));
  assign d0d1 = (DEQ & (~|full_reg));
  assign d0h = ((((~|DEQ) & (~|ENQ)) | ((~|DEQ) & empty_reg)) | ((~|ENQ) & full_reg));
  assign d1di = (ENQ & empty_reg);
  assign RTL__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if ((DEQ && (!ENQ))) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin
    data0_reg <= ((({97{d0di}} & D_IN) | ({97{d0d1}} & data1_reg)) | ({97{d0h}} & data0_reg));
    data1_reg <= (d1di ? D_IN : data1_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO2: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO2: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO2[wrapper.RTL.near_mem.icache.master_xactor_f_wr_addr]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3795. */
module \FIFO2[wrapper.RTL.near_mem.icache.master_xactor_f_wr_data] (CLK, RST, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input [72:0] D_IN;
  input ENQ;
  output FULL_N;
  output [72:0] D_OUT;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;
  parameter width = 32'h00000049;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire [72:0] D_IN;
  wire [72:0] D_OUT;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire d0d1;
  wire d0di;
  wire d0h;
  wire d1di;
  reg [72:0] data0_reg;
  reg [72:0] data1_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign D_OUT = data0_reg;
  assign d0di = ((ENQ & (~|empty_reg)) | ((ENQ & DEQ) & full_reg));
  assign d0d1 = (DEQ & (~|full_reg));
  assign d0h = ((((~|DEQ) & (~|ENQ)) | ((~|DEQ) & empty_reg)) | ((~|ENQ) & full_reg));
  assign d1di = (ENQ & empty_reg);
  assign RTL__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if ((DEQ && (!ENQ))) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin
    data0_reg <= ((({73{d0di}} & D_IN) | ({73{d0d1}} & data1_reg)) | ({73{d0h}} & data0_reg));
    data1_reg <= (d1di ? D_IN : data1_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO2: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO2: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO2[wrapper.RTL.near_mem.icache.master_xactor_f_wr_data]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 3795. */
module \FIFO2[wrapper.RTL.near_mem.icache.master_xactor_f_wr_resp] (CLK, RST, D_IN, ENQ, FULL_N, D_OUT, DEQ, EMPTY_N, CLR, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg, RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg, RTL__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__f_reset_rsps__DOT__empty_reg, RTL__DOT__f_reset_reqs__DOT__empty_reg, RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg, RTL__DOT__f_reset_rsps__DOT__full_reg);
  input CLK;
  input RST;
  input [5:0] D_IN;
  input ENQ;
  output FULL_N;
  output [5:0] D_OUT;
  input DEQ;
  output EMPTY_N;
  input CLR;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  output RTL__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__f_reset_rsps__DOT__empty_reg;
  output RTL__DOT__f_reset_reqs__DOT__empty_reg;
  output RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  output RTL__DOT__f_reset_rsps__DOT__full_reg;

  parameter guarded = 32'h00000001;
  parameter width = 32'h00000006;

  wire CLK;
  wire CLR;
  wire DEQ;
  wire [5:0] D_IN;
  wire [5:0] D_OUT;
  wire EMPTY_N;
  wire ENQ;
  wire FULL_N;
  wire RST;
  wire RTL__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg;
  wire RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg;
  wire d0d1;
  wire d0di;
  wire d0h;
  wire d1di;
  reg [5:0] data0_reg;
  reg [5:0] data1_reg;
  reg empty_reg;
  reg full_reg;


  assign FULL_N = full_reg;
  assign EMPTY_N = empty_reg;
  assign D_OUT = data0_reg;
  assign d0di = ((ENQ & (~|empty_reg)) | ((ENQ & DEQ) & full_reg));
  assign d0d1 = (DEQ & (~|full_reg));
  assign d0h = ((((~|DEQ) & (~|ENQ)) | ((~|DEQ) & empty_reg)) | ((~|ENQ) & full_reg));
  assign d1di = (ENQ & empty_reg);
  assign RTL__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_resp__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_addr__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_wr_data__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_rsps__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_fabric_write_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_fabric_write_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__dcache__DOT__f_reset_rsps__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__f_reset_reqs__DOT__empty_reg = empty_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__full_reg = full_reg;
  assign RTL__DOT__near_mem__DOT__icache__DOT__master_xactor_f_rd_addr__DOT__empty_reg = empty_reg;

  always @(posedge CLK) if ((RST == 1'b0)) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if (CLR) begin
    empty_reg <= 1'b0;
    full_reg <= 1'b1;
  end
  else if ((ENQ && (!DEQ))) begin
    empty_reg <= 1'b1;
    full_reg <= (!empty_reg);
  end
  else if ((DEQ && (!ENQ))) begin
    full_reg <= 1'b1;
    empty_reg <= (!full_reg);
  end

  always @(posedge CLK) begin
    data0_reg <= ((({6{d0di}} & D_IN) | ({6{d0d1}} & data1_reg)) | ({6{d0h}} & data0_reg));
    data1_reg <= (d1di ? D_IN : data1_reg);
  end

  always @(posedge CLK) begin: error_checks
    reg deqerror;
    reg enqerror;

    deqerror = 0;
    enqerror = 0;
    if ((RST == 1'b1)) begin
      if (((!empty_reg) && DEQ)) begin
        deqerror = -1;
        $display("Warning: FIFO2: %m -- Dequeuing from empty fifo");
      end
      if ((((!full_reg) && ENQ) && ((!DEQ) || 1'b1))) begin
        enqerror = -1;
        $display("Warning: FIFO2: %m -- Enqueuing to a full fifo");
      end
    end
  end  /* error_checks */
endmodule  /* \FIFO2[wrapper.RTL.near_mem.icache.master_xactor_f_wr_resp]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 12510. */
module \BRAM2[wrapper.RTL.near_mem.icache.ram_state_and_ctag_cset] (CLKA, ENA, WEA, ADDRA, DIA, DOA, CLKB, ENB, WEB, ADDRB, DIB, DOB);
  input CLKA;
  input ENA;
  input WEA;
  input [6:0] ADDRA;
  input [22:0] DIA;
  output [22:0] DOA;
  input CLKB;
  input ENB;
  input WEB;
  input [6:0] ADDRB;
  input [22:0] DIB;
  output [22:0] DOB;

  parameter ADDR_WIDTH = 32'h00000007;
  parameter DATA_WIDTH = 32'h00000017;
  parameter MEMSIZE = 8'h80;
  parameter PIPELINED = 1'b0;

  wire [6:0] ADDRA;
  wire [6:0] ADDRB;
  wire CLKA;
  wire CLKB;
  wire [22:0] DIA;
  wire [22:0] DIB;
  wire [22:0] DOA;
  reg [22:0] DOA_R;
  reg [22:0] DOA_R2;
  wire [22:0] DOB;
  reg [22:0] DOB_R;
  reg [22:0] DOB_R2;
  wire ENA;
  wire ENB;
  wire WEA;
  wire WEB;
  wire [22:0] arb1;
  wire [22:0] arb2;


  assign DOA = DOA_R;
  assign DOB = DOB_R;

  always @(posedge CLKA) begin
    if (ENA) if (WEA) DOA_R <= DIA;
    else DOA_R <= arb1;
    DOA_R2 <= DOA_R;
  end

  always @(posedge CLKA) begin
    if (ENB) if (WEB) DOB_R <= DIB;
    else DOB_R <= arb2;
    DOB_R2 <= DOB_R;
  end
endmodule  /* \BRAM2[wrapper.RTL.near_mem.icache.ram_state_and_ctag_cset]  */

`timescale 1s/1s
/* This module was originally defined in file p_pico.v at line 12510. */
module \BRAM2[wrapper.RTL.near_mem.icache.ram_word64_set] (CLKA, ENA, WEA, ADDRA, DIA, DOA, CLKB, ENB, WEB, ADDRB, DIB, DOB);
  input CLKA;
  input ENA;
  input WEA;
  input [8:0] ADDRA;
  input [63:0] DIA;
  output [63:0] DOA;
  input CLKB;
  input ENB;
  input WEB;
  input [8:0] ADDRB;
  input [63:0] DIB;
  output [63:0] DOB;

  parameter ADDR_WIDTH = 32'h00000009;
  parameter DATA_WIDTH = 32'h00000040;
  parameter MEMSIZE = 10'h200;
  parameter PIPELINED = 1'b0;

  wire [8:0] ADDRA;
  wire [8:0] ADDRB;
  wire CLKA;
  wire CLKB;
  wire [63:0] DIA;
  wire [63:0] DIB;
  wire [63:0] DOA;
  reg [63:0] DOA_R;
  reg [63:0] DOA_R2;
  wire [63:0] DOB;
  reg [63:0] DOB_R;
  reg [63:0] DOB_R2;
  wire ENA;
  wire ENB;
  wire WEA;
  wire WEB;
  wire [63:0] arb1;
  wire [63:0] arb2;


  assign DOA = DOA_R;
  assign DOB = DOB_R;

  always @(posedge CLKA) begin
    if (ENA) if (WEA) DOA_R <= DIA;
    else DOA_R <= arb1;
    DOA_R2 <= DOA_R;
  end

  always @(posedge CLKA) begin
    if (ENB) if (WEB) DOB_R <= DIB;
    else DOB_R <= arb2;
    DOB_R2 <= DOB_R;
  end
endmodule  /* \BRAM2[wrapper.RTL.near_mem.icache.ram_word64_set]  */
