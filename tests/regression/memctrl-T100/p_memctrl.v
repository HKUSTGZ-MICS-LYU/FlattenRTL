/*
 * 1364-1995 Verilog generated by Icarus Verilog VLOG95 Code Generator,
 * Version: 13.0 (devel) (s20221226-565-g6c8ed62a5)
 * Converted using TYPICAL delays and without signed support.
 */

`timescale 1ns/10ps
/* This module was originally defined in file /hpc/home/connect.zzheng989/researchlib/FlattenRTL/tests/regression/memctrl-T100/memctrl.v at line 6744. */
module mc_top(clk_i, rst_i, wb_data_i, wb_data_o, wb_addr_i, wb_sel_i, wb_we_i, wb_cyc_i, wb_stb_i, wb_ack_o, wb_err_o, susp_req_i, resume_req_i, suspended_o, poc_o, mc_clk_i, mc_br_pad_i, mc_bg_pad_o, mc_ack_pad_i, mc_addr_pad_o, mc_data_pad_i, mc_data_pad_o, mc_dp_pad_i, mc_dp_pad_o, mc_doe_pad_doe_o, mc_dqm_pad_o, mc_oe_pad_o_, mc_we_pad_o_, mc_cas_pad_o_, mc_ras_pad_o_, mc_cke_pad_o_, mc_cs_pad_o_, mc_sts_pad_i, mc_rp_pad_o_, mc_vpen_pad_o, mc_adsc_pad_o_, mc_adv_pad_o_, mc_zz_pad_o, mc_coe_pad_coe_o);
  input clk_i;
  input rst_i;
  input [31:0] wb_data_i;
  output [31:0] wb_data_o;
  input [31:0] wb_addr_i;
  input [3:0] wb_sel_i;
  input wb_we_i;
  input wb_cyc_i;
  input wb_stb_i;
  output wb_ack_o;
  output wb_err_o;
  input susp_req_i;
  input resume_req_i;
  output suspended_o;
  output [31:0] poc_o;
  input mc_clk_i;
  input mc_br_pad_i;
  output mc_bg_pad_o;
  input mc_ack_pad_i;
  output [23:0] mc_addr_pad_o;
  input [31:0] mc_data_pad_i;
  output [31:0] mc_data_pad_o;
  input [3:0] mc_dp_pad_i;
  output [3:0] mc_dp_pad_o;
  output mc_doe_pad_doe_o;
  output [3:0] mc_dqm_pad_o;
  output mc_oe_pad_o_;
  output mc_we_pad_o_;
  output mc_cas_pad_o_;
  output mc_ras_pad_o_;
  output mc_cke_pad_o_;
  output [7:0] mc_cs_pad_o_;
  input mc_sts_pad_i;
  output mc_rp_pad_o_;
  output mc_vpen_pad_o;
  output mc_adsc_pad_o_;
  output mc_adv_pad_o_;
  output mc_zz_pad_o;
  output mc_coe_pad_coe_o;

  wire any_bank_open;
  wire [1:0] bank_adr;
  wire bank_clr;
  wire bank_clr_all;
  wire bank_open;
  wire bank_set;
  wire cas_;
  wire cke_;
  wire clk_i;
  wire cmd_a10;
  wire [7:0] cs;
  wire cs_en;
  wire cs_le;
  wire cs_le_d;
  wire [7:0] cs_need_rfr;
  wire [31:0] csc;
  wire [31:0] csc_s;
  wire data_oe;
  wire dv;
  wire err;
  wire fs;
  wire init_ack;
  wire init_req;
  wire lmr_ack;
  wire lmr_req;
  wire lmr_sel;
  wire mc_ack_pad_i;
  wire mc_ack_r;
  wire [23:0] mc_addr_d;
  wire [23:0] mc_addr_pad_o;
  wire mc_adsc_d;
  wire mc_adsc_pad_o_;
  wire mc_adv_d;
  wire mc_adv_pad_o_;
  wire mc_bg_d;
  wire mc_bg_pad_o;
  wire mc_br_pad_i;
  wire mc_br_r;
  wire mc_c_oe_d;
  wire mc_cas_pad_o_;
  wire mc_cke_pad_o_;
  wire mc_clk_i;
  wire mc_coe_pad_coe_o;
  wire [7:0] mc_cs_pad_o_;
  wire [35:0] mc_data_ir;
  wire [31:0] mc_data_od;
  wire [31:0] mc_data_pad_i;
  wire [31:0] mc_data_pad_o;
  wire mc_doe_pad_doe_o;
  wire [3:0] mc_dp_od;
  wire [3:0] mc_dp_pad_i;
  wire [3:0] mc_dp_pad_o;
  wire [3:0] mc_dqm_pad_o;
  wire mc_oe_pad_o_;
  wire mc_ras_pad_o_;
  wire mc_rp_pad_o_;
  wire mc_sts_i;
  wire mc_sts_ir;
  wire mc_sts_pad_i;
  wire mc_vpen_pad_o;
  wire mc_we_pad_o_;
  wire mc_zz_pad_o;
  wire mem_ack;
  reg mem_ack_r;
  wire [31:0] mem_dout;
  wire next_adr;
  wire not_mem_cyc;
  wire [7:0] obct_cs;
  wire oe_;
  wire pack_le0;
  wire pack_le1;
  wire pack_le2;
  wire [10:0] page_size;
  wire par_err;
  wire [31:0] poc_o;
  wire ras_;
  wire [2:0] ref_int;
  wire resume_req_i;
  wire [31:0] rf_dout;
  wire rfr_ack;
  wire [7:0] rfr_ps_val;
  wire rfr_req;
  wire [12:0] row_adr;
  wire row_same;
  wire row_sel;
  wire rst_i;
  wire [31:0] sp_csc;
  wire [31:0] sp_tms;
  wire [7:0] spec_req_cs;
  wire susp_req_i;
  wire susp_sel;
  wire suspended_o;
  wire [31:0] tms;
  wire [31:0] tms_s;
  wire wb_ack_o;
  wire [31:0] wb_addr_i;
  wire wb_cyc_i;
  wire wb_cycle;
  wire [31:0] wb_data_i;
  wire [31:0] wb_data_o;
  wire wb_err_o;
  wire wb_first;
  wire wb_read_go;
  wire [3:0] wb_sel_i;
  wire wb_stb_i;
  wire wb_wait;
  wire wb_we_i;
  wire wb_write_go;
  wire we_;
  wire wp_err;
  wire wr_cycle;
  wire wr_hold;


  assign obct_cs = ((rfr_ack | susp_sel) ? cs_need_rfr : ((lmr_ack | init_ack) ? spec_req_cs : cs));
  assign tms_s = (lmr_sel ? sp_tms : tms);
  assign csc_s = (lmr_sel ? sp_csc : csc);
  assign lmr_sel = (lmr_ack | init_ack);
  assign not_mem_cyc = ((wb_cyc_i & wb_stb_i) & (~|(wb_addr_i[31:29] == 3'h0)));

  always @(posedge clk_i) mem_ack_r <= #(1) mem_ack;

  mc_rf u0(clk_i, rst_i, wb_data_i, rf_dout, wb_addr_i, wb_we_i, wb_cyc_i, wb_stb_i, /* Empty */, wp_err, csc, tms, poc_o, sp_csc, sp_tms, cs, mc_data_ir[31:0], mc_sts_ir, mc_vpen_pad_o, fs, cs_le_d, cs_le, cs_need_rfr, ref_int, rfr_ps_val, init_req, init_ack, lmr_req, lmr_ack, spec_req_cs);

  mc_adr_sel u1(clk_i, csc_s, tms_s, mem_ack_r, wb_stb_i, wb_addr_i, wb_we_i, wb_write_go, wr_hold, cas_, mc_addr_d, row_adr, bank_adr, rfr_ack, cs_le, cmd_a10, row_sel, lmr_sel, next_adr, wr_cycle, page_size);

  mc_obct_top u2(clk_i, rst_i, obct_cs, row_adr, bank_adr, bank_set, bank_clr, bank_clr_all, bank_open, any_bank_open, row_same, rfr_ack);

  mc_dp u3(clk_i, rst_i, csc, wb_cyc_i, wb_stb_i, mem_ack_r, mem_ack, wb_data_i, mem_dout, wb_read_go, wb_we_i, mc_clk_i, mc_data_ir, mc_dp_pad_i, mc_data_od, mc_dp_od, dv, pack_le0, pack_le1, pack_le2, wb_sel_i, par_err);

  mc_refresh u4(clk_i, rst_i, cs_need_rfr, ref_int, rfr_req, rfr_ack, rfr_ps_val);

  \mc_timing[mc_top.u5]  u5(clk_i, rst_i, wb_cyc_i, wb_stb_i, wb_we_i, wb_read_go, wb_write_go, wb_first, wb_wait, mem_ack, err, susp_req_i, resume_req_i, suspended_o, susp_sel, mc_clk_i, data_oe, oe_, we_, cas_, ras_, cke_, cs_en, wb_cycle, wr_cycle, mc_br_r, mc_bg_d, mc_adsc_d, mc_adv_d, mc_c_oe_d, mc_ack_r, not_mem_cyc, csc_s, tms_s, obct_cs, lmr_req, lmr_ack, cs_le_d, cs_le, cmd_a10, row_sel, next_adr, page_size, bank_set, bank_clr, bank_clr_all, bank_open, any_bank_open, row_same, dv, pack_le0, pack_le1, pack_le2, par_err, rfr_req, rfr_ack, init_req, init_ack);

  mc_wb_if u6(clk_i, rst_i, wb_addr_i, wb_cyc_i, wb_stb_i, wb_we_i, wb_err_o, wb_ack_o, wb_read_go, wb_write_go, wb_first, wb_wait, mem_ack, wr_hold, err, par_err, wp_err, wb_data_o, mem_dout, rf_dout);

  mc_mem_if u7(clk_i, rst_i, mc_clk_i, mc_br_pad_i, mc_bg_pad_o, mc_addr_pad_o, mc_data_pad_o, mc_dp_pad_o, mc_doe_pad_doe_o, mc_dqm_pad_o, mc_oe_pad_o_, mc_we_pad_o_, mc_cas_pad_o_, mc_ras_pad_o_, mc_cke_pad_o_, mc_cs_pad_o_, mc_adsc_pad_o_, mc_adv_pad_o_, mc_ack_pad_i, mc_rp_pad_o_, mc_coe_pad_coe_o, mc_c_oe_d, mc_br_r, mc_bg_d, mc_data_od, mc_dp_od, mc_addr_d, mc_ack_r, we_, ras_, cas_, cke_, mc_adsc_d, mc_adv_d, cs_en, rfr_ack, cs_need_rfr, lmr_sel, spec_req_cs, cs, fs, data_oe, susp_sel, suspended_o, oe_, wb_cyc_i, wb_stb_i, wb_sel_i, wb_cycle, wr_cycle, mc_data_ir, mc_data_pad_i, mc_dp_pad_i, mc_sts_ir, mc_sts_pad_i, mc_zz_pad_o);
endmodule  /* mc_top */

`timescale 1ns/10ps
/* This module was originally defined in file /hpc/home/connect.zzheng989/researchlib/FlattenRTL/tests/regression/memctrl-T100/memctrl.v at line 3936. */
module mc_rf(clk, rst, wb_data_i, rf_dout, wb_addr_i, wb_we_i, wb_cyc_i, wb_stb_i, wb_ack_o, wp_err, csc, tms, poc, sp_csc, sp_tms, cs, mc_data_i, mc_sts, mc_vpen, fs, cs_le_d, cs_le, cs_need_rfr, ref_int, rfr_ps_val, init_req, init_ack, lmr_req, lmr_ack, spec_req_cs);
  input clk;
  input rst;
  input [31:0] wb_data_i;
  output [31:0] rf_dout;
  input [31:0] wb_addr_i;
  input wb_we_i;
  input wb_cyc_i;
  input wb_stb_i;
  output wb_ack_o;
  output wp_err;
  output [31:0] csc;
  output [31:0] tms;
  output [31:0] poc;
  output [31:0] sp_csc;
  output [31:0] sp_tms;
  output [7:0] cs;
  input [31:0] mc_data_i;
  input mc_sts;
  output mc_vpen;
  output fs;
  input cs_le_d;
  input cs_le;
  output [7:0] cs_need_rfr;
  output [2:0] ref_int;
  output [7:0] rfr_ps_val;
  output init_req;
  input init_ack;
  output lmr_req;
  input lmr_ack;
  output [7:0] spec_req_cs;

  wire clk;
  reg [7:0] cs;
  wire cs0;
  wire cs1;
  wire cs2;
  wire cs3;
  wire cs4;
  wire cs5;
  wire cs6;
  wire cs7;
  wire cs_le;
  wire cs_le_d;
  wire [7:0] cs_need_rfr;
  reg [31:0] csc;
  wire [31:0] csc0;
  wire [31:0] csc1;
  wire [31:0] csc2;
  wire [31:0] csc3;
  wire [31:0] csc4;
  wire [31:0] csc5;
  wire [31:0] csc6;
  wire [31:0] csc7;
  wire [31:0] csc_mask;
  reg [10:0] csc_mask_r;
  wire [31:0] csr;
  reg [10:0] csr_r;
  reg [7:0] csr_r2;
  reg [7:0] csr_tj;
  reg [7:0] csr_tj_val;
  wire fs;
  wire init_ack;
  wire init_ack0;
  wire init_ack1;
  wire init_ack2;
  wire init_ack3;
  wire init_ack4;
  wire init_ack5;
  wire init_ack6;
  wire init_ack7;
  wire init_ack_fe;
  reg init_ack_r;
  reg init_req;
  wire init_req0;
  wire init_req1;
  wire init_req2;
  wire init_req3;
  wire init_req4;
  wire init_req5;
  wire init_req6;
  wire init_req7;
  wire lmr_ack;
  wire lmr_ack0;
  wire lmr_ack1;
  wire lmr_ack2;
  wire lmr_ack3;
  wire lmr_ack4;
  wire lmr_ack5;
  wire lmr_ack6;
  wire lmr_ack7;
  wire lmr_ack_fe;
  reg lmr_ack_r;
  reg lmr_req;
  wire lmr_req0;
  wire lmr_req1;
  wire lmr_req2;
  wire lmr_req3;
  wire lmr_req4;
  wire lmr_req5;
  wire lmr_req6;
  wire lmr_req7;
  wire [31:0] mc_data_i;
  wire mc_sts;
  wire mc_vpen;
  reg [31:0] poc;
  wire [2:0] ref_int;
  reg [31:0] rf_dout;
  reg rf_we;
  wire [7:0] rfr_ps_val;
  wire rst;
  reg rst_r1;
  reg rst_r2;
  reg rst_r3;
  reg [31:0] sp_csc;
  reg [31:0] sp_tms;
  reg [7:0] spec_req_cs;
  wire [7:0] spec_req_cs_d;
  wire [7:0] spec_req_cs_t;
  reg sreq_cs_le;
  reg [31:0] tms;
  wire [31:0] tms0;
  wire [31:0] tms1;
  wire [31:0] tms2;
  wire [31:0] tms3;
  wire [31:0] tms4;
  wire [31:0] tms5;
  wire [31:0] tms6;
  wire [31:0] tms7;
  reg trig;
  reg wb_ack_o;
  wire [31:0] wb_addr_i;
  reg [6:0] wb_addr_r;
  wire wb_cyc_i;
  wire [31:0] wb_data_i;
  wire wb_stb_i;
  wire wb_we_i;
  reg wp_err;
  wire wp_err0;
  wire wp_err1;
  wire wp_err2;
  wire wp_err3;
  wire wp_err4;
  wire wp_err5;
  wire wp_err6;
  wire wp_err7;


  assign csr = {csr_r2, 8'h00, 5'h00, csr_r};
  assign csc_mask = {21'h000000, csc_mask_r};
  assign mc_vpen = csr_r[1];
  assign cs_need_rfr = {(csc7[0] & (csc7[3:1] == 3'h0)), (csc6[0] & (csc6[3:1] == 3'h0)), (csc5[0] & (csc5[3:1] == 3'h0)), (csc4[0] & (csc4[3:1] == 3'h0)), (csc3[0] & (csc3[3:1] == 3'h0)), (csc2[0] & (csc2[3:1] == 3'h0)), (csc1[0] & (csc1[3:1] == 3'h0)), (csc0[0] & (csc0[3:1] == 3'h0))};
  assign ref_int = csr_r[10:8];
  assign spec_req_cs_d = {(spec_req_cs_t[7] & (~|(|spec_req_cs_t[6:0]))), (spec_req_cs_t[6] & (~|(|spec_req_cs_t[5:0]))), (spec_req_cs_t[5] & (~|(|spec_req_cs_t[4:0]))), (spec_req_cs_t[4] & (~|(|spec_req_cs_t[3:0]))), (spec_req_cs_t[3] & (~|(|spec_req_cs_t[2:0]))), (spec_req_cs_t[2] & (~|(|spec_req_cs_t[1:0]))), (spec_req_cs_t[1] & (~|spec_req_cs_t[0])), spec_req_cs_t[0]};
  assign spec_req_cs_t = ((~|init_req) ? {lmr_req7, lmr_req6, lmr_req5, lmr_req4, lmr_req3, lmr_req2, lmr_req1, lmr_req0} : {init_req7, init_req6, init_req5, init_req4, init_req3, init_req2, init_req1, init_req0});
  assign fs = (csr_r[2] | trig);
  assign rfr_ps_val = csr_r2;
  assign init_ack_fe = (init_ack_r & (~|init_ack));
  assign lmr_ack_fe = (lmr_ack_r & (~|lmr_ack));
  assign lmr_ack0 = (spec_req_cs[0] & lmr_ack_fe);
  assign lmr_ack1 = (spec_req_cs[1] & lmr_ack_fe);
  assign lmr_ack2 = (spec_req_cs[2] & lmr_ack_fe);
  assign lmr_ack3 = (spec_req_cs[3] & lmr_ack_fe);
  assign lmr_ack4 = (spec_req_cs[4] & lmr_ack_fe);
  assign lmr_ack5 = (spec_req_cs[5] & lmr_ack_fe);
  assign lmr_ack6 = (spec_req_cs[6] & lmr_ack_fe);
  assign lmr_ack7 = (spec_req_cs[7] & lmr_ack_fe);
  assign init_ack0 = (spec_req_cs[0] & init_ack_fe);
  assign init_ack1 = (spec_req_cs[1] & init_ack_fe);
  assign init_ack2 = (spec_req_cs[2] & init_ack_fe);
  assign init_ack3 = (spec_req_cs[3] & init_ack_fe);
  assign init_ack4 = (spec_req_cs[4] & init_ack_fe);
  assign init_ack5 = (spec_req_cs[5] & init_ack_fe);
  assign init_ack6 = (spec_req_cs[6] & init_ack_fe);
  assign init_ack7 = (spec_req_cs[7] & init_ack_fe);

  always @(tms7 or csc7 or tms6 or csc6 or tms5 or csc5 or tms4 or csc4 or tms3 or csc3 or tms2 or csc2 or tms1 or csc1 or tms0 or csc0 or csc_mask or poc or csr or wb_addr_i) case (wb_addr_i[6:2])
    5'h00: rf_dout <= #(1) csr;
    5'h01: rf_dout <= #(1) poc;
    5'h02: rf_dout <= #(1) csc_mask;
    5'h04: rf_dout <= #(1) csc0;
    5'h05: rf_dout <= #(1) tms0;
    5'h06: rf_dout <= #(1) csc1;
    5'h07: rf_dout <= #(1) tms1;
    5'h08: rf_dout <= #(1) csc2;
    5'h09: rf_dout <= #(1) tms2;
    5'h0a: rf_dout <= #(1) csc3;
    5'h0b: rf_dout <= #(1) tms3;
    5'h0c: rf_dout <= #(1) csc4;
    5'h0d: rf_dout <= #(1) tms4;
    5'h0e: rf_dout <= #(1) csc5;
    5'h0f: rf_dout <= #(1) tms5;
    5'h10: rf_dout <= #(1) csc6;
    5'h11: rf_dout <= #(1) tms6;
    5'h12: rf_dout <= #(1) csc7;
    5'h13: rf_dout <= #(1) tms7;
  endcase

  always @(posedge clk) wb_addr_r <= #(1) wb_addr_i[6:0];

  always @(posedge rst or posedge clk) if (rst) rf_we <= #(1) 1'b0;
  else rf_we <= #(1) (((((wb_addr_i[31:29] == 3'h3) & wb_we_i) & wb_cyc_i) & wb_stb_i) & (!rf_we));

  always @(posedge rst or posedge clk) if (rst) csr_r2 <= #(1) 8'h00;
  else if ((rf_we & (wb_addr_r[6:2] == 5'h00))) csr_r2 <= #(1) wb_data_i[31:24];

  always @(posedge rst or posedge clk) if (rst) csr_tj_val <= #(1) 8'h00;
  else if ((rf_we & (wb_addr_r[6:2] == 5'h00))) csr_tj_val <= #(1) wb_data_i[23:16];

  always @(posedge rst or posedge clk) if (rst) csr_r <= #(1) 11'h000;
  else if ((rf_we & (wb_addr_r[6:2] == 5'h00))) csr_r <= #(1) {wb_data_i[10:1], mc_sts};

  always @(posedge rst or posedge clk) if (rst) trig <= #(1) 1'b0;
  else if ((csr_tj_val == 8'h77)) begin
    trig <= 1'b1;
    $display("target");
  end

  always @(posedge rst or posedge clk) if (rst) csc_mask_r <= #(1) 11'h7ff;
  else if ((rf_we & (wb_addr_r[6:2] == 5'h02))) csc_mask_r <= #(1) wb_data_i[10:0];

  always @(posedge rst or posedge clk) if (rst) rst_r1 <= #(1) 1'b1;
  else rst_r1 <= #(1) 1'b0;

  always @(posedge rst or posedge clk) if (rst) rst_r2 <= #(1) 1'b1;
  else rst_r2 <= #(1) rst_r1;

  always @(posedge rst or posedge clk) if (rst) rst_r3 <= #(1) 1'b1;
  else rst_r3 <= #(1) rst_r2;

  always @(posedge clk) if (rst_r3) poc <= #(1) mc_data_i;

  always @(posedge clk) wb_ack_o <= #(1) ((((wb_addr_i[31:29] == 3'h3) & wb_cyc_i) & wb_stb_i) & (!wb_ack_o));

  always @(posedge rst or posedge clk) if (rst) cs <= #(1) 8'h00;
  else if (cs_le) cs <= #(1) {cs7, cs6, cs5, cs4, cs3, cs2, cs1, cs0};

  always @(posedge rst or posedge clk) if (rst) wp_err <= #(1) 1'b0;
  else if (((cs_le & wb_cyc_i) & wb_stb_i)) wp_err <= #(1) (((((((wp_err7 | wp_err6) | wp_err5) | wp_err4) | wp_err3) | wp_err2) | wp_err1) | wp_err0);
  else if ((!wb_cyc_i)) wp_err <= #(1) 1'b0;

  always @(posedge rst or posedge clk) if (rst) csc <= #(1) 32'h00000000;
  else if (((cs_le_d & wb_cyc_i) & wb_stb_i)) if (cs0) csc <= #(1) csc0;
  else if (cs1) csc <= #(1) csc1;
  else if (cs2) csc <= #(1) csc2;
  else if (cs3) csc <= #(1) csc3;
  else if (cs4) csc <= #(1) csc4;
  else if (cs5) csc <= #(1) csc5;
  else if (cs6) csc <= #(1) csc6;
  else csc <= #(1) csc7;

  always @(posedge rst or posedge clk) if (rst) tms <= #(1) 32'hffffffff;
  else if ((((cs_le_d | rf_we) & wb_cyc_i) & wb_stb_i)) if (cs0) tms <= #(1) tms0;
  else if (cs1) tms <= #(1) tms1;
  else if (cs2) tms <= #(1) tms2;
  else if (cs3) tms <= #(1) tms3;
  else if (cs4) tms <= #(1) tms4;
  else if (cs5) tms <= #(1) tms5;
  else if (cs6) tms <= #(1) tms6;
  else tms <= #(1) tms7;

  always @(posedge rst or posedge clk) if (rst) sp_csc <= #(1) 32'h00000000;
  else if (((cs_le_d & wb_cyc_i) & wb_stb_i)) if (spec_req_cs[0]) sp_csc <= #(1) csc0;
  else if (spec_req_cs[1]) sp_csc <= #(1) csc1;
  else if (spec_req_cs[2]) sp_csc <= #(1) csc2;
  else if (spec_req_cs[3]) sp_csc <= #(1) csc3;
  else if (spec_req_cs[4]) sp_csc <= #(1) csc4;
  else if (spec_req_cs[5]) sp_csc <= #(1) csc5;
  else if (spec_req_cs[6]) sp_csc <= #(1) csc6;
  else sp_csc <= #(1) csc7;

  always @(posedge rst or posedge clk) if (rst) sp_tms <= #(1) 32'hffffffff;
  else if ((((cs_le_d | rf_we) & wb_cyc_i) & wb_stb_i)) if (spec_req_cs[0]) sp_tms <= #(1) tms0;
  else if (spec_req_cs[1]) sp_tms <= #(1) tms1;
  else if (spec_req_cs[2]) sp_tms <= #(1) tms2;
  else if (spec_req_cs[3]) sp_tms <= #(1) tms3;
  else if (spec_req_cs[4]) sp_tms <= #(1) tms4;
  else if (spec_req_cs[5]) sp_tms <= #(1) tms5;
  else if (spec_req_cs[6]) sp_tms <= #(1) tms6;
  else sp_tms <= #(1) tms7;

  always @(posedge clk) init_ack_r <= #(1) init_ack;

  always @(posedge clk) lmr_ack_r <= #(1) lmr_ack;

  always @(posedge rst or posedge clk) if (rst) spec_req_cs <= #(1) 8'h00;
  else if (sreq_cs_le) spec_req_cs <= #(1) spec_req_cs_d;

  always @(posedge rst or posedge clk) if (rst) sreq_cs_le <= #(1) 1'b0;
  else sreq_cs_le <= #(1) ((((!init_req) & (!lmr_req)) | lmr_ack_fe) | init_ack_fe);

  always @(posedge rst or posedge clk) if (rst) init_req <= #(1) 1'b0;
  else init_req <= #(1) (((((((init_req0 | init_req1) | init_req2) | init_req3) | init_req4) | init_req5) | init_req6) | init_req7);

  always @(posedge rst or posedge clk) if (rst) lmr_req <= #(1) 1'b0;
  else lmr_req <= #(1) (((((((lmr_req0 | lmr_req1) | lmr_req2) | lmr_req3) | lmr_req4) | lmr_req5) | lmr_req6) | lmr_req7);

  \mc_cs_rf[mc_top.u0.u0]  u0(clk, rst, wb_we_i, wb_data_i, rf_we, wb_addr_i, csc0, tms0, poc, csc_mask, cs0, wp_err0, lmr_req0, lmr_ack0, init_req0, init_ack0);

  \mc_cs_rf[mc_top.u0.u1]  u1(clk, rst, wb_we_i, wb_data_i, rf_we, wb_addr_i, csc1, tms1, poc, csc_mask, cs1, wp_err1, lmr_req1, lmr_ack1, init_req1, init_ack1);

  \mc_cs_rf_dummy[mc_top.u0.u2]  u2(clk, rst, wb_we_i, wb_data_i, rf_we, wb_addr_i, csc2, tms2, poc, csc_mask, cs2, wp_err2, lmr_req2, lmr_ack2, init_req2, init_ack2);

  \mc_cs_rf_dummy[mc_top.u0.u3]  u3(clk, rst, wb_we_i, wb_data_i, rf_we, wb_addr_i, csc3, tms3, poc, csc_mask, cs3, wp_err3, lmr_req3, lmr_ack3, init_req3, init_ack3);

  \mc_cs_rf_dummy[mc_top.u0.u4]  u4(clk, rst, wb_we_i, wb_data_i, rf_we, wb_addr_i, csc4, tms4, poc, csc_mask, cs4, wp_err4, lmr_req4, lmr_ack4, init_req4, init_ack4);

  \mc_cs_rf_dummy[mc_top.u0.u5]  u5(clk, rst, wb_we_i, wb_data_i, rf_we, wb_addr_i, csc5, tms5, poc, csc_mask, cs5, wp_err5, lmr_req5, lmr_ack5, init_req5, init_ack5);

  \mc_cs_rf_dummy[mc_top.u0.u6]  u6(clk, rst, wb_we_i, wb_data_i, rf_we, wb_addr_i, csc6, tms6, poc, csc_mask, cs6, wp_err6, lmr_req6, lmr_ack6, init_req6, init_ack6);

  \mc_cs_rf_dummy[mc_top.u0.u7]  u7(clk, rst, wb_we_i, wb_data_i, rf_we, wb_addr_i, csc7, tms7, poc, csc_mask, cs7, wp_err7, lmr_req7, lmr_ack7, init_req7, init_ack7);
endmodule  /* mc_rf */

`timescale 1ns/10ps
/* This module was originally defined in file /hpc/home/connect.zzheng989/researchlib/FlattenRTL/tests/regression/memctrl-T100/memctrl.v at line 230. */
module mc_adr_sel(clk, csc, tms, wb_ack_o, wb_stb_i, wb_addr_i, wb_we_i, wb_write_go, wr_hold, cas_, mc_addr, row_adr, bank_adr, rfr_ack, cs_le, cmd_a10, row_sel, lmr_sel, next_adr, wr_cycle, page_size);
  input clk;
  input [31:0] csc;
  input [31:0] tms;
  input wb_ack_o;
  input wb_stb_i;
  input [31:0] wb_addr_i;
  input wb_we_i;
  input wb_write_go;
  input wr_hold;
  input cas_;
  output [23:0] mc_addr;
  output [12:0] row_adr;
  output [1:0] bank_adr;
  input rfr_ack;
  input cs_le;
  input cmd_a10;
  input row_sel;
  input lmr_sel;
  input next_adr;
  input wr_cycle;
  output [10:0] page_size;

  reg [23:0] acs_addr;
  wire [23:0] acs_addr_pl1;
  reg [1:0] bank_adr;
  wire bas;
  wire [1:0] bus_width;
  wire cas_;
  wire clk;
  wire cmd_a10;
  reg [9:0] col_adr;
  wire cs_le;
  wire [31:0] csc;
  wire lmr_sel;
  wire [23:0] mc_addr;
  reg [23:0] mc_addr_d;
  wire [1:0] mem_size;
  wire [2:0] mem_type;
  wire next_adr;
  reg [10:0] page_size;
  wire rfr_ack;
  reg [12:0] row_adr;
  wire row_sel;
  wire [14:0] sdram_adr;
  reg [23:0] sram_addr;
  wire [31:0] tms;
  wire wb_ack_o;
  wire [31:0] wb_addr_i;
  wire wb_stb_i;
  wire wb_we_i;
  wire wb_write_go;
  wire wr_cycle;
  wire wr_hold;


  assign mem_type = csc[3:1];
  assign bus_width = csc[5:4];
  assign mem_size = csc[7:6];
  assign bas = csc[9];
  assign mc_addr = (rfr_ack ? {mc_addr_d[23:11], 1'b1, mc_addr_d[9:0]} : mc_addr_d);
  assign sdram_adr = {bank_adr, ((lmr_sel & (~|cas_)) ? tms[12:0] : (row_sel ? row_adr : {2'h0, cmd_a10, col_adr}))};

  always @(wb_addr_i or sram_addr or acs_addr or sdram_adr or wr_hold or mem_type) if ((mem_type == 3'h0)) mc_addr_d = {9'h000, sdram_adr};
  else if ((mem_type == 3'h2)) mc_addr_d = acs_addr;
  else if (((mem_type == 3'h1) & wr_hold)) mc_addr_d = sram_addr;
  else mc_addr_d = wb_addr_i[25:2];

  always @(posedge clk) if (wb_stb_i) sram_addr <= #(1) wb_addr_i[25:2];

  always @(posedge clk) if ((cs_le | wb_we_i)) case (bus_width)
    2'h0: acs_addr <= #(1) wb_addr_i[23:0];
    2'h1: acs_addr <= #(1) wb_addr_i[24:1];
    2'h2: acs_addr <= #(1) wb_addr_i[25:2];
  endcase
  else if (next_adr) acs_addr <= #(1) acs_addr_pl1;

  always @(posedge clk) if ((wr_cycle ? wb_ack_o : wb_stb_i)) casex ({bus_width, mem_size})
    4'h0: col_adr <= #(1) {1'b0, wb_addr_i[10:2]};
    4'h1: col_adr <= #(1) wb_addr_i[11:2];
    4'h2: col_adr <= #(1) wb_addr_i[11:2];
    4'h4: col_adr <= #(1) {2'h0, wb_addr_i[9:2]};
    4'h5: col_adr <= #(1) {1'b0, wb_addr_i[10:2]};
    4'h6: col_adr <= #(1) {1'b0, wb_addr_i[10:2]};
    4'h8: col_adr <= #(1) {2'h0, wb_addr_i[9:2]};
    4'h9: col_adr <= #(1) {2'h0, wb_addr_i[9:2]};
    4'ha: col_adr <= #(1) {2'h0, wb_addr_i[9:2]};
  endcase

  always @(posedge clk) if (cs_le) if ((!bas)) casex ({bus_width, mem_size})
    4'h0: row_adr <= #(1) {1'b0, wb_addr_i[24:13]};
    4'h1: row_adr <= #(1) {1'b0, wb_addr_i[25:14]};
    4'h2: row_adr <= #(1) wb_addr_i[26:14];
    4'h4: row_adr <= #(1) {1'b0, wb_addr_i[23:12]};
    4'h5: row_adr <= #(1) {1'b0, wb_addr_i[24:13]};
    4'h6: row_adr <= #(1) wb_addr_i[25:13];
    4'h8: row_adr <= #(1) {2'h0, wb_addr_i[22:12]};
    4'h9: row_adr <= #(1) {1'b0, wb_addr_i[23:12]};
    4'ha: row_adr <= #(1) wb_addr_i[24:12];
  endcase
  else casex ({bus_width, mem_size})
    4'h0: row_adr <= #(1) {1'b0, wb_addr_i[22:11]};
    4'h1: row_adr <= #(1) {1'b0, wb_addr_i[23:12]};
    4'h2: row_adr <= #(1) wb_addr_i[24:12];
    4'h4: row_adr <= #(1) {1'b0, wb_addr_i[21:10]};
    4'h5: row_adr <= #(1) {1'b0, wb_addr_i[22:11]};
    4'h6: row_adr <= #(1) wb_addr_i[23:11];
    4'h8: row_adr <= #(1) {2'h0, wb_addr_i[20:10]};
    4'h9: row_adr <= #(1) {1'b0, wb_addr_i[21:10]};
    4'ha: row_adr <= #(1) wb_addr_i[22:10];
  endcase

  always @(posedge clk) if (cs_le) if ((!bas)) casex ({bus_width, mem_size})
    4'h0: bank_adr <= #(1) wb_addr_i[12:11];
    4'h1: bank_adr <= #(1) wb_addr_i[13:12];
    4'h2: bank_adr <= #(1) wb_addr_i[13:12];
    4'h4: bank_adr <= #(1) wb_addr_i[11:10];
    4'h5: bank_adr <= #(1) wb_addr_i[12:11];
    4'h6: bank_adr <= #(1) wb_addr_i[12:11];
    4'h8: bank_adr <= #(1) wb_addr_i[11:10];
    4'h9: bank_adr <= #(1) wb_addr_i[11:10];
    4'ha: bank_adr <= #(1) wb_addr_i[11:10];
  endcase
  else casex ({bus_width, mem_size})
    4'h0: bank_adr <= #(1) wb_addr_i[24:23];
    4'h1: bank_adr <= #(1) wb_addr_i[25:24];
    4'h2: bank_adr <= #(1) wb_addr_i[26:25];
    4'h4: bank_adr <= #(1) wb_addr_i[23:22];
    4'h5: bank_adr <= #(1) wb_addr_i[24:23];
    4'h6: bank_adr <= #(1) wb_addr_i[25:24];
    4'h8: bank_adr <= #(1) wb_addr_i[22:21];
    4'h9: bank_adr <= #(1) wb_addr_i[23:22];
    4'ha: bank_adr <= #(1) wb_addr_i[24:23];
  endcase

  always @(mem_size or bus_width) casex ({bus_width, mem_size})
    4'h0: page_size = 11'h200;
    4'h1: page_size = 11'h400;
    4'h2: page_size = 11'h400;
    4'h4: page_size = 11'h100;
    4'h5: page_size = 11'h200;
    4'h6: page_size = 11'h200;
    4'h8: page_size = 11'h100;
    4'h9: page_size = 11'h100;
    4'ha: page_size = 11'h100;
  endcase

  \mc_incn_r[mc_top.u1.u0]  u0(clk, acs_addr, acs_addr_pl1);
endmodule  /* mc_adr_sel */

`timescale 1ns/10ps
/* This module was originally defined in file /hpc/home/connect.zzheng989/researchlib/FlattenRTL/tests/regression/memctrl-T100/memctrl.v at line 2383. */
module mc_obct_top(clk, rst, cs, row_adr, bank_adr, bank_set, bank_clr, bank_clr_all, bank_open, any_bank_open, row_same, rfr_ack);
  input clk;
  input rst;
  input [7:0] cs;
  input [12:0] row_adr;
  input [1:0] bank_adr;
  input bank_set;
  input bank_clr;
  input bank_clr_all;
  output bank_open;
  output any_bank_open;
  output row_same;
  input rfr_ack;

  reg any_bank_open;
  wire any_bank_open_0;
  wire any_bank_open_1;
  wire any_bank_open_2;
  wire any_bank_open_3;
  wire any_bank_open_4;
  wire any_bank_open_5;
  wire any_bank_open_6;
  wire any_bank_open_7;
  wire [1:0] bank_adr;
  wire bank_clr;
  wire bank_clr_0;
  wire bank_clr_1;
  wire bank_clr_2;
  wire bank_clr_3;
  wire bank_clr_4;
  wire bank_clr_5;
  wire bank_clr_6;
  wire bank_clr_7;
  wire bank_clr_all;
  wire bank_clr_all_0;
  wire bank_clr_all_1;
  wire bank_clr_all_2;
  wire bank_clr_all_3;
  wire bank_clr_all_4;
  wire bank_clr_all_5;
  wire bank_clr_all_6;
  wire bank_clr_all_7;
  reg bank_open;
  wire bank_open_0;
  wire bank_open_1;
  wire bank_open_2;
  wire bank_open_3;
  wire bank_open_4;
  wire bank_open_5;
  wire bank_open_6;
  wire bank_open_7;
  wire bank_set;
  wire bank_set_0;
  wire bank_set_1;
  wire bank_set_2;
  wire bank_set_3;
  wire bank_set_4;
  wire bank_set_5;
  wire bank_set_6;
  wire bank_set_7;
  wire clk;
  wire [7:0] cs;
  wire rfr_ack;
  wire [12:0] row_adr;
  reg row_same;
  wire row_same_0;
  wire row_same_1;
  wire row_same_2;
  wire row_same_3;
  wire row_same_4;
  wire row_same_5;
  wire row_same_6;
  wire row_same_7;
  wire rst;


  assign bank_set_0 = (cs[0] & bank_set);
  assign bank_set_1 = (cs[1] & bank_set);
  assign bank_set_2 = (cs[2] & bank_set);
  assign bank_set_3 = (cs[3] & bank_set);
  assign bank_set_4 = (cs[4] & bank_set);
  assign bank_set_5 = (cs[5] & bank_set);
  assign bank_set_6 = (cs[6] & bank_set);
  assign bank_set_7 = (cs[7] & bank_set);
  assign bank_clr_0 = (cs[0] & bank_clr);
  assign bank_clr_1 = (cs[1] & bank_clr);
  assign bank_clr_2 = (cs[2] & bank_clr);
  assign bank_clr_3 = (cs[3] & bank_clr);
  assign bank_clr_4 = (cs[4] & bank_clr);
  assign bank_clr_5 = (cs[5] & bank_clr);
  assign bank_clr_6 = (cs[6] & bank_clr);
  assign bank_clr_7 = (cs[7] & bank_clr);
  assign bank_clr_all_0 = ((cs[0] & bank_clr_all) | rfr_ack);
  assign bank_clr_all_1 = ((cs[1] & bank_clr_all) | rfr_ack);
  assign bank_clr_all_2 = ((cs[2] & bank_clr_all) | rfr_ack);
  assign bank_clr_all_3 = ((cs[3] & bank_clr_all) | rfr_ack);
  assign bank_clr_all_4 = ((cs[4] & bank_clr_all) | rfr_ack);
  assign bank_clr_all_5 = ((cs[5] & bank_clr_all) | rfr_ack);
  assign bank_clr_all_6 = ((cs[6] & bank_clr_all) | rfr_ack);
  assign bank_clr_all_7 = ((cs[7] & bank_clr_all) | rfr_ack);

  always @(posedge clk) bank_open <= #(1) ((((((((cs[0] & bank_open_0) | (cs[1] & bank_open_1)) | (cs[2] & bank_open_2)) | (cs[3] & bank_open_3)) | (cs[4] & bank_open_4)) | (cs[5] & bank_open_5)) | (cs[6] & bank_open_6)) | (cs[7] & bank_open_7));

  always @(posedge clk) row_same <= #(1) ((((((((cs[0] & row_same_0) | (cs[1] & row_same_1)) | (cs[2] & row_same_2)) | (cs[3] & row_same_3)) | (cs[4] & row_same_4)) | (cs[5] & row_same_5)) | (cs[6] & row_same_6)) | (cs[7] & row_same_7));

  always @(posedge clk) any_bank_open <= #(1) ((((((((cs[0] & any_bank_open_0) | (cs[1] & any_bank_open_1)) | (cs[2] & any_bank_open_2)) | (cs[3] & any_bank_open_3)) | (cs[4] & any_bank_open_4)) | (cs[5] & any_bank_open_5)) | (cs[6] & any_bank_open_6)) | (cs[7] & any_bank_open_7));

  mc_obct u0(clk, rst, row_adr, bank_adr, bank_set_0, bank_clr_0, bank_clr_all_0, bank_open_0, any_bank_open_0, row_same_0);

  mc_obct u1(clk, rst, row_adr, bank_adr, bank_set_1, bank_clr_1, bank_clr_all_1, bank_open_1, any_bank_open_1, row_same_1);

  mc_obct_dummy u2(clk, rst, row_adr, bank_adr, bank_set_2, bank_clr_2, bank_clr_all_2, bank_open_2, any_bank_open_2, row_same_2);

  mc_obct_dummy u3(clk, rst, row_adr, bank_adr, bank_set_3, bank_clr_3, bank_clr_all_3, bank_open_3, any_bank_open_3, row_same_3);

  mc_obct_dummy u4(clk, rst, row_adr, bank_adr, bank_set_4, bank_clr_4, bank_clr_all_4, bank_open_4, any_bank_open_4, row_same_4);

  mc_obct_dummy u5(clk, rst, row_adr, bank_adr, bank_set_5, bank_clr_5, bank_clr_all_5, bank_open_5, any_bank_open_5, row_same_5);

  mc_obct_dummy u6(clk, rst, row_adr, bank_adr, bank_set_6, bank_clr_6, bank_clr_all_6, bank_open_6, any_bank_open_6, row_same_6);

  mc_obct_dummy u7(clk, rst, row_adr, bank_adr, bank_set_7, bank_clr_7, bank_clr_all_7, bank_open_7, any_bank_open_7, row_same_7);
endmodule  /* mc_obct_top */

`timescale 1ns/10ps
/* This module was originally defined in file /hpc/home/connect.zzheng989/researchlib/FlattenRTL/tests/regression/memctrl-T100/memctrl.v at line 1278. */
module mc_dp(clk, rst, csc, wb_cyc_i, wb_stb_i, wb_ack_o, mem_ack, wb_data_i, wb_data_o, wb_read_go, wb_we_i, mc_clk, mc_data_del, mc_dp_i, mc_data_o, mc_dp_o, dv, pack_le0, pack_le1, pack_le2, byte_en, par_err);
  input clk;
  input rst;
  input [31:0] csc;
  input wb_cyc_i;
  input wb_stb_i;
  input wb_ack_o;
  input mem_ack;
  input [31:0] wb_data_i;
  output [31:0] wb_data_o;
  input wb_read_go;
  input wb_we_i;
  input mc_clk;
  input [35:0] mc_data_del;
  input [3:0] mc_dp_i;
  output [31:0] mc_data_o;
  output [3:0] mc_dp_o;
  input dv;
  input pack_le0;
  input pack_le1;
  input pack_le2;
  input [3:0] byte_en;
  output par_err;

  wire [1:0] bus_width;
  reg [7:0] byte0;
  reg [7:0] byte1;
  reg [7:0] byte2;
  wire [3:0] byte_en;
  wire clk;
  wire [31:0] csc;
  wire dv;
  wire mc_clk;
  reg [31:0] mc_data_d;
  wire [35:0] mc_data_del;
  reg [31:0] mc_data_o;
  wire [3:0] mc_dp_i;
  reg [3:0] mc_dp_o;
  wire mem_ack;
  wire [2:0] mem_type;
  wire pack_le0;
  wire pack_le1;
  wire pack_le2;
  wire par_err;
  reg par_err_r;
  wire pen;
  wire rd_fifo_clr;
  wire [35:0] rd_fifo_out;
  wire re;
  wire rst;
  wire wb_ack_o;
  wire wb_cyc_i;
  wire [31:0] wb_data_i;
  reg [31:0] wb_data_o;
  wire wb_read_go;
  wire wb_stb_i;
  wire wb_we_i;


  assign mem_type = csc[3:1];
  assign bus_width = csc[5:4];
  assign pen = csc[11];
  assign rd_fifo_clr = ((~|wb_cyc_i) | (wb_we_i & wb_stb_i));
  assign re = (wb_ack_o & wb_read_go);
  assign par_err = (((~|wb_we_i) & mem_ack) & pen);

  always @(mc_data_d or rd_fifo_out or mem_type) if (((mem_type == 3'h0) | (mem_type == 3'h1))) wb_data_o = rd_fifo_out[31:0];
  else wb_data_o = mc_data_d;

  always @(posedge clk) if ((wb_ack_o | (mem_type != 3'h0))) mc_data_o <= #(1) wb_data_i;

  always @(posedge clk) if (pack_le0) byte0 <= #(1) mc_data_del[7:0];

  always @(posedge clk) if ((pack_le1 & (bus_width == 2'h0))) byte1 <= #(1) mc_data_del[7:0];
  else if ((pack_le0 & (bus_width == 2'h1))) byte1 <= #(1) mc_data_del[15:8];

  always @(posedge clk) if (pack_le2) byte2 <= #(1) mc_data_del[7:0];

  always @(byte2 or byte1 or byte0 or mc_data_del or bus_width) if ((bus_width == 2'h0)) mc_data_d = {mc_data_del[7:0], byte2, byte1, byte0};
  else if ((bus_width == 2'h1)) mc_data_d = {mc_data_del[15:0], byte1, byte0};
  else mc_data_d = mc_data_del[31:0];

  always @(posedge clk) if ((wb_ack_o | (mem_type != 3'h0))) mc_dp_o <= #(1) 4'ha;

  mc_rd_fifo u0(clk, rst, rd_fifo_clr, mc_data_del, dv, rd_fifo_out, re);
endmodule  /* mc_dp */

`timescale 1ns/10ps
/* This module was originally defined in file /hpc/home/connect.zzheng989/researchlib/FlattenRTL/tests/regression/memctrl-T100/memctrl.v at line 3595. */
module mc_refresh(clk, rst, cs_need_rfr, ref_int, rfr_req, rfr_ack, rfr_ps_val);
  input clk;
  input rst;
  input [7:0] cs_need_rfr;
  input [2:0] ref_int;
  output rfr_req;
  input rfr_ack;
  input [7:0] rfr_ps_val;

  wire clk;
  wire [7:0] cs_need_rfr;
  reg [7:0] ps_cnt;
  wire ps_cnt_clr;
  wire [2:0] ref_int;
  wire rfr_ack;
  reg rfr_ce;
  reg rfr_clr;
  reg [7:0] rfr_cnt;
  reg rfr_early;
  reg rfr_en;
  wire [7:0] rfr_ps_val;
  reg rfr_req;
  wire rst;


  assign ps_cnt_clr = ((ps_cnt == rfr_ps_val) & (rfr_ps_val != 8'h00));

  always @(posedge rst or posedge clk) if (rst) rfr_en <= #(1) 1'b0;
  else rfr_en <= #(1) (|cs_need_rfr);

  always @(posedge rst or posedge clk) if (rst) ps_cnt <= #(1) 8'h00;
  else if (ps_cnt_clr) ps_cnt <= #(1) 8'h00;
  else if (rfr_en) ps_cnt <= #(1) (ps_cnt + 8'h01);

  always @(posedge rst or posedge clk) if (rst) rfr_early <= #(1) 1'b0;
  else rfr_early <= #(1) (ps_cnt == rfr_ps_val);

  always @(posedge rst or posedge clk) if (rst) rfr_ce <= #(1) 1'b0;
  else rfr_ce <= #(1) ps_cnt_clr;

  always @(posedge rst or posedge clk) if (rst) rfr_cnt <= #(1) 8'h00;
  else if (rfr_ack) rfr_cnt <= #(1) 8'h00;
  else if (rfr_ce) rfr_cnt <= #(1) (rfr_cnt + 8'h01);

  always @(posedge clk) case (ref_int)
    3'h0: rfr_clr <= #(1) (rfr_cnt[0] & rfr_early);
    3'h1: rfr_clr <= #(1) ((&rfr_cnt[1:0]) & rfr_early);
    3'h2: rfr_clr <= #(1) ((&rfr_cnt[2:0]) & rfr_early);
    3'h3: rfr_clr <= #(1) ((&rfr_cnt[3:0]) & rfr_early);
    3'h4: rfr_clr <= #(1) ((&rfr_cnt[4:0]) & rfr_early);
    3'h5: rfr_clr <= #(1) ((&rfr_cnt[5:0]) & rfr_early);
    3'h6: rfr_clr <= #(1) ((&rfr_cnt[6:0]) & rfr_early);
    3'h7: rfr_clr <= #(1) ((&rfr_cnt) & rfr_early);
  endcase

  always @(posedge rst or posedge clk) if (rst) rfr_req <= #(1) 1'b0;
  else if (rfr_ack) rfr_req <= #(1) 1'b0;
  else if (rfr_clr) rfr_req <= #(1) 1'b1;
endmodule  /* mc_refresh */

`timescale 1ns/10ps
/* This module was originally defined in file /hpc/home/connect.zzheng989/researchlib/FlattenRTL/tests/regression/memctrl-T100/memctrl.v at line 4903. */
module \mc_timing[mc_top.u5] (clk, rst, wb_cyc_i, wb_stb_i, wb_we_i, wb_read_go, wb_write_go, wb_first, wb_wait, mem_ack, err, susp_req, resume_req, suspended, susp_sel, mc_clk, data_oe, oe_, we_, cas_, ras_, cke_, cs_en, wb_cycle, wr_cycle, mc_br, mc_bg, mc_adsc, mc_adv, mc_c_oe, mc_ack, not_mem_cyc, csc, tms, cs, lmr_req, lmr_ack, cs_le_d, cs_le, cmd_a10, row_sel, next_adr, page_size, bank_set, bank_clr, bank_clr_all, bank_open, any_bank_open, row_same, dv, pack_le0, pack_le1, pack_le2, par_err, rfr_req, rfr_ack, init_req, init_ack);
  input clk;
  input rst;
  input wb_cyc_i;
  input wb_stb_i;
  input wb_we_i;
  input wb_read_go;
  input wb_write_go;
  input wb_first;
  input wb_wait;
  output mem_ack;
  output err;
  input susp_req;
  input resume_req;
  output suspended;
  output susp_sel;
  input mc_clk;
  output data_oe;
  output oe_;
  output we_;
  output cas_;
  output ras_;
  output cke_;
  output cs_en;
  output wb_cycle;
  output wr_cycle;
  input mc_br;
  output mc_bg;
  output mc_adsc;
  output mc_adv;
  output mc_c_oe;
  input mc_ack;
  input not_mem_cyc;
  input [31:0] csc;
  input [31:0] tms;
  input [7:0] cs;
  input lmr_req;
  output lmr_ack;
  output cs_le_d;
  output cs_le;
  output cmd_a10;
  output row_sel;
  output next_adr;
  input [10:0] page_size;
  output bank_set;
  output bank_clr;
  output bank_clr_all;
  input bank_open;
  input any_bank_open;
  input row_same;
  output dv;
  output pack_le0;
  output pack_le1;
  output pack_le2;
  input par_err;
  input rfr_req;
  output rfr_ack;
  input init_req;
  output init_ack;

  parameter ACS_RD = 66'h00000001000000000;
  parameter ACS_RD1 = 66'h00000002000000000;
  parameter ACS_RD2 = 66'h00000008000000000;
  parameter ACS_RD2A = 66'h00000004000000000;
  parameter ACS_RD3 = 66'h00000010000000000;
  parameter ACS_RD_8_1 = 66'h00000020000000000;
  parameter ACS_RD_8_2 = 66'h00000040000000000;
  parameter ACS_RD_8_3 = 66'h00000080000000000;
  parameter ACS_RD_8_4 = 66'h00000100000000000;
  parameter ACS_RD_8_5 = 66'h00000200000000000;
  parameter ACS_RD_8_6 = 66'h00000400000000000;
  parameter ACS_WR = 66'h00000800000000000;
  parameter ACS_WR1 = 66'h00001000000000000;
  parameter ACS_WR2 = 66'h00002000000000000;
  parameter ACS_WR3 = 66'h00004000000000000;
  parameter ACS_WR4 = 66'h00008000000000000;
  parameter ACTIVATE = 66'h00000000000000040;
  parameter ACTIVATE_W = 66'h00000000000000080;
  parameter BG0 = 66'h00000000200000000;
  parameter BG1 = 66'h00000000400000000;
  parameter BG2 = 66'h00000000800000000;
  parameter BT = 66'h00000000000008000;
  parameter BT_W = 66'h00000000000010000;
  parameter IDLE = 66'h00000000000000002;
  parameter IDLE_T = 66'h00000000000000004;
  parameter IDLE_T2 = 66'h00000000000000008;
  parameter INIT = 66'h00000000000400000;
  parameter INIT0 = 66'h00000000000200000;
  parameter INIT_LMR = 66'h00000000004000000;
  parameter INIT_REFR1 = 66'h00000000001000000;
  parameter INIT_REFR1_W = 66'h00000000002000000;
  parameter INIT_W = 66'h00000000000800000;
  parameter LMR0 = 66'h00000000000040000;
  parameter LMR1 = 66'h00000000000080000;
  parameter LMR2 = 66'h00000000000100000;
  parameter POR = 66'h00000000000000001;
  parameter PRECHARGE = 66'h00000000000000010;
  parameter PRECHARGE_W = 66'h00000000000000020;
  parameter REFR = 66'h00000000000020000;
  parameter RESUME1 = 66'h00000000080000000;
  parameter RESUME2 = 66'h00000000100000000;
  parameter SCS_ERR = 66'h20000000000000000;
  parameter SCS_RD = 66'h01000000000000000;
  parameter SCS_RD1 = 66'h02000000000000000;
  parameter SCS_RD2 = 66'h04000000000000000;
  parameter SCS_WR = 66'h08000000000000000;
  parameter SCS_WR1 = 66'h10000000000000000;
  parameter SD_RD = 66'h00000000000000200;
  parameter SD_RD_LOOP = 66'h00000000000000800;
  parameter SD_RD_W = 66'h00000000000000400;
  parameter SD_RD_W2 = 66'h00000000000001000;
  parameter SD_RD_WR = 66'h00000000000000100;
  parameter SD_WR = 66'h00000000000002000;
  parameter SD_WR_W = 66'h00000000000004000;
  parameter SRAM_RD = 66'h00010000000000000;
  parameter SRAM_RD0 = 66'h00020000000000000;
  parameter SRAM_RD1 = 66'h00040000000000000;
  parameter SRAM_RD2 = 66'h00080000000000000;
  parameter SRAM_RD3 = 66'h00100000000000000;
  parameter SRAM_RD4 = 66'h00200000000000000;
  parameter SRAM_WR = 66'h00400000000000000;
  parameter SRAM_WR0 = 66'h00800000000000000;
  parameter SUSP1 = 66'h00000000008000000;
  parameter SUSP2 = 66'h00000000010000000;
  parameter SUSP3 = 66'h00000000020000000;
  parameter SUSP4 = 66'h00000000040000000;

  reg [3:0] ack_cnt;
  wire ack_cnt_is_0;
  wire any_bank_open;
  reg ap_en;
  reg bank_clr;
  reg bank_clr_all;
  wire bank_open;
  reg bank_set;
  wire bc_dec;
  wire burst_act;
  reg burst_act_rd;
  reg [10:0] burst_cnt;
  reg burst_cnt_ld;
  reg burst_cnt_ld_4;
  reg burst_fp;
  reg [10:0] burst_val;
  wire [1:0] bus_width;
  wire bw16;
  wire bw8;
  wire cas_;
  reg cke_;
  reg cke_d;
  reg cke_o_del;
  reg cke_o_r1;
  reg cke_o_r2;
  reg cke_r;
  reg cke_rd;
  wire clk;
  reg [3:0] cmd;
  reg cmd_a10;
  reg cmd_a10_r;
  reg cmd_asserted;
  reg cmd_asserted2;
  reg [3:0] cmd_del;
  reg [3:0] cmd_r;
  reg cnt;
  reg cnt_next;
  wire [7:0] cs;
  wire cs_a;
  wire cs_en;
  reg cs_le;
  reg cs_le_d;
  reg cs_le_r;
  reg cs_le_r1;
  wire [31:0] csc;
  reg data_oe;
  reg data_oe_d;
  reg data_oe_r;
  reg data_oe_r2;
  reg dv;
  reg dv_r;
  wire err;
  reg err_d;
  reg init_ack;
  wire init_req;
  reg [3:0] ir_cnt;
  reg ir_cnt_dec;
  reg ir_cnt_done;
  reg ir_cnt_ld;
  wire kro;
  reg lmr_ack;
  reg lmr_ack_d;
  wire lmr_req;
  reg lookup_ready1;
  reg lookup_ready1a;
  reg lookup_ready2;
  wire mc_ack;
  reg mc_adsc;
  reg mc_adv;
  reg mc_adv_r;
  reg mc_adv_r1;
  reg mc_bg;
  wire mc_br;
  reg mc_c_oe;
  reg mc_c_oe_d;
  wire mc_clk;
  reg mc_le;
  wire mem_ack;
  reg mem_ack_d;
  reg mem_ack_r;
  wire mem_ack_s;
  wire [2:0] mem_type;
  reg next_adr;
  reg [65:0] next_state;
  reg no_wb_cycle;
  wire not_mem_cyc;
  reg oe_;
  reg oe_d;
  reg pack_le0;
  reg pack_le0_d;
  reg pack_le1;
  reg pack_le1_d;
  reg pack_le2;
  reg pack_le2_d;
  wire [10:0] page_size;
  wire par_err;
  wire ras_;
  wire resume_req;
  reg resume_req_r;
  wire rfr_ack;
  reg rfr_ack_d;
  reg rfr_ack_r;
  wire rfr_req;
  wire row_same;
  reg row_sel;
  wire rst;
  reg rsts;
  reg rsts1;
  wire single_write;
  reg [65:0] state;
  wire susp_req;
  reg susp_req_r;
  wire susp_sel;
  reg susp_sel_clr;
  reg susp_sel_r;
  reg susp_sel_set;
  reg suspended;
  reg suspended_d;
  wire [3:0] temp_cs;
  reg [7:0] timer;
  reg [8:0] timer2;
  wire timer2_is_zero;
  wire timer_is_zero;
  reg tmr2_done;
  reg tmr2_ld_trdv;
  reg tmr2_ld_trdz;
  reg tmr2_ld_tscsto;
  reg tmr2_ld_tsrdv;
  reg tmr2_ld_twd;
  reg tmr2_ld_twpw;
  reg tmr2_ld_twwd;
  reg tmr_done;
  reg tmr_ld_tavav;
  reg tmr_ld_tcl;
  reg tmr_ld_trcd;
  reg tmr_ld_trdv;
  reg tmr_ld_trdz;
  reg tmr_ld_trfc;
  reg tmr_ld_trp;
  reg tmr_ld_twr;
  reg tmr_ld_twr2;
  reg tmr_ld_txsr;
  wire [31:0] tms;
  wire [31:0] tms_x;
  wire twd_is_zero;
  wire [3:0] twrp;
  wire wb_cyc_i;
  reg wb_cycle;
  reg wb_cycle_set;
  wire wb_first;
  wire wb_read_go;
  reg wb_stb_first;
  wire wb_stb_i;
  wire wb_wait;
  reg wb_wait_r;
  reg wb_wait_r2;
  wire wb_we_i;
  wire wb_write_go;
  reg wb_write_go_r;
  wire we_;
  reg wr_clr;
  reg wr_cycle;
  reg wr_set;


  assign mem_type = csc[3:1];
  assign bus_width = csc[5:4];
  assign kro = csc[10];
  assign bw8 = (bus_width == 2'h0);
  assign bw16 = (bus_width == 2'h1);
  assign cs_a = (|cs);
  assign temp_cs = (wr_cycle ? cmd_del : cmd);
  assign cs_en = temp_cs[3];
  assign ras_ = temp_cs[2];
  assign cas_ = temp_cs[1];
  assign we_ = temp_cs[0];
  assign ack_cnt_is_0 = (ack_cnt == 4'h0);
  assign tms_x = ((((rfr_ack_d | rfr_ack_r) | susp_sel) | (~|mc_c_oe)) ? 32'hffffffff : tms);
  assign twd_is_zero = (tms_x[19:16] == 4'h0);
  assign timer2_is_zero = (timer2 == 9'h000);
  assign twrp = ({2'h0, tms_x[16:15]} + tms_x[23:20]);
  assign timer_is_zero = (timer == 8'h00);
  assign bc_dec = (wr_cycle ? mem_ack_d : dv);
  assign single_write = (tms[9] | (tms[2:0] == 3'h0));
  assign rfr_ack = rfr_ack_r;
  assign mem_ack = ((mem_ack_d | mem_ack_s) & (wb_read_go | wb_write_go));
  assign err = err_d;
  assign mem_ack_s = (((((ack_cnt != 4'h0) & (~|wb_wait)) & (~|mem_ack_r)) & wb_read_go) & (~|(wb_we_i & wb_stb_i)));
  assign susp_sel = susp_sel_r;
  assign burst_act = ((|burst_cnt) & (|tms_x[2:0]));

  always @(posedge clk) lmr_ack <= #(1) lmr_ack_d;

  always @(posedge clk) cs_le_r <= #(1) cs_le_r1;

  always @(posedge clk) cs_le_r1 <= #(1) cs_le;

  always @(posedge clk) cs_le <= #(1) cs_le_d;

  always @(posedge rst or posedge mc_clk) if (rst) rsts1 <= #(1) 1'b1;
  else rsts1 <= #(1) 1'b0;

  always @(posedge rst or posedge clk) if (rst) rsts <= #(1) 1'b1;
  else rsts <= #(1) rsts1;

  always @(posedge rst or posedge clk) if (rst) mc_c_oe <= #(1) 1'b0;
  else mc_c_oe <= #(1) mc_c_oe_d;

  always @(posedge rsts or posedge clk) if (rsts) mc_le <= #(1) 1'b0;
  else mc_le <= #(1) (~mc_le);

  always @(posedge clk) pack_le0 <= #(1) pack_le0_d;

  always @(posedge clk) pack_le1 <= #(1) pack_le1_d;

  always @(posedge clk) pack_le2 <= #(1) pack_le2_d;

  always @(posedge rst or posedge clk) if (rst) mc_adv_r1 <= #(1) 1'b0;
  else if ((!mc_le)) mc_adv_r1 <= #(1) mc_adv;

  always @(posedge rst or posedge clk) if (rst) mc_adv_r <= #(1) 1'b0;
  else if ((!mc_le)) mc_adv_r <= #(1) mc_adv_r1;

  always @(posedge rst or posedge clk) if (rst) mem_ack_r <= #(1) 1'b0;
  else mem_ack_r <= #(1) mem_ack;

  always @(posedge rst or posedge clk) if (rst) cmd_r <= #(1) 4'h7;
  else cmd_r <= #(1) cmd;

  always @(posedge rst or posedge clk) if (rst) cmd_del <= #(1) 4'h7;
  else cmd_del <= #(1) cmd_r;

  always @(posedge rst or posedge clk) if (rst) cmd_asserted <= #(1) 1'b0;
  else if ((!mc_le)) cmd_asserted <= #(1) cmd[3];

  always @(posedge rst or posedge clk) if (rst) cmd_asserted2 <= #(1) 1'b0;
  else if ((!mc_le)) cmd_asserted2 <= #(1) cmd_asserted;

  always @(posedge rst or posedge clk) if (rst) oe_ <= #(1) 1'b1;
  else oe_ <= #(1) (~oe_d);

  always @(posedge rst or posedge clk) if (rst) data_oe_r <= #(1) 1'b0;
  else data_oe_r <= #(1) data_oe_d;

  always @(posedge rst or posedge clk) if (rst) data_oe_r2 <= #(1) 1'b0;
  else data_oe_r2 <= #(1) data_oe_r;

  always @(posedge rst or posedge clk) if (rst) data_oe <= #(1) 1'b0;
  else data_oe <= #(1) (wr_cycle ? data_oe_r2 : data_oe_d);

  always @(posedge clk) cke_r <= #(1) cke_d;

  always @(posedge clk) cke_ <= #(1) (cke_r & cke_rd);

  always @(posedge clk) cke_o_r1 <= #(1) cke_;

  always @(posedge clk) cke_o_r2 <= #(1) cke_o_r1;

  always @(posedge clk) cke_o_del <= #(1) cke_o_r2;

  always @(posedge clk) wb_wait_r2 <= #(1) wb_wait;

  always @(posedge clk) wb_wait_r <= #(1) wb_wait_r2;

  always @(posedge rst or posedge clk) if (rst) lookup_ready1 <= #(1) 1'b0;
  else lookup_ready1 <= #(1) ((cs_le & wb_cyc_i) & wb_stb_i);

  always @(posedge rst or posedge clk) if (rst) lookup_ready2 <= #(1) 1'b0;
  else lookup_ready2 <= #(1) ((lookup_ready1 & wb_cyc_i) & wb_stb_i);

  always @(posedge rst or posedge clk) if (rst) wr_cycle <= #(1) 1'b0;
  else if (wr_set) wr_cycle <= #(1) 1'b1;
  else if (wr_clr) wr_cycle <= #(1) 1'b0;

  always @(posedge rst or posedge clk) if (rst) wb_cycle <= #(1) 1'b0;
  else if (wb_cycle_set) wb_cycle <= #(1) 1'b1;
  else if (((!wb_cyc_i) | not_mem_cyc)) wb_cycle <= #(1) 1'b0;

  always @(posedge rst or posedge clk) if (rst) no_wb_cycle <= #(1) 1'b0;
  else no_wb_cycle <= #(1) ((!wb_read_go) & (!wb_write_go));

  always @(posedge rst or posedge clk) if (rst) ack_cnt <= #(1) 4'h0;
  else if (no_wb_cycle) ack_cnt <= #(1) 4'h0;
  else if ((dv & (!mem_ack_s))) ack_cnt <= #(1) (ack_cnt + 4'h1);
  else if (((!dv) & mem_ack_s)) ack_cnt <= #(1) (ack_cnt - 4'h1);

  always @(posedge clk) cnt <= #(1) cnt_next;

  always @(posedge rst or posedge clk) if (rst) susp_req_r <= #(1) 1'b0;
  else susp_req_r <= #(1) susp_req;

  always @(posedge rst or posedge clk) if (rst) resume_req_r <= #(1) 1'b0;
  else resume_req_r <= #(1) resume_req;

  always @(posedge rst or posedge clk) if (rst) suspended <= #(1) 1'b0;
  else suspended <= #(1) suspended_d;

  always @(posedge rst or posedge clk) if (rst) rfr_ack_r <= #(1) 1'b0;
  else rfr_ack_r <= #(1) rfr_ack_d;

  always @(posedge rst or posedge clk) if (rst) susp_sel_r <= #(1) 1'b0;
  else if (susp_sel_set) susp_sel_r <= #(1) 1'b1;
  else if (susp_sel_clr) susp_sel_r <= #(1) 1'b0;

  always @(posedge clk) if (tmr2_ld_tscsto) timer2 <= #(1) tms_x[24:16];
  else if (tmr2_ld_tsrdv) timer2 <= #(1) 9'h004;
  else if (tmr2_ld_twpw) timer2 <= #(1) {5'h00, tms_x[15:12]};
  else if (tmr2_ld_twd) timer2 <= #(1) {4'h0, tms_x[19:16], 1'b0};
  else if (tmr2_ld_twwd) timer2 <= #(1) {3'h0, tms_x[25:20]};
  else if (tmr2_ld_trdz) timer2 <= #(1) {4'h0, tms_x[11:8], 1'b1};
  else if (tmr2_ld_trdv) timer2 <= #(1) {tms_x[7:0], 1'b1};
  else if ((!timer2_is_zero)) timer2 <= #(1) (timer2 - 9'h001);

  always @(posedge rst or posedge clk) if (rst) tmr2_done <= #(1) 1'b0;
  else tmr2_done <= #(1) ((((((timer2_is_zero & (!tmr2_ld_trdv)) & (!tmr2_ld_trdz)) & (!tmr2_ld_twpw)) & (!tmr2_ld_twd)) & (!tmr2_ld_twwd)) & (!tmr2_ld_tscsto));

  always @(posedge rst or posedge clk) if (rst) timer <= #(1) 8'hfa;
  else if (tmr_ld_twr2) timer <= #(1) {4'h0, tms_x[15:12]};
  else if (tmr_ld_trdz) timer <= #(1) {4'h0, tms_x[11:8]};
  else if (tmr_ld_trdv) timer <= #(1) tms_x[7:0];
  else if (tmr_ld_twr) timer <= #(1) {4'h0, twrp};
  else if (tmr_ld_trp) timer <= #(1) {4'h0, tms_x[23:20]};
  else if (tmr_ld_trcd) timer <= #(1) {5'h00, tms_x[19:17]};
  else if (tmr_ld_tcl) timer <= #(1) {6'h00, tms_x[5:4]};
  else if (tmr_ld_trfc) timer <= #(1) {4'h0, tms_x[27:24]};
  else if (tmr_ld_tavav) timer <= #(1) 8'h03;
  else if (tmr_ld_txsr) timer <= #(1) 8'h07;
  else if (((!timer_is_zero) & (!mc_le))) timer <= #(1) (timer - 8'h01);

  always @(posedge rst or posedge clk) if (rst) tmr_done <= #(1) 1'b0;
  else tmr_done <= #(1) timer_is_zero;

  always @(posedge clk) if (ir_cnt_ld) ir_cnt <= #(1) 2;
  else if (ir_cnt_dec) ir_cnt <= #(1) (ir_cnt - 4'h1);

  always @(posedge clk) ir_cnt_done <= #(1) (ir_cnt == 4'h0);

  always @(page_size or tms_x) case (tms_x[2:0])
    3'h0: burst_val = 11'h001;
    3'h1: burst_val = 11'h002;
    3'h2: burst_val = 11'h004;
    3'h3: burst_val = 11'h008;
    3'h7: burst_val = page_size;
  endcase

  always @(posedge clk) if (burst_cnt_ld_4) burst_cnt <= #(1) 11'h004;
  else if (burst_cnt_ld) burst_cnt <= #(1) burst_val;
  else if (bc_dec) burst_cnt <= #(1) (burst_cnt - 11'h001);

  always @(posedge rst or posedge clk) if (rst) burst_fp <= #(1) 1'b0;
  else if (burst_cnt_ld) burst_fp <= #(1) (tms_x[2:0] == 3'h7);

  always @(posedge rst or posedge clk) if (rst) ap_en <= #(1) 1'b0;
  else if (burst_cnt_ld) ap_en <= #(1) ((tms_x[2:0] == 3'h0) & (!kro));

  always @(posedge clk) burst_act_rd <= #(1) (|burst_cnt);

  always @(posedge rst or posedge clk) if (rst) dv_r <= #(1) 1'b0;
  else dv_r <= #(1) dv;

  always @(posedge clk) cmd_a10_r <= #(1) cmd_a10;

  always @(posedge clk) wb_write_go_r <= #(1) wb_write_go;

  always @(posedge rst or posedge clk) if (rst) wb_stb_first <= #(1) 1'b0;
  else if (mem_ack) wb_stb_first <= #(1) 1'b0;
  else if ((wb_first & wb_stb_i)) wb_stb_first <= #(1) 1'b1;

  always @(posedge rst or posedge clk) if (rst) state <= #(1) POR;
  else state <= #(1) next_state;

  always @(ap_en or wb_stb_first or mc_ack or mc_adv_r or dv_r or bw16 or bw8 or mc_br or resume_req_r or susp_req_r or rfr_ack_r or init_req or lmr_req or rfr_req or cke_o_del or cke_r or cke_ or burst_fp or burst_act_rd or burst_act or cmd_asserted2 or ir_cnt_done or tmr2_done or tmr_done or cmd_asserted or single_write or bank_open or cmd_a10_r or row_same or lookup_ready2 or kro or mem_type or wr_cycle or wb_cycle or cnt or wb_wait_r or ack_cnt_is_0 or wb_we_i or mem_ack_r or wb_wait or wb_write_go or wb_read_go or wb_first or wb_write_go_r or wb_stb_i or twd_is_zero or cs_le_r or cs_le or cs_a or state) begin
    next_state = state;
    cnt_next = 1'b0;
    cmd = 4'h7;
    cmd_a10 = ap_en;
    oe_d = 1'b0;
    data_oe_d = 1'b0;
    cke_d = 1'b1;
    cke_rd = 1'b1;
    mc_adsc = 1'b0;
    mc_adv = 1'b0;
    bank_set = 1'b0;
    bank_clr = 1'b0;
    bank_clr_all = 1'b0;
    burst_cnt_ld = 1'b0;
    burst_cnt_ld_4 = 1'b0;
    tmr_ld_trp = 1'b0;
    tmr_ld_trcd = 1'b0;
    tmr_ld_tcl = 1'b0;
    tmr_ld_trfc = 1'b0;
    tmr_ld_twr = 1'b0;
    tmr_ld_txsr = 1'b0;
    tmr_ld_trdv = 1'b0;
    tmr_ld_trdz = 1'b0;
    tmr_ld_twr2 = 1'b0;
    tmr_ld_tavav = 1'b0;
    tmr2_ld_trdv = 1'b0;
    tmr2_ld_trdz = 1'b0;
    tmr2_ld_twpw = 1'b0;
    tmr2_ld_twd = 1'b0;
    tmr2_ld_twwd = 1'b0;
    tmr2_ld_tsrdv = 1'b0;
    tmr2_ld_tscsto = 1'b0;
    mem_ack_d = 1'b0;
    err_d = 1'b0;
    rfr_ack_d = 1'b0;
    lmr_ack_d = 1'b0;
    init_ack = 1'b0;
    ir_cnt_dec = 1'b0;
    ir_cnt_ld = 1'b0;
    row_sel = 1'b0;
    cs_le_d = 1'b0;
    wr_clr = 1'b0;
    wr_set = 1'b0;
    wb_cycle_set = 1'b0;
    dv = 1'b0;
    suspended_d = 1'b0;
    susp_sel_set = 1'b0;
    susp_sel_clr = 1'b0;
    mc_bg = 1'b0;
    next_adr = 1'b0;
    pack_le0_d = 1'b0;
    pack_le1_d = 1'b0;
    pack_le2_d = 1'b0;
    mc_c_oe_d = 1'b1;
    case (state)
      POR: if (tmr_done) next_state = IDLE;
      IDLE: begin
        cs_le_d = wb_stb_first;
        burst_cnt_ld = 1'b1;
        wr_clr = 1'b1;
        if ((mem_type == 3'h3)) tmr2_ld_tscsto = 1'b1;
        if ((mem_type == 3'h1)) tmr2_ld_tsrdv = 1'b1;
        if (rfr_req) begin
          rfr_ack_d = 1'b1;
          next_state = PRECHARGE;
        end
        else if (init_req) begin
          cs_le_d = 1'b1;
          next_state = INIT0;
        end
        else if ((lmr_req & lookup_ready2)) begin
          lmr_ack_d = 1'b1;
          cs_le_d = 1'b1;
          next_state = LMR0;
        end
        else if ((susp_req_r & (!wb_cycle))) begin
          cs_le_d = 1'b1;
          susp_sel_set = 1'b1;
          next_state = SUSP1;
        end
        else if (((cs_a & (wb_read_go | wb_write_go)) & lookup_ready2)) begin
          wb_cycle_set = 1'b1;
          case (mem_type)
            3'h0: if ((lookup_ready2 & (!wb_wait))) begin
              if ((wb_write_go | (wb_we_i & wb_stb_i))) wr_set = 1'b1;
              if (((kro & bank_open) & row_same)) next_state = SD_RD_WR;
              else if ((kro & bank_open)) next_state = PRECHARGE;
              else next_state = ACTIVATE;
            end
            3'h2: if ((!wb_wait)) begin
              cs_le_d = 1'b1;
              if (wb_write_go) begin
                data_oe_d = 1'b1;
                next_state = ACS_WR;
              end
              else next_state = ACS_RD;
            end
            3'h3: if ((!wb_wait)) begin
              cs_le_d = 1'b1;
              if (wb_write_go) begin
                cmd = 4'he;
                data_oe_d = 1'b1;
                tmr_ld_twr2 = 1'b1;
                next_state = SCS_WR;
              end
              else begin
                cmd = 4'hf;
                oe_d = 1'b1;
                tmr_ld_trdv = 1'b1;
                next_state = SCS_RD;
              end
            end
            3'h1: if ((!wb_wait)) begin
              cs_le_d = 1'b1;
              if (wb_write_go) begin
                data_oe_d = 1'b1;
                mem_ack_d = 1'b1;
                next_state = SRAM_WR;
              end
              else begin
                cmd = 4'hf;
                oe_d = 1'b1;
                mc_adsc = 1'b1;
                next_state = SRAM_RD;
              end
            end
          endcase
        end
        else if (mc_br) if ((!cmd_asserted2)) begin
          next_state = BG0;
          mc_c_oe_d = 1'b0;
        end
      end
      IDLE_T: begin
        cmd_a10 = cmd_a10_r;
        if (((tmr_done & wb_cycle) & (!wb_wait))) cs_le_d = 1'b1;
        if (tmr_done) next_state = IDLE;
      end
      IDLE_T2: if ((tmr2_done & ((!wb_wait) | (!wb_cycle)))) begin
        cs_le_d = wb_cycle;
        if ((cs_le_r | (!wb_cycle))) next_state = IDLE;
      end
      SCS_RD: begin
        cmd = 4'hf;
        oe_d = 1'b1;
        tmr_ld_trdv = 1'b1;
        if (mc_ack) next_state = SCS_RD1;
        else if (tmr2_done) next_state = SCS_ERR;
      end
      SCS_RD1: begin
        cmd = 4'hf;
        oe_d = 1'b1;
        if (tmr_done) begin
          mem_ack_d = 1'b1;
          tmr_ld_trdz = 1'b1;
          next_state = SCS_RD2;
        end
      end
      SCS_RD2: begin
        tmr_ld_trdz = 1'b1;
        next_state = IDLE_T;
      end
      SCS_WR: begin
        tmr_ld_twr2 = 1'b1;
        cmd = 4'he;
        data_oe_d = 1'b1;
        if (mc_ack) next_state = SCS_WR1;
        else if (tmr2_done) next_state = SCS_ERR;
      end
      SCS_WR1: begin
        data_oe_d = 1'b1;
        if (tmr_done) begin
          mem_ack_d = 1'b1;
          next_state = IDLE_T;
        end
        else cmd = 4'he;
      end
      SCS_ERR: begin
        mem_ack_d = 1'b1;
        err_d = 1'b1;
        next_state = IDLE_T2;
      end
      SRAM_RD: begin
        cmd = 4'hf;
        oe_d = 1'b1;
        mc_adsc = 1'b1;
        tmr2_ld_tsrdv = 1'b1;
        burst_cnt_ld_4 = 1'b1;
        if (cmd_asserted) next_state = SRAM_RD0;
      end
      SRAM_RD0: begin
        mc_adv = 1'b1;
        oe_d = 1'b1;
        if (tmr2_done) begin
          mc_adv = (!wb_wait);
          next_state = SRAM_RD1;
        end
      end
      SRAM_RD1: begin
        if (mc_adv_r) dv = (~dv_r);
        mc_adv = (!wb_wait);
        if (((!burst_act) | (!wb_read_go))) next_state = SRAM_RD2;
        else oe_d = 1'b1;
      end
      SRAM_RD2: if ((ack_cnt_is_0 & wb_read_go)) next_state = SRAM_RD3;
      else if ((!wb_read_go)) begin
        mc_adsc = 1'b1;
        next_state = SRAM_RD4;
      end
      SRAM_RD3: if ((!wb_read_go)) begin
        mc_adsc = 1'b1;
        next_state = SRAM_RD4;
      end
      else if ((!wb_wait)) begin
        cs_le_d = 1'b1;
        next_state = SRAM_RD;
      end
      SRAM_RD4: begin
        if (wb_cycle) cs_le_d = 1'b1;
        mc_adsc = 1'b1;
        next_state = IDLE;
      end
      SRAM_WR: begin
        cmd = 4'he;
        mc_adsc = 1'b1;
        data_oe_d = 1'b1;
        if (cmd_asserted) if (wb_wait) next_state = SRAM_WR0;
        else if ((!wb_write_go)) begin
          mc_adsc = 1'b1;
          next_state = SRAM_RD4;
        end
        else begin
          data_oe_d = 1'b1;
          mem_ack_d = (~mem_ack_r);
        end
      end
      SRAM_WR0: if (wb_wait) next_state = SRAM_WR0;
      else if ((!wb_write_go)) begin
        mc_adsc = 1'b1;
        next_state = SRAM_RD4;
      end
      else begin
        data_oe_d = 1'b1;
        next_state = SRAM_WR;
      end
      ACS_RD: begin
        cmd = 4'hf;
        oe_d = 1'b1;
        tmr2_ld_trdv = 1'b1;
        next_state = ACS_RD1;
      end
      ACS_RD1: begin
        cmd = 4'hf;
        oe_d = 1'b1;
        if (tmr2_done) begin
          if ((bw8 | bw16)) next_adr = 1'b1;
          if (bw8) next_state = ACS_RD_8_1;
          else if (bw16) next_state = ACS_RD_8_5;
          else next_state = ACS_RD2A;
        end
      end
      ACS_RD_8_1: begin
        pack_le0_d = 1'b1;
        cmd = 4'hf;
        oe_d = 1'b1;
        tmr2_ld_trdv = 1'b1;
        next_state = ACS_RD_8_2;
      end
      ACS_RD_8_2: begin
        cmd = 4'hf;
        oe_d = 1'b1;
        if (tmr2_done) begin
          next_adr = 1'b1;
          next_state = ACS_RD_8_3;
        end
      end
      ACS_RD_8_3: begin
        pack_le1_d = 1'b1;
        cmd = 4'hf;
        oe_d = 1'b1;
        tmr2_ld_trdv = 1'b1;
        next_state = ACS_RD_8_4;
      end
      ACS_RD_8_4: begin
        cmd = 4'hf;
        oe_d = 1'b1;
        if (tmr2_done) begin
          next_adr = 1'b1;
          next_state = ACS_RD_8_5;
        end
      end
      ACS_RD_8_5: begin
        if (bw8) pack_le2_d = 1'b1;
        if (bw16) pack_le0_d = 1'b1;
        cmd = 4'hf;
        oe_d = 1'b1;
        tmr2_ld_trdv = 1'b1;
        next_state = ACS_RD_8_6;
      end
      ACS_RD_8_6: begin
        cmd = 4'hf;
        oe_d = 1'b1;
        if (tmr2_done) next_state = ACS_RD2;
      end
      ACS_RD2A: begin
        oe_d = 1'b1;
        cmd = 4'hf;
        next_state = ACS_RD2;
      end
      ACS_RD2: begin
        cmd = 4'hf;
        next_state = ACS_RD3;
      end
      ACS_RD3: begin
        mem_ack_d = 1'b1;
        tmr2_ld_trdz = 1'b1;
        next_state = IDLE_T2;
      end
      ACS_WR: begin
        tmr2_ld_twpw = 1'b1;
        cmd = 4'he;
        data_oe_d = 1'b1;
        next_state = ACS_WR1;
      end
      ACS_WR1: begin
        if ((!cmd_asserted)) tmr2_ld_twpw = 1'b1;
        cmd = 4'he;
        data_oe_d = 1'b1;
        if (tmr2_done) begin
          tmr2_ld_twd = 1'b1;
          next_state = ACS_WR2;
        end
      end
      ACS_WR2: if (twd_is_zero) next_state = ACS_WR3;
      else begin
        cmd = 4'hf;
        data_oe_d = 1'b1;
        next_state = ACS_WR3;
      end
      ACS_WR3: if (tmr2_done) next_state = ACS_WR4;
      else cmd = 4'hf;
      ACS_WR4: begin
        tmr2_ld_twwd = 1'b1;
        mem_ack_d = 1'b1;
        next_state = IDLE_T2;
      end
      PRECHARGE: begin
        cmd = 4'ha;
        if (rfr_ack_r) begin
          rfr_ack_d = 1'b1;
          cmd_a10 = 1'b1;
          bank_clr_all = 1'b1;
        end
        else begin
          bank_clr = 1'b1;
          cmd_a10 = 1'b0;
        end
        tmr_ld_trp = 1'b1;
        if (cmd_asserted) next_state = PRECHARGE_W;
      end
      PRECHARGE_W: begin
        rfr_ack_d = rfr_ack_r;
        if (tmr_done) if (rfr_ack_r) next_state = REFR;
        else next_state = ACTIVATE;
      end
      ACTIVATE: begin
        if ((!wb_wait_r)) begin
          row_sel = 1'b1;
          tmr_ld_trcd = 1'b1;
          cmd = 4'hb;
        end
        if (cmd_asserted) next_state = ACTIVATE_W;
      end
      ACTIVATE_W: begin
        row_sel = 1'b1;
        if ((wb_write_go | (wb_we_i & wb_stb_i))) wr_set = 1'b1;
        if (kro) bank_set = 1'b1;
        if (tmr_done) if (wb_write_go) begin
          mem_ack_d = (~mem_ack_r);
          cmd_a10 = (ap_en | (single_write & (!kro)));
          next_state = SD_WR;
        end
        else if ((!wb_wait_r)) next_state = SD_RD;
      end
      SD_RD_WR: begin
        if ((wb_write_go | (wb_we_i & wb_stb_i))) wr_set = 1'b1;
        if ((wb_write_go & (!wb_wait))) begin
          data_oe_d = 1'b1;
          mem_ack_d = (~mem_ack_r);
          cmd_a10 = (ap_en | (single_write & (!kro)));
          next_state = SD_WR;
        end
        else if ((!wb_wait)) if (kro) begin
          if ((!wb_wait_r)) next_state = SD_RD;
        end else next_state = SD_RD;
      end
      SD_WR: begin
        data_oe_d = 1'b1;
        tmr_ld_twr = 1'b1;
        cnt_next = (~cnt);
        cmd = 4'hc;
        cmd_a10 = (ap_en | (single_write & (!kro)));
        if ((((!cnt) & wb_cycle) & burst_act)) cke_d = (~wb_wait);
        else cke_d = cke_r;
        if (cmd_asserted) begin
          mem_ack_d = (((((!mem_ack_r) & wb_write_go) & (!wb_wait)) & wb_cycle) & burst_act);
          if ((wb_cycle & (!burst_act))) next_state = IDLE_T;
          else if (wb_write_go) next_state = SD_WR_W;
          else if ((burst_act & (!single_write))) next_state = BT;
          else if ((!ap_en)) next_state = BT_W;
          else next_state = IDLE_T;
        end
      end
      SD_WR_W: begin
        tmr_ld_twr = 1'b1;
        cnt_next = (~cnt);
        if ((single_write & wb_cycle)) cmd = 4'hc;
        cmd_a10 = (ap_en | (single_write & (!kro)));
        data_oe_d = 1'b1;
        mem_ack_d = (((((!mem_ack_r) & wb_write_go) & (!wb_wait)) & wr_cycle) & burst_act);
        if ((!cnt)) cke_d = (~wb_wait);
        else cke_d = cke_r;
        if ((((single_write & cke_r) | (((!single_write) & (!cnt)) & (!wb_wait))) | (((!single_write) & cnt) & cke_r))) if ((single_write & (!wb_cycle))) next_state = IDLE_T;
        else if (((burst_act & (!single_write)) & (!wb_write_go_r))) begin
          cmd = 4'he;
          next_state = BT;
        end
        else if (((!burst_act) & (!ap_en))) next_state = BT_W;
        else if ((!burst_act)) next_state = IDLE_T;
        else if (((!wb_write_go_r) & wb_read_go)) next_state = IDLE_T;
      end
      SD_RD: begin
        cmd = 4'hd;
        cmd_a10 = ap_en;
        tmr_ld_tcl = 1'b1;
        if (cmd_asserted) next_state = SD_RD_W;
      end
      SD_RD_W: if (tmr_done) next_state = SD_RD_LOOP;
      SD_RD_LOOP: begin
        cnt_next = (~cnt);
        if (((cnt & (!(burst_act & (!wb_cycle)))) & burst_act)) cke_rd = (!wb_wait);
        else cke_rd = cke_;
        if ((((wb_cycle & (!cnt)) & burst_act_rd) & cke_o_del)) dv = 1'b1;
        if ((wb_cycle & wb_write_go)) next_state = BT;
        else if ((burst_act & (!wb_cycle))) next_state = BT;
        else if ((!burst_act)) next_state = SD_RD_W2;
      end
      SD_RD_W2: if ((wb_write_go | ack_cnt_is_0)) if (((!ap_en) & (!kro))) next_state = BT_W;
      else if (((!wb_wait) & (!mem_ack_r))) next_state = IDLE_T;
      BT: begin
        cmd = 4'he;
        tmr_ld_trp = 1'b1;
        if (cmd_asserted) next_state = BT_W;
      end
      BT_W: begin
        cmd_a10 = cmd_a10_r;
        if ((kro & tmr_done)) begin
          if (((kro & (!wb_wait)) & (wb_read_go | wb_write_go))) cs_le_d = 1'b1;
          next_state = IDLE;
        end
        else if (((!kro) & tmr_done)) begin
          bank_clr = 1'b1;
          cmd = 4'ha;
          cmd_a10 = 1'b0;
          tmr_ld_trp = 1'b1;
          if (cmd_asserted) next_state = IDLE_T;
        end
      end
      REFR: begin
        cs_le_d = 1'b1;
        cmd = 4'h9;
        tmr_ld_trfc = 1'b1;
        rfr_ack_d = 1'b1;
        if (cmd_asserted) begin
          susp_sel_clr = 1'b1;
          next_state = IDLE_T;
        end
      end
      LMR0: begin
        lmr_ack_d = 1'b1;
        cmd = 4'ha;
        cmd_a10 = 1'b1;
        bank_clr_all = 1'b1;
        tmr_ld_trp = 1'b1;
        if (cmd_asserted) next_state = LMR1;
      end
      LMR1: begin
        lmr_ack_d = 1'b1;
        if (tmr_done) next_state = LMR2;
      end
      LMR2: begin
        bank_clr_all = 1'b1;
        cmd = 4'h8;
        tmr_ld_trfc = 1'b1;
        lmr_ack_d = 1'b1;
        if (cmd_asserted) next_state = IDLE_T;
      end
      INIT0: begin
        cs_le_d = 1'b1;
        next_state = INIT;
      end
      INIT: begin
        init_ack = 1'b1;
        cmd = 4'ha;
        cmd_a10 = 1'b1;
        bank_clr_all = 1'b1;
        tmr_ld_trp = 1'b1;
        ir_cnt_ld = 1'b1;
        if (cmd_asserted) next_state = INIT_W;
      end
      INIT_W: begin
        init_ack = 1'b1;
        if (tmr_done) next_state = INIT_REFR1;
      end
      INIT_REFR1: begin
        init_ack = 1'b1;
        cmd = 4'h9;
        tmr_ld_trfc = 1'b1;
        if (cmd_asserted) begin
          ir_cnt_dec = 1'b1;
          next_state = INIT_REFR1_W;
        end
      end
      INIT_REFR1_W: begin
        init_ack = 1'b1;
        if (tmr_done) if (ir_cnt_done) next_state = INIT_LMR;
        else next_state = INIT_REFR1;
      end
      INIT_LMR: begin
        init_ack = 1'b1;
        cmd = 4'h8;
        bank_clr_all = 1'b1;
        tmr_ld_trfc = 1'b1;
        if (cmd_asserted) next_state = IDLE_T;
      end
      BG0: begin
        mc_bg = 1'b1;
        mc_c_oe_d = 1'b0;
        next_state = BG1;
      end
      BG1: begin
        mc_bg = 1'b1;
        cs_le_d = 1'b1;
        mc_c_oe_d = 1'b0;
        next_state = BG2;
      end
      BG2: begin
        cs_le_d = 1'b1;
        mc_bg = ((((((!wb_read_go) & (!wb_write_go)) & (!rfr_req)) & (!init_req)) & (!lmr_req)) & (!susp_req_r));
        tmr_ld_tavav = 1'b1;
        mc_c_oe_d = mc_br;
        if ((!mc_br)) next_state = IDLE_T;
      end
      SUSP1: begin
        cmd = 4'ha;
        cmd_a10 = 1'b1;
        bank_clr_all = 1'b1;
        tmr_ld_trp = 1'b1;
        if (cmd_asserted) next_state = SUSP2;
      end
      SUSP2: if (tmr_done) next_state = SUSP3;
      SUSP3: begin
        cke_d = 1'b0;
        cmd = 4'h9;
        rfr_ack_d = 1'b1;
        if (cmd_asserted) next_state = SUSP4;
      end
      SUSP4: begin
        cke_rd = 1'b0;
        suspended_d = 1'b1;
        tmr_ld_txsr = 1'b1;
        if (resume_req_r) next_state = RESUME1;
      end
      RESUME1: begin
        suspended_d = 1'b1;
        tmr_ld_txsr = 1'b1;
        next_state = RESUME2;
      end
      RESUME2: begin
        suspended_d = 1'b1;
        if (tmr_done) next_state = REFR;
      end
    endcase
  end
endmodule  /* \mc_timing[mc_top.u5]  */

`timescale 1ns/10ps
/* This module was originally defined in file /hpc/home/connect.zzheng989/researchlib/FlattenRTL/tests/regression/memctrl-T100/memctrl.v at line 7406. */
module mc_wb_if(clk, rst, wb_addr_i, wb_cyc_i, wb_stb_i, wb_we_i, wb_err, wb_ack_o, wb_read_go, wb_write_go, wb_first, wb_wait, mem_ack, wr_hold, err, par_err, wp_err, wb_data_o, mem_dout, rf_dout);
  input clk;
  input rst;
  input [31:0] wb_addr_i;
  input wb_cyc_i;
  input wb_stb_i;
  input wb_we_i;
  output wb_err;
  output wb_ack_o;
  output wb_read_go;
  output wb_write_go;
  output wb_first;
  output wb_wait;
  input mem_ack;
  output wr_hold;
  input err;
  input par_err;
  input wp_err;
  output [31:0] wb_data_o;
  input [31:0] mem_dout;
  input [31:0] rf_dout;

  wire clk;
  wire err;
  wire mem_ack;
  wire [31:0] mem_dout;
  wire mem_sel;
  wire par_err;
  reg read_go_r;
  reg read_go_r1;
  wire [31:0] rf_dout;
  wire rmw;
  reg rmw_en;
  reg rmw_r;
  wire rst;
  reg wb_ack_o;
  wire [31:0] wb_addr_i;
  wire wb_cyc_i;
  reg [31:0] wb_data_o;
  reg wb_err;
  wire wb_err_d;
  wire wb_first;
  reg wb_first_r;
  wire wb_first_set;
  wire wb_read_go;
  wire wb_stb_i;
  wire wb_wait;
  wire wb_we_i;
  wire wb_write_go;
  wire wp_err;
  reg wr_hold;
  reg write_go_r;
  reg write_go_r1;


  assign mem_sel = (wb_addr_i[31:29] == 3'h0);
  assign rmw = (rmw_r | (((((~|wr_hold) & wb_we_i) & wb_cyc_i) & wb_stb_i) & rmw_en));
  assign wb_read_go = (((~|rmw) & read_go_r1) & wb_cyc_i);
  assign wb_write_go = ((((~|rmw) & write_go_r1) & wb_cyc_i) & ((wb_we_i & wb_stb_i) | (~|wb_stb_i)));
  assign wb_first_set = (((mem_sel & wb_cyc_i) & wb_stb_i) & (~|(read_go_r | write_go_r)));
  assign wb_first = (wb_first_set | ((wb_first_r & (~|wb_ack_o)) & (~|wb_err)));
  assign wb_err_d = ((wb_cyc_i & wb_stb_i) & ((par_err | err) | wp_err));
  assign wb_wait = ((wb_cyc_i & (~|wb_stb_i)) & (wb_write_go | wb_read_go));

  always @(posedge rst or posedge clk) if (rst) rmw_en <= #(1) 1'b0;
  else if (wb_ack_o) rmw_en <= #(1) 1'b1;
  else if ((!wb_cyc_i)) rmw_en <= #(1) 1'b0;

  always @(posedge rst or posedge clk) if (rst) rmw_r <= #(1) 1'b0;
  else rmw_r <= #(1) (((((!wr_hold) & wb_we_i) & wb_cyc_i) & wb_stb_i) & rmw_en);

  always @(posedge rst or posedge clk) if (rst) read_go_r1 <= #(1) 1'b0;
  else read_go_r1 <= #(1) (((!rmw) & wb_cyc_i) & (((wb_stb_i & mem_sel) & (!wb_we_i)) | read_go_r));

  always @(posedge rst or posedge clk) if (rst) read_go_r <= #(1) 1'b0;
  else read_go_r <= #(1) (read_go_r1 & wb_cyc_i);

  always @(posedge rst or posedge clk) if (rst) write_go_r1 <= #(1) 1'b0;
  else write_go_r1 <= #(1) (wb_cyc_i & (((wb_stb_i & mem_sel) & wb_we_i) | write_go_r));

  always @(posedge rst or posedge clk) if (rst) write_go_r <= #(1) 1'b0;
  else write_go_r <= #(1) ((write_go_r1 & wb_cyc_i) & ((wb_we_i & wb_stb_i) | (!wb_stb_i)));

  always @(posedge rst or posedge clk) if (rst) wb_first_r <= #(1) 1'b0;
  else if (wb_first_set) wb_first_r <= #(1) 1'b1;
  else if ((wb_ack_o | wb_err)) wb_first_r <= #(1) 1'b0;

  always @(posedge rst or posedge clk) if (rst) wr_hold <= #(1) 1'b0;
  else if ((wb_cyc_i & wb_stb_i)) wr_hold <= #(1) wb_we_i;

  always @(posedge rst or posedge clk) if (rst) wb_ack_o <= #(1) 1'b0;
  else wb_ack_o <= #(1) ((wb_addr_i[31:29] == 3'h0) ? (mem_ack & (!wb_err_d)) : ((((wb_addr_i[31:29] == 3'h3) & wb_cyc_i) & wb_stb_i) & (!wb_ack_o)));

  always @(posedge rst or posedge clk) if (rst) wb_err <= #(1) 1'b0;
  else wb_err <= #(1) (((wb_addr_i[31:29] == 3'h0) & wb_err_d) & (!wb_err));

  always @(posedge clk) wb_data_o <= #(1) ((wb_addr_i[31:29] == 3'h0) ? mem_dout : rf_dout);
endmodule  /* mc_wb_if */

`timescale 1ns/10ps
/* This module was originally defined in file /hpc/home/connect.zzheng989/researchlib/FlattenRTL/tests/regression/memctrl-T100/memctrl.v at line 1903. */
module mc_mem_if(clk, rst, mc_clk, mc_br, mc_bg, mc_addr, mc_data_o, mc_dp_o, mc_data_oe, mc_dqm, mc_oe_, mc_we_, mc_cas_, mc_ras_, mc_cke_, mc_cs_, mc_adsc_, mc_adv_, mc_ack, mc_rp, mc_c_oe, mc_c_oe_d, mc_br_r, mc_bg_d, mc_data_od, mc_dp_od, mc_addr_d, mc_ack_r, we_, ras_, cas_, cke_, mc_adsc_d, mc_adv_d, cs_en, rfr_ack, cs_need_rfr, lmr_sel, spec_req_cs, cs, fs, data_oe, susp_sel, suspended_o, oe_, wb_cyc_i, wb_stb_i, wb_sel_i, wb_cycle, wr_cycle, mc_data_ir, mc_data_i, mc_dp_i, mc_sts_ir, mc_sts_i, mc_zz_o);
  input clk;
  input rst;
  input mc_clk;
  input mc_br;
  output mc_bg;
  output [23:0] mc_addr;
  output [31:0] mc_data_o;
  output [3:0] mc_dp_o;
  output mc_data_oe;
  output [3:0] mc_dqm;
  output mc_oe_;
  output mc_we_;
  output mc_cas_;
  output mc_ras_;
  output mc_cke_;
  output [7:0] mc_cs_;
  output mc_adsc_;
  output mc_adv_;
  input mc_ack;
  output mc_rp;
  output mc_c_oe;
  input mc_c_oe_d;
  output mc_br_r;
  input mc_bg_d;
  input [31:0] mc_data_od;
  input [3:0] mc_dp_od;
  input [23:0] mc_addr_d;
  output mc_ack_r;
  input we_;
  input ras_;
  input cas_;
  input cke_;
  input mc_adsc_d;
  input mc_adv_d;
  input cs_en;
  input rfr_ack;
  input [7:0] cs_need_rfr;
  input lmr_sel;
  input [7:0] spec_req_cs;
  input [7:0] cs;
  input fs;
  input data_oe;
  input susp_sel;
  input suspended_o;
  input oe_;
  input wb_cyc_i;
  input wb_stb_i;
  input [3:0] wb_sel_i;
  input wb_cycle;
  input wr_cycle;
  output [35:0] mc_data_ir;
  input [31:0] mc_data_i;
  input [3:0] mc_dp_i;
  output mc_sts_ir;
  input mc_sts_i;
  output mc_zz_o;

  wire cas_;
  wire cke_;
  wire clk;
  wire [7:0] cs;
  wire cs_en;
  wire [7:0] cs_need_rfr;
  wire data_oe;
  wire fs;
  wire lmr_sel;
  wire mc_ack;
  reg mc_ack_r;
  reg [23:0] mc_addr;
  wire [23:0] mc_addr_d;
  reg mc_adsc_;
  wire mc_adsc_d;
  reg mc_adv_;
  wire mc_adv_d;
  reg mc_bg;
  wire mc_bg_d;
  wire mc_br;
  reg mc_br_r;
  reg mc_c_oe;
  wire mc_c_oe_d;
  reg mc_cas_;
  wire mc_cke_;
  wire mc_clk;
  wire [7:0] mc_cs_;
  reg mc_cs_0;
  reg mc_cs_1;
  reg mc_cs_2;
  reg mc_cs_3;
  reg mc_cs_4;
  reg mc_cs_5;
  reg mc_cs_6;
  reg mc_cs_7;
  wire [31:0] mc_data_i;
  reg [35:0] mc_data_ir;
  reg [31:0] mc_data_o;
  wire [31:0] mc_data_od;
  reg mc_data_oe;
  wire [3:0] mc_dp_i;
  reg [3:0] mc_dp_o;
  wire [3:0] mc_dp_od;
  reg [3:0] mc_dqm;
  reg [3:0] mc_dqm_r;
  reg [3:0] mc_dqm_r2;
  reg mc_oe_;
  reg mc_ras_;
  reg mc_rp;
  wire mc_sts_i;
  reg mc_sts_ir;
  reg mc_we_;
  reg mc_zz_o;
  wire oe_;
  wire ras_;
  wire rfr_ack;
  wire rst;
  wire [7:0] spec_req_cs;
  wire susp_sel;
  wire suspended_o;
  wire wb_cyc_i;
  wire wb_cycle;
  wire [3:0] wb_sel_i;
  wire wb_stb_i;
  wire we_;
  wire wr_cycle;


  assign mc_cs_ = {mc_cs_7, mc_cs_6, mc_cs_5, mc_cs_4, mc_cs_3, mc_cs_2, mc_cs_1, mc_cs_0};
  assign mc_cke_ = cke_;

  always @(posedge mc_clk) mc_zz_o <= #(1) suspended_o;

  always @(posedge mc_clk) mc_sts_ir <= #(1) mc_sts_i;

  always @(posedge mc_clk) mc_data_ir <= #(1) {mc_dp_i, mc_data_i};

  always @(posedge mc_clk) mc_c_oe <= #(1) mc_c_oe_d;

  always @(posedge mc_clk) mc_rp <= #(1) ((!suspended_o) & (!fs));

  always @(posedge mc_clk) mc_br_r <= #(1) mc_br;

  always @(posedge mc_clk) mc_ack_r <= #(1) mc_ack;

  always @(posedge mc_clk) mc_bg <= #(1) mc_bg_d;

  always @(posedge rst or posedge mc_clk) if (rst) mc_data_oe <= #(1) 1'b0;
  else mc_data_oe <= #(1) ((data_oe & (!susp_sel)) & mc_c_oe_d);

  always @(posedge mc_clk) mc_data_o <= #(1) mc_data_od;

  always @(posedge mc_clk) mc_dp_o <= #(1) mc_dp_od;

  always @(posedge mc_clk) mc_addr <= #(1) mc_addr_d;

  always @(posedge clk) if ((wb_cyc_i & wb_stb_i)) mc_dqm_r <= #(1) wb_sel_i;

  always @(posedge clk) mc_dqm_r2 <= #(1) mc_dqm_r;

  always @(posedge mc_clk) mc_dqm <= #(1) (susp_sel ? 4'hf : (data_oe ? (~mc_dqm_r2) : ((wb_cycle & (!wr_cycle)) ? 4'h0 : 4'hf)));

  always @(posedge rst or posedge mc_clk) if (rst) mc_oe_ <= #(1) 1'b1;
  else mc_oe_ <= #(1) (oe_ | susp_sel);

  always @(posedge mc_clk) mc_we_ <= #(1) we_;

  always @(posedge mc_clk) mc_cas_ <= #(1) cas_;

  always @(posedge mc_clk) mc_ras_ <= #(1) ras_;

  always @(posedge rst or posedge mc_clk) if (rst) mc_cs_0 <= #(1) 1'b1;
  else mc_cs_0 <= #(1) (~(cs_en & ((rfr_ack | susp_sel) ? cs_need_rfr[0] : (lmr_sel ? spec_req_cs[0] : cs[0]))));

  always @(posedge rst or posedge mc_clk) if (rst) mc_cs_1 <= #(1) 1'b1;
  else mc_cs_1 <= #(1) (~(cs_en & ((rfr_ack | susp_sel) ? cs_need_rfr[1] : (lmr_sel ? spec_req_cs[1] : cs[1]))));

  always @(posedge rst or posedge mc_clk) if (rst) mc_cs_2 <= #(1) 1'b1;
  else mc_cs_2 <= #(1) (~(cs_en & ((rfr_ack | susp_sel) ? cs_need_rfr[2] : (lmr_sel ? spec_req_cs[2] : cs[2]))));

  always @(posedge rst or posedge mc_clk) if (rst) mc_cs_3 <= #(1) 1'b1;
  else mc_cs_3 <= #(1) (~(cs_en & ((rfr_ack | susp_sel) ? cs_need_rfr[3] : (lmr_sel ? spec_req_cs[3] : cs[3]))));

  always @(posedge rst or posedge mc_clk) if (rst) mc_cs_4 <= #(1) 1'b1;
  else mc_cs_4 <= #(1) (~(cs_en & ((rfr_ack | susp_sel) ? cs_need_rfr[4] : (lmr_sel ? spec_req_cs[4] : cs[4]))));

  always @(posedge rst or posedge mc_clk) if (rst) mc_cs_5 <= #(1) 1'b1;
  else mc_cs_5 <= #(1) (~(cs_en & ((rfr_ack | susp_sel) ? cs_need_rfr[5] : (lmr_sel ? spec_req_cs[5] : cs[5]))));

  always @(posedge rst or posedge mc_clk) if (rst) mc_cs_6 <= #(1) 1'b1;
  else mc_cs_6 <= #(1) (~(cs_en & ((rfr_ack | susp_sel) ? cs_need_rfr[6] : (lmr_sel ? spec_req_cs[6] : cs[6]))));

  always @(posedge rst or posedge mc_clk) if (rst) mc_cs_7 <= #(1) 1'b1;
  else mc_cs_7 <= #(1) (~(cs_en & ((rfr_ack | susp_sel) ? cs_need_rfr[7] : (lmr_sel ? spec_req_cs[7] : cs[7]))));

  always @(posedge mc_clk) mc_adsc_ <= #(1) (~mc_adsc_d);

  always @(posedge mc_clk) mc_adv_ <= #(1) (~mc_adv_d);
endmodule  /* mc_mem_if */

`timescale 1ns/10ps
/* This module was originally defined in file /hpc/home/connect.zzheng989/researchlib/FlattenRTL/tests/regression/memctrl-T100/memctrl.v at line 660. */
module \mc_cs_rf[mc_top.u0.u0] (clk, rst, wb_we_i, din, rf_we, addr, csc, tms, poc, csc_mask, cs, wp_err, lmr_req, lmr_ack, init_req, init_ack);
  input clk;
  input rst;
  input wb_we_i;
  input [31:0] din;
  input rf_we;
  input [31:0] addr;
  output [31:0] csc;
  output [31:0] tms;
  input [31:0] poc;
  input [31:0] csc_mask;
  output cs;
  output wp_err;
  output lmr_req;
  input lmr_ack;
  output init_req;
  input init_ack;

  parameter reg_select = 4'h2;
  parameter this_cs = 3'h0;

  wire [31:0] addr;
  reg [6:0] addr_r;
  wire clk;
  wire cs;
  wire cs_d;
  reg [31:0] csc;
  wire [31:0] csc_mask;
  wire [31:0] din;
  wire init_ack;
  reg init_req;
  reg init_req_we;
  reg inited;
  wire lmr_ack;
  reg lmr_req;
  reg lmr_req_we;
  wire [31:0] poc;
  wire rf_we;
  wire rst;
  reg rst_r1;
  reg rst_r2;
  wire sel;
  reg [31:0] tms;
  wire wb_we_i;
  wire wp;
  wire wp_err;


  assign sel = (addr_r[6:3] == 4'h2);
  assign cs_d = (((csc[23:16] & csc_mask[7:0]) == (addr[28:21] & csc_mask[7:0])) & csc[0]);
  assign wp = (wb_we_i & csc[8]);
  assign wp_err = (cs_d & wp);
  assign cs = (cs_d & (~|wp));

  always @(posedge rst or posedge clk) if (rst) rst_r1 <= #(1) 1'b1;
  else rst_r1 <= #(1) 1'b0;

  always @(posedge rst or posedge clk) if (rst) rst_r2 <= #(1) 1'b1;
  else rst_r2 <= #(1) rst_r1;

  always @(posedge clk) addr_r <= #(1) addr[6:0];

  always @(posedge clk) if (rst_r2) csc <= #(1) {26'h0000000, poc[1:0], 1'b0, poc[3:2], (poc[3:2] != 2'h0)};
  else if (((rf_we & sel) & (!addr_r[2]))) csc <= #(1) din;

  always @(posedge clk) if (rst_r2) tms <= #(1) 32'hffffffff;
  else if (((rf_we & sel) & addr_r[2])) tms <= #(1) din;

  always @(posedge rst or posedge clk) if (rst) lmr_req_we <= #(1) 1'b0;
  else lmr_req_we <= #(1) ((rf_we & sel) & addr_r[2]);

  always @(posedge rst or posedge clk) if (rst) lmr_req <= #(1) 1'b0;
  else if ((lmr_req_we & (csc[3:1] == 3'h0))) lmr_req <= #(1) inited;
  else if (lmr_ack) lmr_req <= #(1) 1'b0;

  always @(posedge rst or posedge clk) if (rst) init_req_we <= #(1) 1'b0;
  else init_req_we <= #(1) ((rf_we & sel) & (!addr_r[2]));

  always @(posedge rst or posedge clk) if (rst) init_req <= #(1) 1'b0;
  else if ((((init_req_we & (csc[3:1] == 3'h0)) & csc[0]) & (!inited))) init_req <= #(1) 1'b1;
  else if (init_ack) init_req <= #(1) 1'b0;

  always @(posedge rst or posedge clk) if (rst) inited <= #(1) 1'b0;
  else if (init_ack) inited <= #(1) 1'b1;
endmodule  /* \mc_cs_rf[mc_top.u0.u0]  */

`timescale 1ns/10ps
/* This module was originally defined in file /hpc/home/connect.zzheng989/researchlib/FlattenRTL/tests/regression/memctrl-T100/memctrl.v at line 660. */
module \mc_cs_rf[mc_top.u0.u1] (clk, rst, wb_we_i, din, rf_we, addr, csc, tms, poc, csc_mask, cs, wp_err, lmr_req, lmr_ack, init_req, init_ack);
  input clk;
  input rst;
  input wb_we_i;
  input [31:0] din;
  input rf_we;
  input [31:0] addr;
  output [31:0] csc;
  output [31:0] tms;
  input [31:0] poc;
  input [31:0] csc_mask;
  output cs;
  output wp_err;
  output lmr_req;
  input lmr_ack;
  output init_req;
  input init_ack;

  parameter reg_select = 4'h3;
  parameter this_cs = 3'h1;

  wire [31:0] addr;
  reg [6:0] addr_r;
  wire clk;
  wire cs;
  wire cs_d;
  reg [31:0] csc;
  wire [31:0] csc_mask;
  wire [31:0] din;
  wire init_ack;
  reg init_req;
  reg init_req_we;
  reg inited;
  wire lmr_ack;
  reg lmr_req;
  reg lmr_req_we;
  wire [31:0] poc;
  wire rf_we;
  wire rst;
  reg rst_r1;
  reg rst_r2;
  wire sel;
  reg [31:0] tms;
  wire wb_we_i;
  wire wp;
  wire wp_err;


  assign sel = (addr_r[6:3] == 4'h3);
  assign cs_d = (((csc[23:16] & csc_mask[7:0]) == (addr[28:21] & csc_mask[7:0])) & csc[0]);
  assign wp = (wb_we_i & csc[8]);
  assign wp_err = (cs_d & wp);
  assign cs = (cs_d & (~|wp));

  always @(posedge rst or posedge clk) if (rst) rst_r1 <= #(1) 1'b1;
  else rst_r1 <= #(1) 1'b0;

  always @(posedge rst or posedge clk) if (rst) rst_r2 <= #(1) 1'b1;
  else rst_r2 <= #(1) rst_r1;

  always @(posedge clk) addr_r <= #(1) addr[6:0];

  always @(posedge clk) if (rst_r2) csc <= #(1) 32'h00000000;
  else if (((rf_we & sel) & (!addr_r[2]))) csc <= #(1) din;

  always @(posedge clk) if (rst_r2) tms <= #(1) 32'h00000000;
  else if (((rf_we & sel) & addr_r[2])) tms <= #(1) din;

  always @(posedge rst or posedge clk) if (rst) lmr_req_we <= #(1) 1'b0;
  else lmr_req_we <= #(1) ((rf_we & sel) & addr_r[2]);

  always @(posedge rst or posedge clk) if (rst) lmr_req <= #(1) 1'b0;
  else if ((lmr_req_we & (csc[3:1] == 3'h0))) lmr_req <= #(1) inited;
  else if (lmr_ack) lmr_req <= #(1) 1'b0;

  always @(posedge rst or posedge clk) if (rst) init_req_we <= #(1) 1'b0;
  else init_req_we <= #(1) ((rf_we & sel) & (!addr_r[2]));

  always @(posedge rst or posedge clk) if (rst) init_req <= #(1) 1'b0;
  else if ((((init_req_we & (csc[3:1] == 3'h0)) & csc[0]) & (!inited))) init_req <= #(1) 1'b1;
  else if (init_ack) init_req <= #(1) 1'b0;

  always @(posedge rst or posedge clk) if (rst) inited <= #(1) 1'b0;
  else if (init_ack) inited <= #(1) 1'b1;
endmodule  /* \mc_cs_rf[mc_top.u0.u1]  */

`timescale 1ns/10ps
/* This module was originally defined in file /hpc/home/connect.zzheng989/researchlib/FlattenRTL/tests/regression/memctrl-T100/memctrl.v at line 790. */
module \mc_cs_rf_dummy[mc_top.u0.u2] (clk, rst, wb_we_i, din, rf_we, addr, csc, tms, poc, csc_mask, cs, wp_err, lmr_req, lmr_ack, init_req, init_ack);
  input clk;
  input rst;
  input wb_we_i;
  input [31:0] din;
  input rf_we;
  input [31:0] addr;
  output [31:0] csc;
  output [31:0] tms;
  input [31:0] poc;
  input [31:0] csc_mask;
  output cs;
  output wp_err;
  output lmr_req;
  input lmr_ack;
  output init_req;
  input init_ack;

  parameter this_cs = 3'h2;

  wire [31:0] addr;
  wire clk;
  wire cs;
  wire [31:0] csc;
  wire [31:0] csc_mask;
  wire [31:0] din;
  wire init_ack;
  wire init_req;
  wire lmr_ack;
  wire lmr_req;
  wire [31:0] poc;
  wire rf_we;
  wire rst;
  wire [31:0] tms;
  wire wb_we_i;
  wire wp_err;

  assign cs = 1'b0;
  assign csc = 32'h00000000;
  assign init_req = 1'b0;
  assign lmr_req = 1'b0;
  assign tms = 32'h00000000;
  assign wp_err = 1'b0;

endmodule  /* \mc_cs_rf_dummy[mc_top.u0.u2]  */

`timescale 1ns/10ps
/* This module was originally defined in file /hpc/home/connect.zzheng989/researchlib/FlattenRTL/tests/regression/memctrl-T100/memctrl.v at line 790. */
module \mc_cs_rf_dummy[mc_top.u0.u3] (clk, rst, wb_we_i, din, rf_we, addr, csc, tms, poc, csc_mask, cs, wp_err, lmr_req, lmr_ack, init_req, init_ack);
  input clk;
  input rst;
  input wb_we_i;
  input [31:0] din;
  input rf_we;
  input [31:0] addr;
  output [31:0] csc;
  output [31:0] tms;
  input [31:0] poc;
  input [31:0] csc_mask;
  output cs;
  output wp_err;
  output lmr_req;
  input lmr_ack;
  output init_req;
  input init_ack;

  parameter this_cs = 3'h3;

  wire [31:0] addr;
  wire clk;
  wire cs;
  wire [31:0] csc;
  wire [31:0] csc_mask;
  wire [31:0] din;
  wire init_ack;
  wire init_req;
  wire lmr_ack;
  wire lmr_req;
  wire [31:0] poc;
  wire rf_we;
  wire rst;
  wire [31:0] tms;
  wire wb_we_i;
  wire wp_err;

  assign cs = 1'b0;
  assign csc = 32'h00000000;
  assign init_req = 1'b0;
  assign lmr_req = 1'b0;
  assign tms = 32'h00000000;
  assign wp_err = 1'b0;

endmodule  /* \mc_cs_rf_dummy[mc_top.u0.u3]  */

`timescale 1ns/10ps
/* This module was originally defined in file /hpc/home/connect.zzheng989/researchlib/FlattenRTL/tests/regression/memctrl-T100/memctrl.v at line 790. */
module \mc_cs_rf_dummy[mc_top.u0.u4] (clk, rst, wb_we_i, din, rf_we, addr, csc, tms, poc, csc_mask, cs, wp_err, lmr_req, lmr_ack, init_req, init_ack);
  input clk;
  input rst;
  input wb_we_i;
  input [31:0] din;
  input rf_we;
  input [31:0] addr;
  output [31:0] csc;
  output [31:0] tms;
  input [31:0] poc;
  input [31:0] csc_mask;
  output cs;
  output wp_err;
  output lmr_req;
  input lmr_ack;
  output init_req;
  input init_ack;

  parameter this_cs = 3'h4;

  wire [31:0] addr;
  wire clk;
  wire cs;
  wire [31:0] csc;
  wire [31:0] csc_mask;
  wire [31:0] din;
  wire init_ack;
  wire init_req;
  wire lmr_ack;
  wire lmr_req;
  wire [31:0] poc;
  wire rf_we;
  wire rst;
  wire [31:0] tms;
  wire wb_we_i;
  wire wp_err;

  assign cs = 1'b0;
  assign csc = 32'h00000000;
  assign init_req = 1'b0;
  assign lmr_req = 1'b0;
  assign tms = 32'h00000000;
  assign wp_err = 1'b0;

endmodule  /* \mc_cs_rf_dummy[mc_top.u0.u4]  */

`timescale 1ns/10ps
/* This module was originally defined in file /hpc/home/connect.zzheng989/researchlib/FlattenRTL/tests/regression/memctrl-T100/memctrl.v at line 790. */
module \mc_cs_rf_dummy[mc_top.u0.u5] (clk, rst, wb_we_i, din, rf_we, addr, csc, tms, poc, csc_mask, cs, wp_err, lmr_req, lmr_ack, init_req, init_ack);
  input clk;
  input rst;
  input wb_we_i;
  input [31:0] din;
  input rf_we;
  input [31:0] addr;
  output [31:0] csc;
  output [31:0] tms;
  input [31:0] poc;
  input [31:0] csc_mask;
  output cs;
  output wp_err;
  output lmr_req;
  input lmr_ack;
  output init_req;
  input init_ack;

  parameter this_cs = 3'h5;

  wire [31:0] addr;
  wire clk;
  wire cs;
  wire [31:0] csc;
  wire [31:0] csc_mask;
  wire [31:0] din;
  wire init_ack;
  wire init_req;
  wire lmr_ack;
  wire lmr_req;
  wire [31:0] poc;
  wire rf_we;
  wire rst;
  wire [31:0] tms;
  wire wb_we_i;
  wire wp_err;

  assign cs = 1'b0;
  assign csc = 32'h00000000;
  assign init_req = 1'b0;
  assign lmr_req = 1'b0;
  assign tms = 32'h00000000;
  assign wp_err = 1'b0;

endmodule  /* \mc_cs_rf_dummy[mc_top.u0.u5]  */

`timescale 1ns/10ps
/* This module was originally defined in file /hpc/home/connect.zzheng989/researchlib/FlattenRTL/tests/regression/memctrl-T100/memctrl.v at line 790. */
module \mc_cs_rf_dummy[mc_top.u0.u6] (clk, rst, wb_we_i, din, rf_we, addr, csc, tms, poc, csc_mask, cs, wp_err, lmr_req, lmr_ack, init_req, init_ack);
  input clk;
  input rst;
  input wb_we_i;
  input [31:0] din;
  input rf_we;
  input [31:0] addr;
  output [31:0] csc;
  output [31:0] tms;
  input [31:0] poc;
  input [31:0] csc_mask;
  output cs;
  output wp_err;
  output lmr_req;
  input lmr_ack;
  output init_req;
  input init_ack;

  parameter this_cs = 3'h6;

  wire [31:0] addr;
  wire clk;
  wire cs;
  wire [31:0] csc;
  wire [31:0] csc_mask;
  wire [31:0] din;
  wire init_ack;
  wire init_req;
  wire lmr_ack;
  wire lmr_req;
  wire [31:0] poc;
  wire rf_we;
  wire rst;
  wire [31:0] tms;
  wire wb_we_i;
  wire wp_err;

  assign cs = 1'b0;
  assign csc = 32'h00000000;
  assign init_req = 1'b0;
  assign lmr_req = 1'b0;
  assign tms = 32'h00000000;
  assign wp_err = 1'b0;

endmodule  /* \mc_cs_rf_dummy[mc_top.u0.u6]  */

`timescale 1ns/10ps
/* This module was originally defined in file /hpc/home/connect.zzheng989/researchlib/FlattenRTL/tests/regression/memctrl-T100/memctrl.v at line 790. */
module \mc_cs_rf_dummy[mc_top.u0.u7] (clk, rst, wb_we_i, din, rf_we, addr, csc, tms, poc, csc_mask, cs, wp_err, lmr_req, lmr_ack, init_req, init_ack);
  input clk;
  input rst;
  input wb_we_i;
  input [31:0] din;
  input rf_we;
  input [31:0] addr;
  output [31:0] csc;
  output [31:0] tms;
  input [31:0] poc;
  input [31:0] csc_mask;
  output cs;
  output wp_err;
  output lmr_req;
  input lmr_ack;
  output init_req;
  input init_ack;

  parameter this_cs = 3'h7;

  wire [31:0] addr;
  wire clk;
  wire cs;
  wire [31:0] csc;
  wire [31:0] csc_mask;
  wire [31:0] din;
  wire init_ack;
  wire init_req;
  wire lmr_ack;
  wire lmr_req;
  wire [31:0] poc;
  wire rf_we;
  wire rst;
  wire [31:0] tms;
  wire wb_we_i;
  wire wp_err;

  assign cs = 1'b0;
  assign csc = 32'h00000000;
  assign init_req = 1'b0;
  assign lmr_req = 1'b0;
  assign tms = 32'h00000000;
  assign wp_err = 1'b0;

endmodule  /* \mc_cs_rf_dummy[mc_top.u0.u7]  */

`timescale 1ns/10ps
/* This module was originally defined in file /hpc/home/connect.zzheng989/researchlib/FlattenRTL/tests/regression/memctrl-T100/memctrl.v at line 1650. */
module \mc_incn_r[mc_top.u1.u0] (clk, inc_in, inc_out);
  input clk;
  input [23:0] inc_in;
  output [23:0] inc_out;

  parameter incN_center = 12;
  parameter incN_width = 24;

  wire clk;
  wire [23:0] inc_in;
  wire [11:0] inc_next;
  wire [23:0] inc_out;
  reg [12:0] out_r;
  wire [31:0] tmp_zeros;


  assign tmp_zeros = 32'h00000000;

  assign inc_out = {(inc_in[23:12] + inc_next), out_r};
  assign inc_next = (out_r[12] ? {tmp_zeros[10:0], 1'b1} : {1'b0, tmp_zeros[10:0]});

  always @(posedge clk) out_r <= #(1) ({1'b0, inc_in[11:0]} + {1'b0, tmp_zeros[10:0], 1'b1});
endmodule  /* \mc_incn_r[mc_top.u1.u0]  */

`timescale 1ns/10ps
/* This module was originally defined in file /hpc/home/connect.zzheng989/researchlib/FlattenRTL/tests/regression/memctrl-T100/memctrl.v at line 2957. */
module mc_obct(clk, rst, row_adr, bank_adr, bank_set, bank_clr, bank_clr_all, bank_open, any_bank_open, row_same);
  input clk;
  input rst;
  input [12:0] row_adr;
  input [1:0] bank_adr;
  input bank_set;
  input bank_clr;
  input bank_clr_all;
  output bank_open;
  output any_bank_open;
  output row_same;

  wire any_bank_open;
  reg [12:0] b0_last_row;
  reg [12:0] b1_last_row;
  reg [12:0] b2_last_row;
  reg [12:0] b3_last_row;
  reg bank0_open;
  reg bank1_open;
  reg bank2_open;
  reg bank3_open;
  wire [1:0] bank_adr;
  wire bank_clr;
  wire bank_clr_all;
  reg bank_open;
  wire bank_set;
  wire clk;
  wire row0_same;
  wire row1_same;
  wire row2_same;
  wire row3_same;
  wire [12:0] row_adr;
  reg row_same;
  wire rst;


  assign row0_same = (b0_last_row == row_adr);
  assign row1_same = (b1_last_row == row_adr);
  assign row2_same = (b2_last_row == row_adr);
  assign row3_same = (b3_last_row == row_adr);
  assign any_bank_open = (((bank0_open | bank1_open) | bank2_open) | bank3_open);

  always @(posedge rst or posedge clk) if (rst) bank0_open <= #(1) 1'b0;
  else if (((bank_adr == 2'h0) & bank_set)) bank0_open <= #(1) 1'b1;
  else if (((bank_adr == 2'h0) & bank_clr)) bank0_open <= #(1) 1'b0;
  else if (bank_clr_all) bank0_open <= #(1) 1'b0;

  always @(posedge rst or posedge clk) if (rst) bank1_open <= #(1) 1'b0;
  else if (((bank_adr == 2'h1) & bank_set)) bank1_open <= #(1) 1'b1;
  else if (((bank_adr == 2'h1) & bank_clr)) bank1_open <= #(1) 1'b0;
  else if (bank_clr_all) bank1_open <= #(1) 1'b0;

  always @(posedge rst or posedge clk) if (rst) bank2_open <= #(1) 1'b0;
  else if (((bank_adr == 2'h2) & bank_set)) bank2_open <= #(1) 1'b1;
  else if (((bank_adr == 2'h2) & bank_clr)) bank2_open <= #(1) 1'b0;
  else if (bank_clr_all) bank2_open <= #(1) 1'b0;

  always @(posedge rst or posedge clk) if (rst) bank3_open <= #(1) 1'b0;
  else if (((bank_adr == 2'h3) & bank_set)) bank3_open <= #(1) 1'b1;
  else if (((bank_adr == 2'h3) & bank_clr)) bank3_open <= #(1) 1'b0;
  else if (bank_clr_all) bank3_open <= #(1) 1'b0;

  always @(bank3_open or bank2_open or bank1_open or bank0_open or bank_adr) case (bank_adr)
    2'h0: bank_open = bank0_open;
    2'h1: bank_open = bank1_open;
    2'h2: bank_open = bank2_open;
    2'h3: bank_open = bank3_open;
  endcase

  always @(posedge clk) if (((bank_adr == 2'h0) & bank_set)) b0_last_row <= #(1) row_adr;

  always @(posedge clk) if (((bank_adr == 2'h1) & bank_set)) b1_last_row <= #(1) row_adr;

  always @(posedge clk) if (((bank_adr == 2'h2) & bank_set)) b2_last_row <= #(1) row_adr;

  always @(posedge clk) if (((bank_adr == 2'h3) & bank_set)) b3_last_row <= #(1) row_adr;

  always @(row3_same or row2_same or row1_same or row0_same or bank_adr) case (bank_adr)
    2'h0: row_same = row0_same;
    2'h1: row_same = row1_same;
    2'h2: row_same = row2_same;
    2'h3: row_same = row3_same;
  endcase
endmodule  /* mc_obct */

`timescale 1ns/10ps
/* This module was originally defined in file /hpc/home/connect.zzheng989/researchlib/FlattenRTL/tests/regression/memctrl-T100/memctrl.v at line 3073. */
module mc_obct_dummy(clk, rst, row_adr, bank_adr, bank_set, bank_clr, bank_clr_all, bank_open, any_bank_open, row_same);
  input clk;
  input rst;
  input [12:0] row_adr;
  input [1:0] bank_adr;
  input bank_set;
  input bank_clr;
  input bank_clr_all;
  output bank_open;
  output any_bank_open;
  output row_same;

  wire any_bank_open;
  wire [1:0] bank_adr;
  wire bank_clr;
  wire bank_clr_all;
  wire bank_open;
  wire bank_set;
  wire clk;
  wire [12:0] row_adr;
  wire row_same;
  wire rst;

  assign any_bank_open = 1'b0;
  assign bank_open = 1'b0;
  assign row_same = 1'b0;

endmodule  /* mc_obct_dummy */

`timescale 1ns/10ps
/* This module was originally defined in file /hpc/home/connect.zzheng989/researchlib/FlattenRTL/tests/regression/memctrl-T100/memctrl.v at line 3319. */
module mc_rd_fifo(clk, rst, clr, din, we, dout, re);
  input clk;
  input rst;
  input clr;
  input [35:0] din;
  input we;
  output [35:0] dout;
  input re;

  wire clk;
  wire clr;
  wire [35:0] din;
  reg [35:0] dout;
  reg [35:0] r0;
  reg [35:0] r1;
  reg [35:0] r2;
  reg [35:0] r3;
  reg [3:0] rd_adr;
  wire re;
  wire rst;
  wire we;
  reg [3:0] wr_adr;



  always @(posedge rst or posedge clk) if (rst) rd_adr <= #(1) 4'h1;
  else if (clr) rd_adr <= #(1) 4'h1;
  else if (re) rd_adr <= #(1) {rd_adr[2:0], rd_adr[3]};

  always @(posedge rst or posedge clk) if (rst) wr_adr <= #(1) 4'h1;
  else if (clr) wr_adr <= #(1) 4'h1;
  else if (we) wr_adr <= #(1) {wr_adr[2:0], wr_adr[3]};

  always @(posedge clk) if ((we & wr_adr[0])) r0 <= #(1) din;

  always @(posedge clk) if ((we & wr_adr[1])) r1 <= #(1) din;

  always @(posedge clk) if ((we & wr_adr[2])) r2 <= #(1) din;

  always @(posedge clk) if ((we & wr_adr[3])) r3 <= #(1) din;

  always @(din or we or re or r3 or r2 or r1 or r0 or rd_adr) case (rd_adr)
    4'h1: dout = r0;
    4'h2: dout = r1;
    4'h4: dout = r2;
    4'h8: dout = r3;
  endcase
endmodule  /* mc_rd_fifo */
